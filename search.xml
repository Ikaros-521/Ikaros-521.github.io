<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS7搭建Frp实现内网穿透</title>
      <link href="/blog/2020/04/09/centos7-da-jian-frp-shi-xian-nei-wang-chuan-tou/"/>
      <url>/blog/2020/04/09/centos7-da-jian-frp-shi-xian-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<br><a href="https://blog.csdn.net/u013144287/article/details/78589643/" target="_blank" rel="noopener">十分钟教你配置frp实现内网穿透</a><br><a href="https://www.cnblogs.com/hxun/p/10877795.html" target="_blank" rel="noopener">CentOS7 安装frp与开机启动</a><br><a href="https://www.jianshu.com/p/93bf511ea72e" target="_blank" rel="noopener">frp实现内网穿透（centos7）</a></p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>官方项目地址：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a><br><img src="https://img-blog.csdnimg.cn/20200409174219315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>这里下载的是0.32.1版</p><pre class=" language-powershell"><code class="language-powershell">wget https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>fatedier<span class="token operator">/</span>frp<span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span>v0<span class="token punctuation">.</span>32<span class="token punctuation">.</span>1<span class="token operator">/</span>frp_0<span class="token punctuation">.</span>32<span class="token punctuation">.</span>1_linux_amd64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</code></pre><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre class=" language-powershell"><code class="language-powershell">tar <span class="token operator">-</span>xvf frp_0<span class="token punctuation">.</span>32<span class="token punctuation">.</span>1_linux_amd64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</code></pre><p><img src="https://img-blog.csdnimg.cn/20200409223507160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="移动至-usr-local"><a href="#移动至-usr-local" class="headerlink" title="移动至 /usr/local"></a>移动至 /usr/local</h3><p>新建个文件夹<code>mkdir /usr/local/frp</code><br>全部移动到 /usr/local/frp 里面 <code>mv frp_0.32.1_linux_amd64/* /usr/local/frp/</code></p><h2 id="配置systemctl来控制，服务端运行"><a href="#配置systemctl来控制，服务端运行" class="headerlink" title="配置systemctl来控制，服务端运行"></a>配置systemctl来控制，服务端运行</h2><p>vim打开文件 <code>vim /usr/lib/systemd/system/frp.service</code><br>写入以下内容，注意上文的路径和此处有关。这里是启动的<strong>服务端</strong>。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[Unit]</span>Description=The nginx HTTP and reverse proxy serverAfter=network<span class="token punctuation">.</span>target remote<span class="token operator">-</span>fs<span class="token punctuation">.</span>target nss<span class="token operator">-</span>lookup<span class="token punctuation">.</span>target<span class="token namespace">[Service]</span><span class="token function">Type</span>=simpleExecStart=<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>frp<span class="token operator">/</span>frps <span class="token operator">-</span>c <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>frp<span class="token operator">/</span>frps<span class="token punctuation">.</span>iniKillSignal=SIGQUITTimeoutStopSec=5KillMode=<span class="token keyword">process</span>PrivateTmp=trueStandardOutput=syslogStandardError=inherit<span class="token namespace">[Install]</span>WantedBy=multi<span class="token operator">-</span>user<span class="token punctuation">.</span>target</code></pre><p>重新加载服务的配置文件 <code>systemctl daemon-reload</code><br>现在就可以用 systemctl 套装来控制 frp 了。</p><h3 id="启动-停止-重启，查看状态，设置开机自启-关闭开机自启"><a href="#启动-停止-重启，查看状态，设置开机自启-关闭开机自启" class="headerlink" title="启动/停止/重启，查看状态，设置开机自启/关闭开机自启"></a>启动/停止/重启，查看状态，设置开机自启/关闭开机自启</h3><pre class=" language-powershell"><code class="language-powershell">systemctl <span class="token function">start</span> frpsystemctl stop frpsystemctl restart frpsystemctl status frpsystemctl enable frpsystemctl disable frp</code></pre><p><img src="https://img-blog.csdnimg.cn/20200409173829380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置"></a>具体配置</h2><p>参考文章：<a href="https://www.jianshu.com/p/93bf511ea72e" target="_blank" rel="noopener">frp实现内网穿透（centos7）</a><br>服务端 <strong>frps.ini</strong>, 客户端 <strong>frpc.ini</strong></p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[common]</span> 必须设置bind_port 是自己设定的frp服务端端口vhost_http_port 是自己设定的http访问端口<span class="token namespace">[ssh]</span> ssh反向代理<span class="token punctuation">(</span>不是必须设置<span class="token punctuation">)</span>listen_port 是自己设定的ssh访问端口auth_token用于身份认证（以下皆是）。<span class="token namespace">[web]</span> http反向代理<span class="token punctuation">[</span><span class="token punctuation">]</span>里的内容可以自己设定，但是客户端和服务端必须要对应<span class="token punctuation">(</span>如<span class="token namespace">[aaa]</span><span class="token punctuation">,</span><span class="token namespace">[bbb]</span><span class="token punctuation">)</span>；<span class="token function">type</span> 为服务类型，可以设为http<span class="token punctuation">,</span>httpscustom_domains为要映射的域名，记得域名的A记录要解析到外网主机的IP。<span class="token namespace">[web2]</span>同上<span class="token punctuation">(</span>可设置多个<span class="token punctuation">)</span></code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[common]</span>bind_port = 7000vhost_http_port = 80<span class="token namespace">[ssh]</span>listen_port = 6000auth_token = 123<span class="token namespace">[web]</span><span class="token function">type</span> = httpcustom_domains = test1<span class="token punctuation">.</span>a<span class="token punctuation">.</span>comauth_token = 123<span class="token namespace">[web2]</span><span class="token function">type</span> = httpcustom_domains = test2<span class="token punctuation">.</span>a<span class="token punctuation">.</span>comauth_token = 123</code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[common]</span>必填server_addrfrp服务端的ip（也就是外网主机的IP）server_portfrp服务端的bind_prot。<span class="token namespace">[ssh]</span>local_port客户端ssh端口。<span class="token namespace">[web]</span><span class="token function">type</span>对应服务端配置local_port客户端访问端口。<span class="token namespace">[web2]</span>同上</code></pre><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[common]</span>server_addr = 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>10server_port = 7000auth_token = 123<span class="token namespace">[ssh]</span>local_port = 22<span class="token namespace">[web]</span><span class="token function">type</span> = httplocal_port = 80<span class="token namespace">[web2]</span><span class="token function">type</span> = httplocal_port = 8080</code></pre><p>直接运行服务端效果<br><img src="https://img-blog.csdnimg.cn/20200409174033899.png" alt="在这里插入图片描述"></p><h2 id="安装Windows客户端"><a href="#安装Windows客户端" class="headerlink" title="安装Windows客户端"></a>安装Windows客户端</h2><p>官方下载传送门：<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a><br>现在已经更新到0.32.1了。github下载慢可以去这里下载<a href="http://diannaobos.com/frp/" target="_blank" rel="noopener">http://diannaobos.com/frp/</a><br><img src="https://img-blog.csdnimg.cn/20200409212342889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409223920951.png" alt="在这里插入图片描述"><br>解压打开来<br><img src="https://img-blog.csdnimg.cn/20200409223950527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置一下 frpc.ini ，type填的http也可以根据需要修改。<br><img src="https://img-blog.csdnimg.cn/20200409224100236.png" alt="在这里插入图片描述"></p><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[common]</span>server_addr = &lt;远程frp服务器ip>server_port = 远程frp服务器端口privilege_token = 远程frp服务器token<span class="token namespace">[http]</span><span class="token function">type</span> = httplocal_ip = 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1local_port = 本地端口号remote_port = 远程frp服务器的http服务端口号custom_domains = 配置的域名</code></pre><p>打开cmd，cd到这个路径，<strong>frpc.exe</strong>运行<br><img src="https://img-blog.csdnimg.cn/20200409224521281.png" alt="在这里插入图片描述"><br>运行会打印信息，出错就自行调整吧。</p><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>frps.ini<br><img src="https://img-blog.csdnimg.cn/20200409224419983.png" alt="在这里插入图片描述"><br>启动服务 <code>systemctl restart frp</code><br>绑定本地7000端口，http访问端口8080，记得开放端口（安全组）。</p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>frpc.ini<br><img src="https://img-blog.csdnimg.cn/20200409224100236.png" alt="在这里插入图片描述"><br>打开cmd，cd到这个路径，<strong>frpc.exe</strong>运行<br><img src="https://img-blog.csdnimg.cn/20200409224521281.png" alt="在这里插入图片描述"><br>看到打印成功了。<br>访问服务端的8080端口就相当于访问你本地的8080端口.</p><pre class=" language-bash"><code class="language-bash">custom_domains:remote_port <span class="token operator">=</span> local_ip:local_port</code></pre><p>我们打开浏览器，访问 域名加端口，我的配置没域名，所以是公网IP:端口，即<strong>公网IP:8080</strong>。看到本地的web项目了。<br><img src="https://img-blog.csdnimg.cn/20200409224932461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="客户端web项目"><a href="#客户端web项目" class="headerlink" title="客户端web项目"></a>客户端web项目</h3><p>我这里用的phpstudy，快速搭建的默认页面。<br><img src="https://img-blog.csdnimg.cn/202004092251115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接 localhost:8080 或 127.0.0.1:8080 即可访问<br><img src="https://img-blog.csdnimg.cn/20200409225310605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 内网穿透 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
            <tag> Linux </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7搭建GateOne，实现WebSSH</title>
      <link href="/blog/2020/04/09/centos7-da-jian-gateone-shi-xian-webssh/"/>
      <url>/blog/2020/04/09/centos7-da-jian-gateone-shi-xian-webssh/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<a href="https://www.laozuo.org/10703.html" target="_blank" rel="noopener">CentOS安装配置GateOne实现Web终端SSH功能</a></p><h2 id="GateOne"><a href="#GateOne" class="headerlink" title="GateOne"></a>GateOne</h2><p>GateOne地址：<a href="https://github.com/liftoff/GateOne" target="_blank" rel="noopener">https://github.com/liftoff/GateOne</a><br><img src="https://img-blog.csdnimg.cn/20200409095132585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到官方也2年没有更新了。</p><h3 id="首先有python环境并安装了pip（我的是python2-7）"><a href="#首先有python环境并安装了pip（我的是python2-7）" class="headerlink" title="首先有python环境并安装了pip（我的是python2.7）"></a>首先有python环境并安装了pip（我的是python2.7）</h3><p>CentOS7自带python2.7，可以运行 <code>python -v</code> 瞅瞅你python的版本<br><img src="https://img-blog.csdnimg.cn/20200409095435656.png" alt="在这里插入图片描述"></p><h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><pre class=" language-powershell"><code class="language-powershell">wget https:<span class="token operator">/</span><span class="token operator">/</span>soft<span class="token punctuation">.</span>laozuo<span class="token punctuation">.</span>org<span class="token operator">/</span>git<span class="token operator">/</span>get<span class="token operator">-</span>pip<span class="token punctuation">.</span>pypython get<span class="token operator">-</span>pip<span class="token punctuation">.</span>py</code></pre><h3 id="安装tornado、Pillow"><a href="#安装tornado、Pillow" class="headerlink" title="安装tornado、Pillow"></a>安装tornado、Pillow</h3><pre class=" language-powershell"><code class="language-powershell">pip install <span class="token string">'tornado==2.4.1'</span>pip install Pillow</code></pre><h3 id="下载GateOne且安装"><a href="#下载GateOne且安装" class="headerlink" title="下载GateOne且安装"></a>下载GateOne且安装</h3><pre class=" language-powershell"><code class="language-powershell">wget https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>downloads<span class="token operator">/</span>liftoff<span class="token operator">/</span>GateOne<span class="token operator">/</span>gateone<span class="token operator">-</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gztar <span class="token operator">-</span>zxvf gateone<span class="token operator">-</span>1<span class="token punctuation">.</span>1<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gzcd GateOnepython setup<span class="token punctuation">.</span>py install</code></pre><h3 id="运行GateOne"><a href="#运行GateOne" class="headerlink" title="运行GateOne"></a>运行GateOne</h3><pre class=" language-powershell"><code class="language-powershell">cd <span class="token operator">/</span>opt<span class="token operator">/</span>gateone<span class="token punctuation">.</span><span class="token operator">/</span>gateone<span class="token punctuation">.</span>py</code></pre><p>默认监听443端口<br><img src="https://img-blog.csdnimg.cn/20200409092108814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="修改GateOne配置远程管理"><a href="#修改GateOne配置远程管理" class="headerlink" title="修改GateOne配置远程管理"></a>修改GateOne配置远程管理</h3><p>配置文件 <code>/opt/gateone/server.conf</code><br>vi 打开<br>origins这里添加内容，我们的服务器公网IP地址要加入进去。<strong>注意分号和双引号</strong>~<br><img src="https://img-blog.csdnimg.cn/20200409093018399.png" alt="在这里插入图片描述"><br>port端口默认是443，我们也可以修改成自己的端口。修改后记得<strong>安全组放行</strong>！！！。<br><img src="https://img-blog.csdnimg.cn/20200409093120581.png" alt="在这里插入图片描述"><br>修改session超时时间。不加入会一直在刷新刷新的，无法操作。<br><img src="https://img-blog.csdnimg.cn/20200409093342527.png" alt="在这里插入图片描述"><br>配置文件里还有很多内容，可以自行修改<br><img src="https://img-blog.csdnimg.cn/20200409095002717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="访问webssh"><a href="#访问webssh" class="headerlink" title="访问webssh"></a>访问webssh</h2><p>默认https，加上公网IP:443端口，即可访问登录页面<br><img src="https://img-blog.csdnimg.cn/20200409094007914.png" alt="在这里插入图片描述"><br>输入对应信息，成功登录<br><img src="https://img-blog.csdnimg.cn/20200409094310896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="设定自动后台运行"><a href="#设定自动后台运行" class="headerlink" title="设定自动后台运行"></a>设定自动后台运行</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token operator">/</span>sbin<span class="token operator">/</span>chkconfig gateone onsystemctl <span class="token function">start</span> gateone</code></pre><p>通过 systemctl 实现控制<br>老规矩，运行/停止/重启，查看状态，设置开机自启/关闭开机自启<br>分别是 <code>systemctl start/stop/restart/status/enable/disable gateone</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> WebSSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> GateOne </tag>
            
            <tag> WebSSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7的Apache搭建，WEB项目部署，域名备案，域名解析，正式上线</title>
      <link href="/blog/2020/04/06/centos7-de-apache-da-jian-web-xiang-mu-bu-shu-yu-ming-bei-an-yu-ming-jie-xi-zheng-shi-shang-xian/"/>
      <url>/blog/2020/04/06/centos7-de-apache-da-jian-web-xiang-mu-bu-shu-yu-ming-bei-an-yu-ming-jie-xi-zheng-shi-shang-xian/</url>
      
        <content type="html"><![CDATA[<p>即上期<a href="https://blog.csdn.net/Ikaros_521/article/details/104795594" target="_blank" rel="noopener">【超详细】ubuntu18.04服务器 搭建Java，Tomcat和MySQL</a>过后，这期主要将Apache的搭建，WEB项目的部署，域名的备案，域名的解析，正式上线。</p><h2 id="Apache搭建"><a href="#Apache搭建" class="headerlink" title="Apache搭建"></a>Apache搭建</h2><p>参考：<a href="https://blog.csdn.net/xgrx2008/article/details/82715186" target="_blank" rel="noopener">Centos 7 Apache 服务安装及配置</a><br>很简单，yum直接安装。</p><pre class=" language-powershell"><code class="language-powershell">yum install httpd<span class="token operator">*</span> <span class="token operator">-</span>y</code></pre><p>然后配合systemctl命令，来<strong>控制</strong>它。<br>分别是启动，重启，停止，开机自启，关闭开机自启，运行状态</p><pre class=" language-powershell"><code class="language-powershell">systemctl <span class="token function">start</span> httpd<span class="token punctuation">.</span>servicesystemctl restart httpd<span class="token punctuation">.</span>servicesystemctl stop httpd<span class="token punctuation">.</span>servicesystemctl enable httpd<span class="token punctuation">.</span>servicesystemctl disable httpd<span class="token punctuation">.</span>servicesystemctl status httpd<span class="token punctuation">.</span>service</code></pre><p><strong>配置文件</strong> <code>/etc/httpd/conf/httpd.conf</code><br>默认监听8080端口，如有需要可以自行更换，例如换成80端口<br><img src="https://img-blog.csdnimg.cn/20200404110810103.png" alt="在这里插入图片描述"><br><strong>网站数据目录</strong>    <code>/var/www/html</code></p><h2 id="WEB项目部署"><a href="#WEB项目部署" class="headerlink" title="WEB项目部署"></a>WEB项目部署</h2><p>将项目移动到apache的数据目录下，我这里是在 <strong>/var/www/html</strong>下有个<strong>home</strong>文件夹<br><img src="https://img-blog.csdnimg.cn/20200404110953373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行apache服务，start命令<br><img src="https://img-blog.csdnimg.cn/20200404111449863.png" alt="在这里插入图片描述"><br>访问一下我们的项目吧~<br><strong>（记得控制台的安全组开放8080端口）</strong><br><strong>公网IP:8080</strong>就是我们的<code>/var/www/html</code>目录了，然后我的<strong>home/index.html</strong>就是我的页面了。<br><img src="https://img-blog.csdnimg.cn/20200404111628612.png" alt="在这里插入图片描述"></p><h2 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h2><p>前提是你买了域名<br><img src="https://img-blog.csdnimg.cn/20200404111921294.png" alt="在这里插入图片描述"><br>查一个你喜欢的域名，买下来。<br><img src="https://img-blog.csdnimg.cn/20200404112001625.png" alt="在这里插入图片描述"><br>进行实名认证<br><img src="https://img-blog.csdnimg.cn/20200404112050311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过后可以进行备案，需要准备身份证，本人（<strong>白色背景</strong>），域名。按照步骤一一做，推荐使用手机app。<br><img src="https://img-blog.csdnimg.cn/20200404112237296.png" alt="在这里插入图片描述"></p><p>期间会有平台的电话和工信部的短信验证，切勿关闭手机。<br><img src="https://img-blog.csdnimg.cn/20200404144326806.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404144334912.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>备案通过后，会有工信部发备案号和密码<br><img src="https://img-blog.csdnimg.cn/20200404112332418.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404113036942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p><img src="https://img-blog.csdnimg.cn/20200404113136207.png" alt="在这里插入图片描述"><br>直接新手引导，一步到位<br><img src="https://img-blog.csdnimg.cn/20200404113231620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>记录直就是你服务器的<strong>公网IP</strong><br><img src="https://img-blog.csdnimg.cn/20200404113257803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>没有备案就解析的话，会这样哦<br><img src="https://img-blog.csdnimg.cn/20200404113432927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="正式上线"><a href="#正式上线" class="headerlink" title="正式上线"></a>正式上线</h2><p>添加备案号和超链接至web项目页面底部<br><img src="https://img-blog.csdnimg.cn/20200404113548752.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404113706749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我是这样的结构<br><img src="https://img-blog.csdnimg.cn/20200404113759737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>span<span class="token operator">></span>备案号：<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://beian.miit.gov.cn/"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> rel<span class="token operator">=</span><span class="token string">"nofollow"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>浙ICP备<span class="token number">20009665</span>号<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></code></pre><p>细心的小伙伴可能发现了我没有带8080端口了，这就是改成80端口的魔力哦~<br><img src="https://img-blog.csdnimg.cn/20200404114146957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404114229136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那么本期也就到此为止了，我们下期再见。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 域名 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 域名 </tag>
            
            <tag> 域名备案 </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7搭建Squid代理服务器，代理QQ</title>
      <link href="/blog/2020/04/02/centos7-da-jian-squid-dai-li-fu-wu-qi-dai-li-qq/"/>
      <url>/blog/2020/04/02/centos7-da-jian-squid-dai-li-fu-wu-qi-dai-li-qq/</url>
      
        <content type="html"><![CDATA[<p>实现与CentOS7，其他版本请自行变动。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>具体搭建参考 <a href="https://blog.csdn.net/qingfengxulai/article/details/80853870" target="_blank" rel="noopener">使用Squid搭建CentOS7代理服务器上网</a> 部分内容参考此文章</p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>终端执行命令</p><pre class=" language-powershell"><code class="language-powershell">yum install squid <span class="token operator">-</span>yyum install httpd<span class="token operator">-</span>tools <span class="token operator">-</span>y</code></pre><h3 id="生成密码文件"><a href="#生成密码文件" class="headerlink" title="生成密码文件"></a>生成密码文件</h3><p>创建文件夹</p><pre class=" language-powershell"><code class="language-powershell">mkdir <span class="token operator">/</span>etc<span class="token operator">/</span>squid3<span class="token operator">/</span><span class="token comment" spellcheck="true">#ikaros 是用户名</span>htpasswd <span class="token operator">-</span>cd <span class="token operator">/</span>etc<span class="token operator">/</span>squid3<span class="token operator">/</span>passwords ikaros<span class="token comment" spellcheck="true">#提示输入密码，比如输入123456</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402120740732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="测试密码文件"><a href="#测试密码文件" class="headerlink" title="测试密码文件"></a>测试密码文件</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>lib64<span class="token operator">/</span>squid<span class="token operator">/</span>basic_ncsa_auth <span class="token operator">/</span>etc<span class="token operator">/</span>squid3<span class="token operator">/</span>passwords<span class="token comment" spellcheck="true">#输入用户名 密码</span>ikaros  123456<span class="token comment" spellcheck="true">#提示ok说明成功</span>ok<span class="token comment" spellcheck="true">#ctrl+c退出</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402120859483.png" alt="在这里插入图片描述"></p><h3 id="配置squid-conf文件"><a href="#配置squid-conf文件" class="headerlink" title="配置squid.conf文件"></a>配置squid.conf文件</h3><pre class=" language-powershell"><code class="language-powershell">vi <span class="token operator">/</span>etc<span class="token operator">/</span>squid<span class="token operator">/</span>squid<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true">#在最后添加</span>auth_param basic program <span class="token operator">/</span>usr<span class="token operator">/</span>lib64<span class="token operator">/</span>squid<span class="token operator">/</span>basic_ncsa_auth <span class="token operator">/</span>etc<span class="token operator">/</span>squid3<span class="token operator">/</span>passwordsauth_param basic realm proxyacl authenticated proxy_auth REQUIREDhttp_access allow authenticated<span class="token comment" spellcheck="true"># And finally deny all other access to this proxy</span>http_access allow all<span class="token comment" spellcheck="true">#这里是端口号，可以按需修改</span><span class="token comment" spellcheck="true">#http_port 3128 这样写会同时监听ipv6和ipv4的端口，推荐适应下面的配置方法。</span>http_port 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:3128</code></pre><p>将 <code>http_access deny CONNECT !SSL_ports</code>改为<code>http_access allow CONNECT !SSL_ports</code></p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>squid的日志位于/var/log/squid/目录下。</p><h3 id="启动，停止，重启等"><a href="#启动，停止，重启等" class="headerlink" title="启动，停止，重启等"></a>启动，停止，重启等</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#启动start</span>systemctl <span class="token function">start</span> squid<span class="token punctuation">.</span>service<span class="token comment" spellcheck="true">#停止stop</span>systemctl stop squid<span class="token punctuation">.</span>service<span class="token comment" spellcheck="true">#重启stop</span>systemctl restart squid<span class="token punctuation">.</span>service<span class="token comment" spellcheck="true">#配置开机自启动</span>systemctl enable squid<span class="token punctuation">.</span>service<span class="token comment" spellcheck="true">#关闭开机自启动</span>systemctl disable squid<span class="token punctuation">.</span>service<span class="token comment" spellcheck="true">#查看运行状态</span>systemctl status squid<span class="token punctuation">.</span>service</code></pre><p><img src="https://img-blog.csdnimg.cn/20200402121536499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Windows下客户端测试"><a href="#Windows下客户端测试" class="headerlink" title="Windows下客户端测试"></a>Windows下客户端测试</h3><p>根据以上步骤安装完后，Windows下安装<strong>Proxifier</strong><br><img src="https://img-blog.csdnimg.cn/20200402112102733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击文件下面的按钮，新建代理服务器<br><img src="https://img-blog.csdnimg.cn/20200402112227374.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200402112212627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>填完信息后我们检查一下<br><img src="https://img-blog.csdnimg.cn/20200402112319424.png" alt="在这里插入图片描述"><br>正常情况下是这样的<br><img src="https://img-blog.csdnimg.cn/2020040211234019.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="如果报错"><a href="#如果报错" class="headerlink" title="如果报错"></a>如果报错</h2><p>可以采取解决方案：<br>1、是否开放了服务器端口，例如云服务器安全组开放出入站规则，加入3128端口<br>2、<br><img src="https://img-blog.csdnimg.cn/20200402112521492.png" alt="在这里插入图片描述"><br>这种情况需要修改配置文件 /etc/squid/squid.conf。<br>将 <code>http_access deny CONNECT !SSL_ports</code>改为<code>http_access allow CONNECT !SSL_ports</code><br>3、开头文章教程里的这一块部分是否做了配置<br><img src="https://img-blog.csdnimg.cn/20200402112808217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、这一部分是否也 allow<br><img src="https://img-blog.csdnimg.cn/20200402121121851.png" alt="在这里插入图片描述"><br>5、以上步骤结束后，重启squid</p><pre class=" language-powershell"><code class="language-powershell">systemctl restart squid</code></pre><h2 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h2><p><img src="https://img-blog.csdnimg.cn/20200402112947860.png" alt="在这里插入图片描述"><br>关闭默认的 localhost 和 default<br><img src="https://img-blog.csdnimg.cn/20200402113031348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>针对对应程序进行代理设置<br><img src="https://img-blog.csdnimg.cn/20200402113124730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我这里以QQ为例<br><img src="https://img-blog.csdnimg.cn/20200402113145797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置好后，打开QQ，点击设置<br><img src="https://img-blog.csdnimg.cn/20200402113215482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>填入信息，默认的3128端口<br><img src="https://img-blog.csdnimg.cn/20200402113248679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试一下<br><img src="https://img-blog.csdnimg.cn/20200402113257814.png" alt="在这里插入图片描述"><br>就可以登录QQ了<br><img src="https://img-blog.csdnimg.cn/2020040211331528.png" alt="在这里插入图片描述"><br>回到 proxifier<br><img src="https://img-blog.csdnimg.cn/20200402113338664.png" alt="在这里插入图片描述"><br>可以看到QQ已经接入代理了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 代理服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 代理服务器 </tag>
            
            <tag> Squid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器搭建代理服务器 —— shadowsock，简单说明</title>
      <link href="/blog/2020/03/17/yun-fu-wu-qi-da-jian-dai-li-fu-wu-qi-shadowsock-jian-dan-shuo-ming/"/>
      <url>/blog/2020/03/17/yun-fu-wu-qi-da-jian-dai-li-fu-wu-qi-shadowsock-jian-dan-shuo-ming/</url>
      
        <content type="html"><![CDATA[<p><em>前情提要：因为公司墙了部分网站和QQ，所以用闲置服务器搭个代理玩玩。</em></p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>需要一台云服务器。我的是 ubuntu18.04</p><h2 id="安装-shadowsock"><a href="#安装-shadowsock" class="headerlink" title="安装 shadowsock"></a>安装 shadowsock</h2><p>可以参考网上教程<br><a href="https://www.jianshu.com/p/0bc070bed442" target="_blank" rel="noopener">ubuntu 16.04服务器上搭建Shadowsocks服务</a><br><a href="https://pdf-lib.org/Home/Details/1154" target="_blank" rel="noopener">Ubuntu 搭建Shadowsocks服务</a><br><a href="https://www.pianshen.com/article/8919290921/" target="_blank" rel="noopener">使用 Ubuntu18.04 服务器搭建 shadowsock 代理服务器</a><br>方法都类似，我这也简单写一下。<br>我是装了 python2和python3</p><pre class=" language-powershell"><code class="language-powershell">sudo apt<span class="token operator">-</span>get install python2sudo apt<span class="token operator">-</span>get install python3</code></pre><p>又装了个pip3和setuptools</p><pre class=" language-powershell"><code class="language-powershell">sudo apt<span class="token operator">-</span>get install python3<span class="token operator">-</span>pipsudo apt<span class="token operator">-</span>get install python3<span class="token operator">-</span>setuptools</code></pre><p>然后安装 shadowsock</p><pre class=" language-powershell"><code class="language-powershell">pip3 install https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>shadowsocks<span class="token operator">/</span>shadowsocks<span class="token operator">/</span>archive<span class="token operator">/</span>master<span class="token punctuation">.</span>zip</code></pre><p><img src="https://img-blog.csdnimg.cn/20200317145820161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看版本，如果允许失败就是没装好</p><pre class=" language-powershell"><code class="language-powershell">ssserver <span class="token operator">--</span>version</code></pre><p><img src="https://img-blog.csdnimg.cn/20200317145930885.png" alt="在这里插入图片描述"><br>其他教程里的用配置文件shadowsocks.json启动一直失败，我这就不用了</p><h3 id="运行shadowsock"><a href="#运行shadowsock" class="headerlink" title="运行shadowsock"></a>运行shadowsock</h3><pre class=" language-powershell"><code class="language-powershell">sudo ssserver <span class="token operator">-</span>p 7878 <span class="token operator">-</span>k password <span class="token operator">-</span>m rc4<span class="token operator">-</span>md5 <span class="token operator">-</span>d <span class="token function">start</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200317150216943.png" alt="在这里插入图片描述"></p><pre class=" language-powershell"><code class="language-powershell">usage: ssserver <span class="token namespace">[OPTION]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>A fast tunnel proxy that helps you bypass firewalls<span class="token punctuation">.</span>You can supply configurations via either config file or command line arguments<span class="token punctuation">.</span>Proxy options:  <span class="token operator">-</span>c CONFIG              path to config file  <span class="token operator">-</span>s SERVER_ADDR         server address<span class="token punctuation">,</span> default: 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0  <span class="token operator">-</span>p SERVER_PORT         server port<span class="token punctuation">,</span> default: 8388  <span class="token operator">-</span>k PASSWORD            password  <span class="token operator">-</span>m METHOD              encryption method<span class="token punctuation">,</span> default: aes<span class="token operator">-</span>256<span class="token operator">-</span>cfb                         Sodium:                            chacha20<span class="token operator">-</span>poly1305<span class="token punctuation">,</span> chacha20<span class="token operator">-</span>ietf<span class="token operator">-</span>poly1305<span class="token punctuation">,</span>                            xchacha20<span class="token operator">-</span>ietf<span class="token operator">-</span>poly1305<span class="token punctuation">,</span>                            sodium:aes<span class="token operator">-</span>256<span class="token operator">-</span>gcm<span class="token punctuation">,</span>                            salsa20<span class="token punctuation">,</span> chacha20<span class="token punctuation">,</span> chacha20<span class="token operator">-</span>ietf<span class="token punctuation">.</span>                         Sodium 1<span class="token punctuation">.</span>0<span class="token punctuation">.</span>12:                            xchacha20                         OpenSSL:                            aes<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>gcm<span class="token punctuation">,</span> aes<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>cfb<span class="token punctuation">,</span>                            aes<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>ofb<span class="token punctuation">,</span> aes<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>ctr<span class="token punctuation">,</span>                            camellia<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>cfb<span class="token punctuation">,</span>                            bf<span class="token operator">-</span>cfb<span class="token punctuation">,</span> cast5<span class="token operator">-</span>cfb<span class="token punctuation">,</span> des<span class="token operator">-</span>cfb<span class="token punctuation">,</span> idea<span class="token operator">-</span>cfb<span class="token punctuation">,</span>                            rc2<span class="token operator">-</span>cfb<span class="token punctuation">,</span> seed<span class="token operator">-</span>cfb<span class="token punctuation">,</span>                            rc4<span class="token punctuation">,</span> rc4<span class="token operator">-</span>md5<span class="token punctuation">,</span> table<span class="token punctuation">.</span>                         OpenSSL 1<span class="token punctuation">.</span>1:                            aes<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>ocb                         mbedTLS:                            mbedtls:aes<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>cfb128<span class="token punctuation">,</span>                            mbedtls:aes<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>ctr<span class="token punctuation">,</span>                            mbedtls:camellia<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>cfb128<span class="token punctuation">,</span>                            mbedtls:aes<span class="token operator">-</span><span class="token punctuation">{</span>128<span class="token punctuation">|</span>192<span class="token punctuation">|</span>256<span class="token punctuation">}</span><span class="token operator">-</span>gcm  <span class="token operator">-</span>t TIMEOUT             timeout in seconds<span class="token punctuation">,</span> default: 300  <span class="token operator">-</span>a ONE_TIME_AUTH       one time auth  <span class="token operator">--</span>fast<span class="token operator">-</span>open            use TCP_FASTOPEN<span class="token punctuation">,</span> requires Linux 3<span class="token punctuation">.</span>7<span class="token operator">+</span>  <span class="token operator">--</span>workers=WORKERS      number of workers<span class="token punctuation">,</span> available on Unix<span class="token operator">/</span>Linux  <span class="token operator">--</span>forbidden<span class="token operator">-</span>ip=IPLIST  comma seperated IP list forbidden to connect  <span class="token operator">--</span>manager<span class="token operator">-</span>address=ADDR optional server manager UDP address<span class="token punctuation">,</span> see wiki  <span class="token operator">--</span>prefer<span class="token operator">-</span>ipv6          resolve ipv6 address first  <span class="token operator">--</span>libopenssl=PATH      custom openssl crypto lib path  <span class="token operator">--</span>libmbedtls=PATH      custom mbedtls crypto lib path  <span class="token operator">--</span>libsodium=PATH       custom sodium crypto lib pathGeneral options:  <span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">--</span>help             show this help message and <span class="token keyword">exit</span>  <span class="token operator">-</span>d <span class="token function">start</span><span class="token operator">/</span>stop<span class="token operator">/</span>restart  daemon mode  <span class="token operator">--</span>pid<span class="token operator">-</span>file PID_FILE    pid file <span class="token keyword">for</span> daemon mode  <span class="token operator">--</span>log<span class="token operator">-</span>file LOG_FILE    log file <span class="token keyword">for</span> daemon mode  <span class="token operator">--</span>user USER            username to run as  <span class="token operator">-</span>v<span class="token punctuation">,</span> <span class="token operator">-</span>vv                verbose mode  <span class="token operator">-</span>q<span class="token punctuation">,</span> <span class="token operator">-</span>qq                quiet mode<span class="token punctuation">,</span> only show warnings<span class="token operator">/</span>errors  <span class="token operator">--</span>version              show version informationOnline help: &lt;https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>shadowsocks<span class="token operator">/</span>shadowsocks></code></pre><h2 id="开放对应端口"><a href="#开放对应端口" class="headerlink" title="开放对应端口"></a>开放对应端口</h2><p>因为上面我用的<strong>7878</strong>端口，所以我就在 服务器控制台 的<strong>安全组</strong>里开放 7878端口。出入站都放通。<br><img src="https://img-blog.csdnimg.cn/20200317150356540.png" alt="在这里插入图片描述"></p><h2 id="windows下载客户端进行连接"><a href="#windows下载客户端进行连接" class="headerlink" title="windows下载客户端进行连接"></a>windows下载客户端进行连接</h2><p><a href="https://b.julym.com/original/83.html" target="_blank" rel="noopener">Shadowsocks各版本官方下载地址以及使用教程</a><br>我这也提供个别人打包的版本。<br>链接：<a href="https://pan.baidu.com/s/1Lm5qEjLJYDjP4oJ2UWPbWA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Lm5qEjLJYDjP4oJ2UWPbWA</a><br>提取码：cjdr<br><img src="https://img-blog.csdnimg.cn/20200317151122184.png" alt="在这里插入图片描述"><br>解压第一个文件，即Windows的exe<br><img src="https://img-blog.csdnimg.cn/2020031715113849.png" alt="在这里插入图片描述"></p><h3 id="配置shadowsock"><a href="#配置shadowsock" class="headerlink" title="配置shadowsock"></a>配置shadowsock</h3><p>配置对应信息，参考上面运行的命令</p><pre class=" language-powershell"><code class="language-powershell">sudo ssserver <span class="token operator">-</span>p 7878 <span class="token operator">-</span>k password <span class="token operator">-</span>m rc4<span class="token operator">-</span>md5 <span class="token operator">-</span>d <span class="token function">start</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200317151533443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>确认后任务栏右下角“纸飞机”，就是我们的shadowsock<br><img src="https://img-blog.csdnimg.cn/20200317151222972.png" alt="在这里插入图片描述"><br>右击，服务器已经选中刚才添加的my<br><img src="https://img-blog.csdnimg.cn/20200317151703589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们启动代理<br><img src="https://img-blog.csdnimg.cn/20200317151802928.png" alt="在这里插入图片描述"><br>有2个模式，全局和PAC。<br><img src="https://img-blog.csdnimg.cn/20200317151828403.png" alt="在这里插入图片描述"><br>全局就是全走代理。PAC就是有对部分网站走代理</p><h3 id="修改本地PAC"><a href="#修改本地PAC" class="headerlink" title="修改本地PAC"></a>修改本地PAC</h3><p>PAC有本地和在线<br>我们编辑下本地的看看<br><img src="https://img-blog.csdnimg.cn/20200317152035219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200317152102523.png" alt="在这里插入图片描述"><br>打开 pac.txt 进行修改<br><img src="https://img-blog.csdnimg.cn/20200317152139277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>你可以在最后面添加一条 <strong>“github.com”: 1,</strong><br><img src="https://img-blog.csdnimg.cn/20200317152300127.png" alt="在这里插入图片描述"><br>这样访问github.com时，就会走代理了。</p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p><img src="https://img-blog.csdnimg.cn/2020031715244176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>连上了代理可以看到网络波动<br><img src="https://img-blog.csdnimg.cn/202003171525497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="QQ走代理"><a href="#QQ走代理" class="headerlink" title="QQ走代理"></a>QQ走代理</h2><p>shadowsock代理已经启动后，我们运行QQ<br>右上角设置<br><img src="https://img-blog.csdnimg.cn/20200317152704130.png" alt="在这里插入图片描述"><br>设置 HTTP代理，填入如下信息<br><img src="https://img-blog.csdnimg.cn/20200317152727845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试一下<br><img src="https://img-blog.csdnimg.cn/20200317152750211.png" alt="在这里插入图片描述"><br>之后便可走代理登录QQ了<br><img src="https://img-blog.csdnimg.cn/20200317152813708.png" alt="在这里插入图片描述"></p><h2 id="安卓连接代理服务器"><a href="#安卓连接代理服务器" class="headerlink" title="安卓连接代理服务器"></a>安卓连接代理服务器</h2><p>压缩包里的apk，安装到手机中<br><img src="https://img-blog.csdnimg.cn/20200317152837610.png" alt="在这里插入图片描述"><br>运行。新建<br><img src="https://img-blog.csdnimg.cn/202003171529406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>手动设置<br><img src="https://img-blog.csdnimg.cn/20200317153030364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置对应信息，参考上面运行的命令</p><pre class=" language-powershell"><code class="language-powershell">sudo ssserver <span class="token operator">-</span>p 7878 <span class="token operator">-</span>k password <span class="token operator">-</span>m rc4<span class="token operator">-</span>md5 <span class="token operator">-</span>d <span class="token function">start</span></code></pre><p>其他默认<br><img src="https://img-blog.csdnimg.cn/2020031715320789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打钩后返回主页，点击中下部小飞机，进行连接<br><img src="https://img-blog.csdnimg.cn/20200317153335112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 代理服务器 </tag>
            
            <tag> shadowsock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【超详细】购买服务器，搭建Java，Tomcat和MySQL</title>
      <link href="/blog/2020/02/17/chao-xiang-xi-gou-mai-fu-wu-qi-da-jian-java-tomcat-he-mysql/"/>
      <url>/blog/2020/02/17/chao-xiang-xi-gou-mai-fu-wu-qi-da-jian-java-tomcat-he-mysql/</url>
      
        <content type="html"><![CDATA[<p><strong>温馨提示：本文不含任何广告，使用哪款服务或软件都属个人爱好！！！</strong></p><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><h3 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h3><p>市面上有很多服务器，可挑选自己喜欢的进行购买搭建。<br>阿里云 腾讯云 百度云 天下数据云 西部数码 景安云 青云 小鸟云 盛大云 华为云等<br>参考文章：<a href="https://www.idcbest.com/cloundnews/11002462.html" target="_blank" rel="noopener">国内十大云服务器商排名 各有什么优势呢？</a><br>我个人买的tx云，所以，以此为例。</p><p>腾讯云官网：<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">https://cloud.tencent.com/</a><br>这里买的<strong>腾讯云学生服务器</strong>  <a href="https://cloud.tencent.com/act/campus?from=11821" target="_blank" rel="noopener">https://cloud.tencent.com/act/campus?from=11821</a><br><img src="https://img-blog.csdnimg.cn/20200228151345280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我买的 <strong>ubuntu18.04。</strong><br>买完之后进入右上角<strong>控制台</strong>。<br>选择左侧导航栏中的“<strong>实例</strong>”，找到刚才买的<strong>地区</strong>的服务器，便可以在实例中看到。<br><img src="https://img-blog.csdnimg.cn/20200228151505334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>关机 -&gt;重置密码 -&gt; 开机<br><img src="https://img-blog.csdnimg.cn/20200228151641693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>大概这个样子，<strong>密码要符合规则</strong><br><img src="https://img-blog.csdnimg.cn/20200228151757988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>修改后重启，我们可以先用右侧的“登录”，登上我们的服务器<br><img src="https://img-blog.csdnimg.cn/20200228151918130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228151944382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入用户名和密码登录<br><img src="https://img-blog.csdnimg.cn/2020022815203345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录成功后的样子<br><img src="https://img-blog.csdnimg.cn/20200228152117907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>ps：如果提示“    实例鉴权失败，请确认实例已启用密码鉴权并且账号密码正确”。<br>你重新设个难点的密码试试。</p><h3 id="一键开放端口"><a href="#一键开放端口" class="headerlink" title="一键开放端口"></a>一键开放端口</h3><p><img src="https://img-blog.csdnimg.cn/20200228152306228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228152353151.png" alt="在这里插入图片描述"><br>一键放通了。<br><img src="https://img-blog.csdnimg.cn/20200228152412333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果还要加别的端口。控制台左侧导航栏“安全性”，<strong>修改规则</strong><br><img src="https://img-blog.csdnimg.cn/20200228152530553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>比如添加一个 3306的mysql的端口<br><img src="https://img-blog.csdnimg.cn/20200228152633909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228152728293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>选择自己喜欢的软件进行安装<br>远程连接：<a href="https://www.xshellcn.com/" target="_blank" rel="noopener">Xshell</a>，<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" target="_blank" rel="noopener">putty</a>，<a href="http://www.hostbuf.com/" target="_blank" rel="noopener">finalshell</a>等<br>文件传输：<a href="https://www.flashfxp.com/" target="_blank" rel="noopener">FlashFXP</a>，<a href="http://www.winscp.net/" target="_blank" rel="noopener">WinSCP</a>等</p><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><h4 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h4><p>下面是Xshell的界面，看着很舒服，不过收费，也可以传输文件<br><img src="https://img-blog.csdnimg.cn/20200228154014240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="putty"><a href="#putty" class="headerlink" title="putty"></a>putty</h4><p>很小巧，免费，不是很美观<br><img src="https://img-blog.csdnimg.cn/20200228154114655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="finalshell"><a href="#finalshell" class="headerlink" title="finalshell"></a>finalshell</h4><p>下载地址：<a href="http://www.hostbuf.com/downloads/finalshell_install.exe" target="_blank" rel="noopener">http://www.hostbuf.com/downloads/finalshell_install.exe</a><br>国产！免费。界面也不错，可以传输文件<br><img src="https://img-blog.csdnimg.cn/20200228154224716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228174132470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="FlashFXP"><a href="#FlashFXP" class="headerlink" title="FlashFXP"></a>FlashFXP</h4><p>界面不错，收费<br><img src="https://img-blog.csdnimg.cn/20200228154319451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h4><p>免费，界面不错<br><img src="https://img-blog.csdnimg.cn/20200228154452104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="下载安装-jdk"><a href="#下载安装-jdk" class="headerlink" title="下载安装 jdk"></a>下载安装 jdk</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官方网站：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a><br><img src="https://img-blog.csdnimg.cn/20200228155736254.png" alt="在这里插入图片描述"><br>我这里使用 jdk8，别人分享的包<br>链接：<a href="https://pan.baidu.com/s/1doXS6WFVUZUjoH4citinSg" target="_blank" rel="noopener">https://pan.baidu.com/s/1doXS6WFVUZUjoH4citinSg</a><br>提取码：ppx1</p><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>我们使用上面的软件将压缩包发到我们的服务器上，这里我使用 <strong>WinSCP</strong><br>输入我们服务器的 <strong>公网ip</strong>，默认22端口，用户名和密码进行登录<br><img src="https://img-blog.csdnimg.cn/20200228154935649.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228154837285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后把我们的jdk上传上去<br><img src="https://img-blog.csdnimg.cn/20200228154710918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考文章：<a href="https://blog.csdn.net/qq_42289906/article/details/80699777" target="_blank" rel="noopener">安装配置JDK以及Tomcat服务器</a></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>我们在用远程连接软件连上去，我这用 <strong>finalshell</strong> 来演示<br><img src="https://img-blog.csdnimg.cn/2020022815521710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择 <strong>SSH连接</strong><br><img src="https://img-blog.csdnimg.cn/20200228155248598.png" alt="在这里插入图片描述"><br>填入相关信息，确定登录<br><img src="https://img-blog.csdnimg.cn/20200228155344185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登录成功后，就可以看到这个界面<br><img src="https://img-blog.csdnimg.cn/20200228155510434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="解压配置"><a href="#解压配置" class="headerlink" title="解压配置"></a>解压配置</h3><h4 id="解压移动"><a href="#解压移动" class="headerlink" title="解压移动"></a>解压移动</h4><p>我的压缩包名为 <strong>jdk-8u212-linux-x64.tar.gz</strong><br>我们用 WinSCP 上传到的目录为 <strong>/home/ubuntu</strong><br>在finalshell的终端中输入命令 <code>pwd</code> 可以查看当前完整目录<br>输入 <code>ls</code> ，查看当前目录下所有文件<br><img src="https://img-blog.csdnimg.cn/20200228155959265.png" alt="在这里插入图片描述"><br>可以看到我们的2个文件都在这 tomcat 和 jdk 。<br>我们使用命令 <code>tar -zxvf jdk-8u212-linux-x64.tar.gz</code> ，进行解压。（ps:tab键可以自动补全）<br><img src="https://img-blog.csdnimg.cn/20200228160136914.png" alt="在这里插入图片描述"><br>解压完成后我们的 文件名为 <strong>jdk1.8.0_212</strong>。<br>我们可以移动jdk到 <strong>/usr/local</strong>，使用命令 <code>sudo mv jdk1.8.0_212/ /usr/local/</code>。（ps：sudo是获取管理员权限）<br>移动后我们使用命令 <code>cd /usr/local</code>，切换到 <strong>/usr/local</strong> 目录。<br>ls 查看一下，可以看到我们的 jdk了<br><img src="https://img-blog.csdnimg.cn/20200228160719715.png" alt="在这里插入图片描述"></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>输入命令 <code>sudo vi /etc/profile</code>（使用vim进行编辑）具体vim操作可以自行百度，这里不细讲，可参考文章：<a href="https://blog.csdn.net/qq_43432935/article/details/92013718" target="_blank" rel="noopener">Vim编辑器的基本使用</a><br>按 <strong>i</strong>，可以进行编辑。<br>我们在 开头处写入，第一行 JAVA_HOME后面写的刚才jdk的完整路径，可以用 <code>pwd</code> 查看然后复制到这里。<br>剩下3行不用动</p><pre class=" language-powershell"><code class="language-powershell">export  JAVA_HOME=<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_212export  CLASSPATH=<span class="token punctuation">.</span>:<span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>lib:<span class="token variable">$JRE_HOME</span><span class="token operator">/</span>lib:<span class="token variable">$CLASSPATH</span>export  PATH=<span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>bin:<span class="token variable">$JRE_HOME</span><span class="token operator">/</span>bin:<span class="token variable">$PATH</span>export  JRE_HOME=<span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>jre</code></pre><p><img src="https://img-blog.csdnimg.cn/20200228161800151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>写完后 按 “<strong>Esc</strong>”键，然后在输入 <strong>:wq!</strong> ，然后<strong>回车</strong>，保存退出。<br>回到终端 输入命令 <code>source /etc/profile</code>，保存配置。<br>使用命令测试是否配置完成 <code>java -version</code>。<br><img src="https://img-blog.csdnimg.cn/20200228161741805.png" alt="在这里插入图片描述"></p><h2 id="下载安装-tomcat"><a href="#下载安装-tomcat" class="headerlink" title="下载安装 tomcat"></a>下载安装 tomcat</h2><p>官网：<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a><br>我这下载的 Tomcat 10.0.0-M1，这个 tar.gz 压缩包<br><img src="https://img-blog.csdnimg.cn/20200228162032817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>同理，使用 WinSCP 上传上去<br>回到 home目录的用户下 <strong><code>cd /home/ubuntu/</code></strong>。你的不一定叫 ubuntu，根据你的用户名决定<br>同理 <strong><code>ls</code></strong> 看一下，<code>tar -zxvf apache-tomcat-10.0.0-M1.tar.gz</code>解压，<br>给下权限 <code>sudo chmod 755 -R apache-tomcat-10.0.0-M1</code><br>然后 <code>sudo mv apache-tomcat-10.0.0-M1 /usr/local</code>，也给它移动过去。<br>到 <code>cd /usr/local</code>，进入 tomcat的bin目录下。 <code>cd apache-tomcat-10.0.0-M1/bin/</code>，<br><img src="https://img-blog.csdnimg.cn/20200228162514299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考文章：<a href="https://blog.csdn.net/weixx3/article/details/80808484" target="_blank" rel="noopener">Ubuntu18.04 安装Tomcat 8.5</a><br>使用vim编辑下这个shell脚本 <code>sudo vi startup.sh</code><br>找个空给他加上。同理，按 <strong>i</strong> 进行编辑，加完后 <strong>:wq!</strong> 保存退出。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#jdk</span>export   JAVA_HOME=<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_212export   CLASSPATH=<span class="token punctuation">.</span>:<span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>lib:<span class="token variable">$JRE_HOME</span><span class="token operator">/</span>lib:<span class="token variable">$CLASSPATH</span>export  PATH=<span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>bin:<span class="token variable">$JRE_HOME</span><span class="token operator">/</span>bin:<span class="token variable">$PATH</span>export   JRE_HOME=<span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>jre<span class="token comment" spellcheck="true">#tomcat</span>export TOMCAT_HOME=<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token operator">-</span>10<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token operator">-</span>M11</code></pre><p><img src="https://img-blog.csdnimg.cn/20200228163045442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后使用命令 <code>sudo ./startup.sh</code> ，启动 tomcat<br><img src="https://img-blog.csdnimg.cn/202002281632504.png" alt="在这里插入图片描述"><br>现在我们打开浏览器，访问下地址， <code>公网IP:8080</code><br>我们可爱的 tomcat就起来了！！！<br><img src="https://img-blog.csdnimg.cn/20200228163345220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>将 你的项目 丢到 tomcat 的 webapps目录下，可以使用 WinSCP或 finalshell 将项目传进去。<br>例如：我将我的老婆程序 wives上传了进去。<br>cd进去看看参考命令 <code>cd /usr/local/apache-tomcat-10.0.0-M1/webapps/</code>，<code>ls</code>看一下<br><img src="https://img-blog.csdnimg.cn/20200228204209485.png" alt="在这里插入图片描述"><br>然后打开浏览器，<code>公网IP:8080/wives/index.html</code>，把网址发给你的小伙伴，一起玩耍吧~<br><img src="https://img-blog.csdnimg.cn/20200228204312161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装配置-MySQL"><a href="#安装配置-MySQL" class="headerlink" title="安装配置 MySQL"></a>安装配置 MySQL</h2><h3 id="下载安装配置"><a href="#下载安装配置" class="headerlink" title="下载安装配置"></a>下载安装配置</h3><p>参考文章：<a href="https://blog.csdn.net/qq_42289906/article/details/80704377" target="_blank" rel="noopener">3.安装MySQL数据库的相关内容</a><br>更新地址  <code>sudo apt-get update</code><br>下载mysql-server <code>sudo apt-get install mysql-server</code><br>下载mysql-client <code>sudo apt-get install mysql-client</code><br>安装好后我们连一下 使用命令 <code>sudo mysql -uroot -p</code>，然后回车，它让你输入密码，默认密码为空，所以直接回车，欧拉欧拉欧拉欧拉！！！如下<br><img src="https://img-blog.csdnimg.cn/20200228163754364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后拓展操作，文章参考：<a href="https://www.cnblogs.com/mybxy/p/10577412.html" target="_blank" rel="noopener">ubuntu安装mysql添加密码</a></p><p>mysql&gt;下依次输入以下命令。帮你把 root 的密码改了</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span>；<span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">"自定义密码"</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> plugin<span class="token operator">=</span><span class="token string">"mysql_native_password"</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>quit<span class="token punctuation">;</span></code></pre><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p><strong>服务器需要开发端口3306！！！！</strong><br>如果想在Windows下远程连接MySQL，我们装个数据库管理工具<br>我这里以 <a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">Navicat</a> 为例<br>我装的不是官网的版本，装好 Navicat for MySQL 后<br>我们连一下<br><img src="https://img-blog.csdnimg.cn/20200228164419694.png" alt="在这里插入图片描述"><br>输入你的 相关信息<br><img src="https://img-blog.csdnimg.cn/2020022816445657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>确认后双击左侧你新建的 <strong>连接名</strong><br><img src="https://img-blog.csdnimg.cn/20200228164655803.png" alt="在这里插入图片描述"><br>报错如下<br><img src="https://img-blog.csdnimg.cn/20200228164637828.png" alt="在这里插入图片描述"><br>当然你可以百度下原因。<br>我这也参考的写下。</p><h3 id="新建数据库用户"><a href="#新建数据库用户" class="headerlink" title="新建数据库用户"></a>新建数据库用户</h3><p>我们不用 root 用户，我们新建个新用户。<br>参考文章：<a href="https://www.cnblogs.com/zhongyehai/p/10695659.html" target="_blank" rel="noopener">MySQL创建用户与授权</a><br><a href="https://blog.csdn.net/Ikaros_521/article/details/102664117" target="_blank" rel="noopener">mysql中文乱码问题解决 / C程序插入仍是乱码解决 / 卸载重装教学</a><br><a href="https://blog.csdn.net/Ikaros_521/article/details/100826220" target="_blank" rel="noopener">SQL数据查询语言——实际运用参考</a><br><a href="https://blog.csdn.net/Ikaros_521/article/details/100808626" target="_blank" rel="noopener">数据库的相关知识——学习笔记</a></p><h4 id="1、创建用户"><a href="#1、创建用户" class="headerlink" title="1、创建用户"></a>1、创建用户</h4><p>mysql&gt;下输入以下命令<br>命令 <code>CREATE USER 'username'@'host' IDENTIFIED BY 'password';</code><br> username：就是你新用户的用户名<br>  host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%<br> password：就是你新用户的密码</p><p> 所以我们使用 % 即  <code>CREATE USER 'username'@'%' IDENTIFIED BY 'password';</code><br> <img src="https://img-blog.csdnimg.cn/20200228165446648.png" alt="在这里插入图片描述"></p><h4 id="2、授权"><a href="#2、授权" class="headerlink" title="2、授权"></a>2、授权</h4><p> 命令：<code>GRANT privileges ON databasename.tablename TO 'username'@'host';</code><br> privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL<br>databasename：数据库名<br>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用 * 表示，如  *.*<br>注意:<br>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">privileges</span> <span class="token keyword">ON</span> databasename<span class="token punctuation">.</span>tablename <span class="token keyword">TO</span> <span class="token string">'username'</span><span class="token variable">@'host'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span></code></pre><p>所以我们使用命令 <code>GRANT ALL ON *.* TO 'test'@'%' WITH GRANT OPTION;</code><br><img src="https://img-blog.csdnimg.cn/20200228170035973.png" alt="在这里插入图片描述"></p><h3 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h3><p>mysql&gt;<code>flush privileges;</code><br><img src="https://img-blog.csdnimg.cn/2020022817021141.png" alt="在这里插入图片描述"></p><h3 id="再次远程连接"><a href="#再次远程连接" class="headerlink" title="再次远程连接"></a>再次远程连接</h3><p>输入刚才新建的mysql用户名和密码<br><img src="https://img-blog.csdnimg.cn/20200228170250687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>双击 test，连接成功并展开<br><img src="https://img-blog.csdnimg.cn/20200228170320429.png" alt="在这里插入图片描述"></p><h3 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h3><p>右击 <strong>test</strong>，新建数据库<br><img src="https://img-blog.csdnimg.cn/20200228170435105.png" alt="在这里插入图片描述"><br>输入相关信息<br><img src="https://img-blog.csdnimg.cn/20200228170515675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200228170535825.png" alt="在这里插入图片描述">.<br>展开 <strong>user</strong>，右击 <strong>表</strong>，<strong>新建表</strong><br><img src="https://img-blog.csdnimg.cn/20200228170604961.png" alt="在这里插入图片描述"><br>根据自己的需求填下<br><img src="https://img-blog.csdnimg.cn/20200228170824272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>保存一下，给个表名<br><img src="https://img-blog.csdnimg.cn/20200228170932588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>左侧再展开<br><img src="https://img-blog.csdnimg.cn/20200228171013109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>随便加几个数据<br><img src="https://img-blog.csdnimg.cn/20200228171124132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>差不多就到这了，溜了溜了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> MySQL </tag>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ajax+cgi，实现前后端数据交互</title>
      <link href="/blog/2019/12/04/shi-yong-ajax-cgi-shi-xian-qian-hou-duan-shu-ju-jiao-hu/"/>
      <url>/blog/2019/12/04/shi-yong-ajax-cgi-shi-xian-qian-hou-duan-shu-ju-jiao-hu/</url>
      
        <content type="html"><![CDATA[<h2 id="相关说明"><a href="#相关说明" class="headerlink" title="相关说明"></a>相关说明</h2><p>操作系统：CentOS7<br>Web服务器：<a href="http://www.boa.org/" target="_blank" rel="noopener">BOA</a><br>语言：HTML+JS+C<br>演示了网页如何把数据通过AJAX发给后台CGI和后台CGI如何把数据返回到网页的指定控件显示<br>源码参考：<a href="http://www.pudn.com/Download/item/id/2260088.html" target="_blank" rel="noopener">AJAX_CGI</a><br>BOA的搭建参考：<a href="https://blog.csdn.net/Ikaros_521/article/details/102610768" target="_blank" rel="noopener">Linux下嵌入式Web服务器BOA和CGI编程开发</a><br>小案例实战参考：<a href="https://blog.csdn.net/Ikaros_521/article/details/102801453" target="_blank" rel="noopener">嵌入式web服务器BOA+CGI+HTML+MySQL项目实战——Linux</a><br>源码下载：<a href="https://github.com/Ikaros-521/ajax_cgi" target="_blank" rel="noopener">GitHub</a>，<a href="https://gitee.com/ikaros-521/ajax_cgi" target="_blank" rel="noopener">码云</a></p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><h3 id="ajaxtest1-html"><a href="#ajaxtest1-html" class="headerlink" title="ajaxtest1.html"></a><strong>ajaxtest1.html</strong></h3><p><img src="https://img-blog.csdnimg.cn/20191204114725127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>实现效果：在对应输入框内输入内容调用对应函数，非空，就显示cgi程序返回的内容</strong></p><pre class=" language-c"><code class="language-c">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>lenstr<span class="token punctuation">,</span><span class="token string">"txtIDA"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ianLiu@yeah.net\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>lenstr<span class="token punctuation">,</span><span class="token string">"txtIDB"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Liuyixu\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>然后给对应控件进行赋值</strong></p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"txtIDB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20191204114949740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191204114959855.png" alt="在这里插入图片描述"></p><hr><h3 id="ajaxtest3-html"><a href="#ajaxtest3-html" class="headerlink" title="ajaxtest3.html"></a><strong>ajaxtest3.html</strong></h3><p><img src="https://img-blog.csdnimg.cn/20191204114423625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>点击按钮</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"get_info"</span> onclick<span class="token operator">=</span><span class="token string">"get_info()"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p><strong>实现获取cgi发送回来的json字符串</strong></p><pre class=" language-c"><code class="language-c">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>lenstr<span class="token punctuation">,</span><span class="token string">"get_info"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{\"A\":\"%s\",\"B\":\"%s\"}"</span><span class="token punctuation">,</span>ip<span class="token punctuation">,</span>prot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>转json对象，给对应控件赋值的效果</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//将接收到的字符串存入jsonstr</span><span class="token keyword">var</span> jsonstr <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"json:"</span><span class="token operator">+</span>jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将jsonstr转换为json对象 json</span><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">if</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span>name1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> json<span class="token punctuation">[</span>name1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直接给id为name1的控件赋值</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span>name2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> json<span class="token punctuation">[</span>name2<span class="token punctuation">]</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20191204114533261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="部分源码"><a href="#部分源码" class="headerlink" title="部分源码"></a>部分源码</h2><p><em>cgi_main.h里面是空的</em></p><p>终端输入以下命令，编译cgi程序</p><pre class=" language-powershell"><code class="language-powershell">gcc ajax3<span class="token punctuation">.</span>c cgic<span class="token punctuation">.</span>c <span class="token operator">-</span>o ajax3<span class="token punctuation">.</span>cgi</code></pre><h3 id="ajaxtest1-html-1"><a href="#ajaxtest1-html-1" class="headerlink" title="ajaxtest1.html"></a>ajaxtest1.html</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">FuncA</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"txtIDA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//code for IE7+,Firefox,Chrome,Opera,Safari</span>          xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//code for IE6,IE5</span>          xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"txtIDA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"cgi-bin/ajax1.cgi?txtIDA="</span><span class="token operator">+</span>str<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">FuncB</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"txtIDB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//code for IE7+,Firefox,Chrome,Opera,Safari</span>          xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//code for IE6,IE5</span>          xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"txtIDB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"cgi-bin/ajax1.cgi?txtIDB="</span><span class="token operator">+</span>str<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>演示了网页如何把数据通过AJAX发给后台CGI<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>和后台CGI如何把数据返回到网页的指定控件显示<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span> 姓氏<span class="token punctuation">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"txt1"</span> onkeyup<span class="token operator">=</span><span class="token string">"FuncA(this.value)"</span> <span class="token operator">/</span><span class="token operator">></span>年龄<span class="token punctuation">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"txt2"</span> onkeyup<span class="token operator">=</span><span class="token string">"FuncB(this.value)"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>建议<span class="token punctuation">:</span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"txtIDA"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>说明<span class="token punctuation">:</span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"txtIDB"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="ajax1-c"><a href="#ajax1-c" class="headerlink" title="ajax1.c"></a>ajax1.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"cgi_main.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>lenstr<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd_webdata<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lenstr<span class="token operator">=</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"QUERY_STRING"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content type: text/html\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>lenstr<span class="token punctuation">,</span><span class="token string">"txtIDA"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ianLiu@yeah.net\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>lenstr<span class="token punctuation">,</span><span class="token string">"txtIDB"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Liuyixu\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最后记得关闭文件</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd_webdata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><hr><h3 id="ajaxtest3-html-1"><a href="#ajaxtest3-html-1" class="headerlink" title="ajaxtest3.html"></a>ajaxtest3.html</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">get_json</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>formId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"进入get_json函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name1 <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name2 <span class="token operator">=</span> <span class="token string">"B"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span>name1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> json<span class="token punctuation">[</span>name1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 直接给id为name1的控件赋值</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span>name2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> json<span class="token punctuation">[</span>name2<span class="token punctuation">]</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"get_json运行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">get_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span>    <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//code for IE7+,Firefox,Chrome,Opera,Safari</span>          xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//code for IE6,IE5</span>          xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将接收到的字符串存入jsonstr</span>            <span class="token keyword">var</span> jsonstr <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"json:"</span><span class="token operator">+</span>jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将jsonstr转换为json对象 json</span>            <span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> formid <span class="token operator">=</span> <span class="token string">"form1"</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"调用get_json,传参json对象和form的id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">get_json</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>formid<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"cgi-bin/ajax3.cgi?get_info"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>后台CGI如何把数据返回到网页的指定控件显示<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"get_info"</span> onclick<span class="token operator">=</span><span class="token string">"get_info()"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"form1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>建议<span class="token punctuation">:</span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"A"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>     <span class="token operator">&lt;</span>p<span class="token operator">></span>说明<span class="token punctuation">:</span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"B"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="ajax3-c"><a href="#ajax3-c" class="headerlink" title="ajax3.c"></a>ajax3.c</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"cgic.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"cgi_main.h"</span></span><span class="token keyword">int</span> <span class="token function">cgiMain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>lenstr<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd_webdata<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lenstr<span class="token operator">=</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"QUERY_STRING"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content type: text/html\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"192.168.10.1"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> prot<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"8080"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>lenstr<span class="token punctuation">,</span><span class="token string">"get_info"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{\"A\":\"%s\",\"B\":\"%s\"}"</span><span class="token punctuation">,</span>ip<span class="token punctuation">,</span>prot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最后记得关闭文件</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd_webdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> C </tag>
            
            <tag> ajax </tag>
            
            <tag> cgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ONVIF 设备发现（网络摄像头）——实例笔记</title>
      <link href="/blog/2019/12/03/onvif-she-bei-fa-xian-wang-luo-she-xiang-tou-shi-li-bi-ji/"/>
      <url>/blog/2019/12/03/onvif-she-bei-fa-xian-wang-luo-she-xiang-tou-shi-li-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>ONVIF官网：<a href="http://www.onvif.org/" target="_blank" rel="noopener">http://www.onvif.org/</a><br>gSOAP安装配置：<a href="https://blog.csdn.net/Ikaros_521/article/details/103232677" target="_blank" rel="noopener">gSOAP安装配置+使用案例参考+参考链接</a><br>操作系统：CentOS7</p><h2 id="资料参考："><a href="#资料参考：" class="headerlink" title="资料参考："></a>资料参考：</h2><p>许振坪的ONVIF专栏：<a href="https://blog.csdn.net/benkaoya/category_6924052.html" target="_blank" rel="noopener">传送门</a><br><a href="https://blog.csdn.net/love_xjhu/article/details/11821037" target="_blank" rel="noopener">onvif开发之设备发现功能的实现</a><br><a href="https://blog.csdn.net/qq_26600237/article/details/81145602" target="_blank" rel="noopener">Linux下onvif服务端之发现设备</a><br>还有一个博文找不到网址了，如果网友发现可以私信补充。</p><h2 id="代码实战"><a href="#代码实战" class="headerlink" title="代码实战"></a>代码实战</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="1、WS-Discovery的Ad-hoc模式，使用多播（不使用gSOAP实现设备发现）"><a href="#1、WS-Discovery的Ad-hoc模式，使用多播（不使用gSOAP实现设备发现）" class="headerlink" title="1、WS-Discovery的Ad hoc模式，使用多播（不使用gSOAP实现设备发现）"></a>1、WS-Discovery的Ad hoc模式，使用多播（不使用gSOAP实现设备发现）</h4><p>参考文章：<a href="https://blog.csdn.net/benkaoya/article/details/72476120" target="_blank" rel="noopener">ONVIF协议网络摄像机（IPC）客户端程序开发（7）：设备搜索</a><br>源码如下 search_c.c：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> WIN32</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winsock.h></span></span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">/* 从技术层面来说，通过单播、多播、广播三种方式都能探测到IPC，但多播最具实用性*/</span><span class="token macro property">#<span class="token directive keyword">define</span> COMM_TYPE_UNICAST         1                                             </span><span class="token comment" spellcheck="true">// 单播</span><span class="token macro property">#<span class="token directive keyword">define</span> COMM_TYPE_MULTICAST       2                                             </span><span class="token comment" spellcheck="true">// 多播</span><span class="token macro property">#<span class="token directive keyword">define</span> COMM_TYPE_BROADCAST       3                                             </span><span class="token comment" spellcheck="true">// 广播</span><span class="token macro property">#<span class="token directive keyword">define</span> COMM_TYPE                 COMM_TYPE_MULTICAST</span><span class="token comment" spellcheck="true">/* 发送探测消息（Probe）的目标地址、端口号 */</span><span class="token macro property">#<span class="token directive keyword">if</span> COMM_TYPE == COMM_TYPE_UNICAST</span>    <span class="token macro property">#<span class="token directive keyword">define</span> CAST_ADDR "100.100.100.15"                                          </span><span class="token comment" spellcheck="true">// 单播地址，预先知道的IPC地址</span><span class="token macro property">#<span class="token directive keyword">elif</span> COMM_TYPE == COMM_TYPE_MULTICAST</span>    <span class="token macro property">#<span class="token directive keyword">define</span> CAST_ADDR "239.255.255.250"                                         </span><span class="token comment" spellcheck="true">// 多播地址，固定的239.255.255.250</span><span class="token macro property">#<span class="token directive keyword">elif</span> COMM_TYPE == COMM_TYPE_BROADCAST</span>    <span class="token macro property">#<span class="token directive keyword">define</span> CAST_ADDR "100.100.100.255"                                         </span><span class="token comment" spellcheck="true">// 广播地址</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">define</span> CAST_PORT 3702                                                          </span><span class="token comment" spellcheck="true">// 端口号</span><span class="token comment" spellcheck="true">/* 以下几个宏是为了socket编程能够跨平台，这几个宏是从gsoap中拷贝来的 */</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> SOAP_SOCKET</span><span class="token macro property"># <span class="token directive keyword">ifdef</span> WIN32</span><span class="token macro property">#  <span class="token directive keyword">define</span> SOAP_SOCKET SOCKET</span><span class="token macro property">#  <span class="token directive keyword">define</span> soap_closesocket(n) closesocket(n)</span><span class="token macro property"># <span class="token directive keyword">else</span></span><span class="token macro property">#  <span class="token directive keyword">define</span> SOAP_SOCKET int</span><span class="token macro property">#  <span class="token directive keyword">define</span> soap_closesocket(n) close(n)</span><span class="token macro property"># <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> defined(_AIX) || defined(AIX)</span><span class="token macro property"># <span class="token directive keyword">if</span> defined(_AIX43)</span><span class="token macro property">#  <span class="token directive keyword">define</span> SOAP_SOCKLEN_T socklen_t</span><span class="token macro property"># <span class="token directive keyword">else</span></span><span class="token macro property">#  <span class="token directive keyword">define</span> SOAP_SOCKLEN_T int</span><span class="token macro property"># <span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(SOCKLEN_T)</span><span class="token macro property"># <span class="token directive keyword">define</span> SOAP_SOCKLEN_T SOCKLEN_T</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(__socklen_t_defined) || defined(_SOCKLEN_T) || defined(CYGWIN) || defined(FREEBSD) || defined(__FreeBSD__) || defined(OPENBSD) || defined(__QNX__) || defined(QNX) || defined(OS390) || defined(__ANDROID__) || defined(_XOPEN_SOURCE)</span><span class="token macro property"># <span class="token directive keyword">define</span> SOAP_SOCKLEN_T socklen_t</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(IRIX) || defined(WIN32) || defined(__APPLE__) || defined(SUN_OS) || defined(OPENSERVER) || defined(TRU64) || defined(VXWORKS) || defined(HP_UX)</span><span class="token macro property"># <span class="token directive keyword">define</span> SOAP_SOCKLEN_T int</span><span class="token macro property">#<span class="token directive keyword">elif</span> !defined(SOAP_SOCKLEN_T)</span><span class="token macro property"># <span class="token directive keyword">define</span> SOAP_SOCKLEN_T size_t</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> WIN32</span><span class="token macro property">#<span class="token directive keyword">define</span> SLEEP(n)    Sleep(1000 * (n))</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> SLEEP(n)    sleep((n))</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">/* 探测消息(Probe)，这些内容是ONVIF Device Test Tool 15.06工具搜索IPC时的Probe消息，通过Wireshark抓包工具抓包到的 */</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>probe <span class="token operator">=</span> <span class="token string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>&lt;Envelope xmlns:dn=\"http://www.onvif.org/ver10/network/wsdl\" xmlns=\"http://www.w3.org/2003/05/soap-envelope\">&lt;Header>&lt;wsa:MessageID xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\">uuid:fc0bad56-5f5a-47f3-8ae2-c94a4e907d70&lt;/wsa:MessageID>&lt;wsa:To xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\">urn:schemas-xmlsoap-org:ws:2005:04:discovery&lt;/wsa:To>&lt;wsa:Action xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\">http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe&lt;/wsa:Action>&lt;/Header>&lt;Body>&lt;Probe xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"http://schemas.xmlsoap.org/ws/2005/04/discovery\">&lt;Types>dn:NetworkVideoTransmitter&lt;/Types>&lt;Scopes />&lt;/Probe>&lt;/Body>&lt;/Envelope>"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">int</span> optval<span class="token punctuation">;</span>    SOAP_SOCKET s<span class="token punctuation">;</span>    SOAP_SOCKLEN_T len<span class="token punctuation">;</span>    <span class="token keyword">char</span> recv_buff<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in multi_addr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in client_addr<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> WIN32</span>    WSADATA wsaData<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsaData<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">// 初始化Windows Sockets DLL</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Could not open Windows connection.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span>wsaData<span class="token punctuation">.</span>wVersion<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>wsaData<span class="token punctuation">.</span>wVersion<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the version of WinSock DLL is not 2.2.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">// 建立数据报套接字</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> COMM_TYPE == COMM_TYPE_BROADCAST</span>    optval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">setsockopt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_BROADCAST<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>optval<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    multi_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">// 搜索IPC：使用UDP向指定地址发送探测消息(Probe)</span>    multi_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>CAST_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    multi_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>CAST_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> probe<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>probe<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>multi_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>multi_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">soap_closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"sendto error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Send Probe message to [%s:%d]\n\n"</span><span class="token punctuation">,</span> CAST_ADDR<span class="token punctuation">,</span> CAST_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SLEEP</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                                  <span class="token comment" spellcheck="true">// 接收IPC的应答消息(ProbeMatch)</span>        len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>recv_buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> recv_buff<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recv_buff<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"===Recv ProbeMatch from [%s:%d]===\n%s\n\n"</span><span class="token punctuation">,</span>  <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>client_addr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">,</span> recv_buff<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SLEEP</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">soap_closesocket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Linux编译： <code>gcc search_c.c</code> ， Windows下编译：  <code>gcc search_c.c -lws2_32</code><br>Windows下效果和Linux下效果一样。<br><img src="https://img-blog.csdnimg.cn/20191203135206652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我Linux是用的虚拟机，所以需要关闭防火墙，不然搜不到 <code>systemctl stop iptables.service</code> 或 <code>service iptables stop</code></p><p>我们也使用 ONVIF Device Test Tool<img src="https://img-blog.csdnimg.cn/20191203135730447.png" alt="在这里插入图片描述">，测一下<br><img src="https://img-blog.csdnimg.cn/20191203135849329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2、使用gSOAP生成ONVIF框架，编写客户端"><a href="#2、使用gSOAP生成ONVIF框架，编写客户端" class="headerlink" title="2、使用gSOAP生成ONVIF框架，编写客户端"></a>2、使用gSOAP生成ONVIF框架，编写客户端</h4><p>如何生成ONVIF框架参考：<a href="https://blog.csdn.net/benkaoya/article/details/72466827" target="_blank" rel="noopener">ONVIF协议网络摄像机（IPC）客户端程序开发（6）：使用gSOAP生成ONVIF框架代码</a>，原文没有生成soapServer.c，我在评论里面写了如何修改，可以参考。<br>部分文件下载于：<a href="https://github.com/As772309423/onvif-server-discover" target="_blank" rel="noopener">GitHub</a><br>参考文章：<a href="https://blog.csdn.net/love_xjhu/article/details/11821037" target="_blank" rel="noopener">onvif开发之设备发现功能的实现</a><br>我做的相关改动都写在评论区了，server编译通不过，但client是可行的。<br><img src="https://img-blog.csdnimg.cn/2019120314004826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>client.c</strong>源码如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;uuid/uuid.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapH.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapStub.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"wsdd.nsmap"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"wsaapi.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> MULTICAST_ADDRESS "soap.udp://239.255.255.250:3702"  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%s][%d][%s][%s] start \n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      wsdd__ProbeType req<span class="token punctuation">;</span>    <span class="token keyword">struct</span> __wsdd__ProbeMatches resp<span class="token punctuation">;</span>    wsdd__ScopesType sScope<span class="token punctuation">;</span>    <span class="token keyword">struct</span> SOAP_ENV__Header header<span class="token punctuation">;</span>      <span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">;</span>      soap <span class="token operator">=</span> <span class="token function">soap_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> soap <span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sopa new error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      soap<span class="token operator">-></span>recv_timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token function">soap_set_namespaces</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> namespaces<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">soap_default_SOAP_ENV__Header</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>      uuid_t uuid<span class="token punctuation">;</span>    <span class="token keyword">char</span> guid_string<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">uuid_generate</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">uuid_unparse</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> guid_string<span class="token punctuation">)</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span>wsa__MessageID <span class="token operator">=</span> guid_string<span class="token punctuation">;</span>     header<span class="token punctuation">.</span>wsa__To <span class="token operator">=</span> <span class="token string">"urn:schemas-xmlsoap-org:ws:2005:04:discovery"</span><span class="token punctuation">;</span>      header<span class="token punctuation">.</span>wsa__Action <span class="token operator">=</span> <span class="token string">"http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe"</span><span class="token punctuation">;</span>      soap<span class="token operator">-></span>header <span class="token operator">=</span> <span class="token operator">&amp;</span>header<span class="token punctuation">;</span>      <span class="token function">soap_default_wsdd__ScopesType</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sScope<span class="token punctuation">)</span><span class="token punctuation">;</span>      sScope<span class="token punctuation">.</span>__item <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token function">soap_default_wsdd__ProbeType</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>      req<span class="token punctuation">.</span>Scopes <span class="token operator">=</span> <span class="token operator">&amp;</span>sScope<span class="token punctuation">;</span>      req<span class="token punctuation">.</span>Types <span class="token operator">=</span> <span class="token string">"dn:NetworkVideoTransmitter"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"dn:NetworkVideoTransmitter";  </span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> <span class="token function">soap_send___wsdd__Probe</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> MULTICAST_ADDRESS<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">==</span> SOAP_OK<span class="token punctuation">)</span>         <span class="token punctuation">{</span>          result <span class="token operator">=</span> <span class="token function">soap_recv___wsdd__ProbeMatches</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> SOAP_OK<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>soap<span class="token operator">-></span>error<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"soap error 1: %d, %s, %s\n"</span><span class="token punctuation">,</span> soap<span class="token operator">-></span>error<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">soap_faultcode</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">soap_faultstring</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  result <span class="token operator">=</span> soap<span class="token operator">-></span>error<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span>              <span class="token punctuation">{</span>                  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"guog *********************************************\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__MessageID<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MessageID   : %s\r\n"</span><span class="token punctuation">,</span> soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__MessageID<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__RelatesTo <span class="token operator">&amp;&amp;</span> soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__RelatesTo<span class="token operator">-></span>__item<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"RelatesTo   : %s\r\n"</span><span class="token punctuation">,</span> soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__RelatesTo<span class="token operator">-></span>__item<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__To<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"To          : %s\r\n"</span><span class="token punctuation">,</span> soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__To<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__Action<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Action      : %s\r\n"</span><span class="token punctuation">,</span> soap<span class="token operator">-></span>header<span class="token operator">-></span>wsa__Action<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>__sizeProbeMatch<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"__sizeProbeMatch        : %d\r\n"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>__sizeProbeMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wsa__EndpointReference       : %p\r\n"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>ProbeMatch<span class="token operator">-></span>wsa__EndpointReference<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Target EP Address       : %s\r\n"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>ProbeMatch<span class="token operator">-></span>wsa__EndpointReference<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Target Type             : %s\r\n"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>ProbeMatch<span class="token operator">-></span>Types<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Target Service Address  : %s\r\n"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>ProbeMatch<span class="token operator">-></span>XAddrs<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Target Metadata Version : %d\r\n"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>ProbeMatch<span class="token operator">-></span>MetadataVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>ProbeMatch<span class="token operator">-></span>Scopes<span class="token punctuation">)</span>                      <span class="token punctuation">{</span>                          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Target Scopes Address   : %s\r\n"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>wsdd__ProbeMatches<span class="token operator">-></span>ProbeMatch<span class="token operator">-></span>Scopes<span class="token operator">-></span>__item<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>soap<span class="token operator">-></span>error<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] soap error 2: %d, %s, %s\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">,</span> soap<span class="token operator">-></span>error<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">soap_faultcode</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">soap_faultstring</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              result <span class="token operator">=</span> soap<span class="token operator">-></span>error<span class="token punctuation">;</span>          <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token function">soap_destroy</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">soap_end</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">soap_free</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] guog discover over !\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre><p>Linux下编译： <code>gcc -o client client.c stdsoap2.c soapC.c soapClient.c wsaapi.c duration.c -luuid</code><br>没有libuuid库，可自行安装，命令仅供参考 <code>sudo apt-get install uuid-dev</code><br>效果如图：<br><img src="https://img-blog.csdnimg.cn/20191203141449855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="1、不使用gSOAP，虚拟机伪装成ipc"><a href="#1、不使用gSOAP，虚拟机伪装成ipc" class="headerlink" title="1、不使用gSOAP，虚拟机伪装成ipc"></a>1、不使用gSOAP，虚拟机伪装成ipc</h4><p>文章参考：<a href="https://blog.csdn.net/qq_26600237/article/details/81145602" target="_blank" rel="noopener">Linux下onvif服务端之发现设备</a><br>代码如下 ipc_server_c.c：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment" spellcheck="true">//#include &lt;netdb.h></span><span class="token comment" spellcheck="true">//#include &lt;errno.h></span><span class="token comment" spellcheck="true">//#include &lt;uuid/uuid.h></span><span class="token macro property">#<span class="token directive keyword">define</span> BUFLEN 4095</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> uu_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cust_uuid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in groupcast_addr<span class="token punctuation">,</span>the_member<span class="token punctuation">;</span>    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> loop<span class="token punctuation">;</span>    <span class="token keyword">char</span> recmsg<span class="token punctuation">[</span>BUFLEN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">unsigned</span> <span class="token keyword">int</span> socklen<span class="token punctuation">,</span> n<span class="token punctuation">;</span>     <span class="token keyword">struct</span> ip_mreq mreq<span class="token punctuation">;</span> <span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token operator">=</span><span class="token string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:SOAP-ENC=\"http://www.w3.org/2003/05/soap-encoding\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" xmlns:wsdd=\"http://schemas.xmlsoap.org/ws/2005/04/discovery\" xmlns:chan=\"http://schemas.microsoft.com/ws/2005/02/duplex\" xmlns:wsa5=\"http://www.w3.org/2005/08/addressing\" xmlns:xmime=\"http://tempuri.org/xmime.xsd\" xmlns:xop=\"http://www.w3.org/2004/08/xop/include\" xmlns:tt=\"http://www.onvif.org/ver10/schema\" xmlns:wsrfbf=\"http://docs.oasis-open.org/wsrf/bf-2\" xmlns:wstop=\"http://docs.oasis-open.org/wsn/t-1\" xmlns:wsrfr=\"http://docs.oasis-open.org/wsrf/r-2\" xmlns:tdn=\"http://www.onvif.org/ver10/network/wsdl\" xmlns:tds=\"http://www.onvif.org/ver10/device/wsdl\" xmlns:tev=\"http://www.onvif.org/ver10/events/wsdl\" xmlns:wsnt=\"http://docs.oasis-open.org/wsn/b-2\" xmlns:tptz=\"http://www.onvif.org/ver20/ptz/wsdl\" xmlns:trt=\"http://www.onvif.org/ver10/media/wsdl\">\n\&lt;SOAP-ENV:Header>\n\&lt;wsa:MessageID>uuid:2419d68a-2dd2-21b2-a205-4A69A95DB56D&lt;/wsa:MessageID>\n\&lt;wsa:RelatesTo>uuid:251984b5-d773-4d2e-a21d-d248cdd2eebf&lt;/wsa:RelatesTo>\n\&lt;wsa:To SOAP-ENV:mustUnderstand=\"true\">http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous&lt;/wsa:To>\n\&lt;wsa:Action SOAP-ENV:mustUnderstand=\"true\">http://schemas.xmlsoap.org/ws/2005/04/discovery/ProbeMatches&lt;/wsa:Action>\n\&lt;/SOAP-ENV:Header>\n\&lt;SOAP-ENV:Body>\n\&lt;wsdd:ProbeMatches>\n\&lt;wsdd:ProbeMatch>\n\&lt;wsa:EndpointReference>\n\&lt;wsa:Address>urn:uuid:2419d68a-2dd2-21b2-a205-4A69A95DB56D&lt;/wsa:Address>\n\&lt;wsa:ReferenceProperties />\n\&lt;wsa:ReferenceParameters />\n\&lt;wsa:PortType>ttl&lt;/wsa:PortType>\n\&lt;/wsa:EndpointReference>\n\&lt;wsdd:Types>tds:Device&lt;/wsdd:Types>\n\&lt;wsdd:Scopes>onvif://www.onvif.org/type/NetworkVideoTransmitter\r\nonvif://www.onvif.org/name/IPC_2802222\r\nonvif://www.onvif.org/location/Country/China&lt;/wsdd:Scopes>\n\&lt;wsdd:XAddrs>http://192.168.42.103:5000/onvif/device_service&lt;/wsdd:XAddrs>\n\&lt;wsdd:MetadataVersion>1&lt;/wsdd:MetadataVersion>\n\&lt;/wsdd:ProbeMatch>\n\&lt;/wsdd:ProbeMatches>\n\&lt;/SOAP-ENV:Body>\n\&lt;/SOAP-ENV:Envelope>\n\n"</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">char</span> <span class="token operator">*</span>aa<span class="token operator">=</span> <span class="token string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:SOAP-ENC=\"http://www.w3.org/2003/05/soap-encoding\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" xmlns:wsdd=\"http://schemas.xmlsoap.org/ws/2005/04/discovery\" xmlns:chan=\"http://schemas.microsoft.com/ws/2005/02/duplex\" xmlns:wsa5=\"http://www.w3.org/2005/08/addressing\" xmlns:xmime=\"http://tempuri.org/xmime.xsd\" xmlns:xop=\"http://www.w3.org/2004/08/xop/include\" xmlns:tt=\"http://www.onvif.org/ver10/schema\" xmlns:wsrfbf=\"http://docs.oasis-open.org/wsrf/bf-2\" xmlns:wstop=\"http://docs.oasis-open.org/wsn/t-1\" xmlns:wsrfr=\"http://docs.oasis-open.org/wsrf/r-2\" xmlns:tdn=\"http://www.onvif.org/ver10/network/wsdl\" xmlns:tds=\"http://www.onvif.org/ver10/device/wsdl\" xmlns:tev=\"http://www.onvif.org/ver10/events/wsdl\" xmlns:wsnt=\"http://docs.oasis-open.org/wsn/b-2\" xmlns:tptz=\"http://www.onvif.org/ver20/ptz/wsdl\" xmlns:trt=\"http://www.onvif.org/ver10/media/wsdl\">\n\&lt;SOAP-ENV:Header>\n\&lt;wsa:MessageID>uuid:2419d68a-2dd2-21b2-a205-4A69A95DB56D&lt;/wsa:MessageID>\n\&lt;wsa:RelatesTo>uuid:"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>bb <span class="token operator">=</span> <span class="token string">"&lt;/wsa:RelatesTo>\n\&lt;wsa:To SOAP-ENV:mustUnderstand=\"true\">http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous&lt;/wsa:To>\n\&lt;wsa:Action SOAP-ENV:mustUnderstand=\"true\">http://schemas.xmlsoap.org/ws/2005/04/discovery/ProbeMatches&lt;/wsa:Action>\n\&lt;/SOAP-ENV:Header>\n\&lt;SOAP-ENV:Body>\n\&lt;wsdd:ProbeMatches>\n\&lt;wsdd:ProbeMatch>\n\&lt;wsa:EndpointReference>\n\&lt;wsa:Address>urn:uuid:2419d68a-2dd2-21b2-a205-4A69A95DB56D&lt;/wsa:Address>\n\&lt;wsa:ReferenceProperties />\n\&lt;wsa:ReferenceParameters />\n\&lt;wsa:PortType>ttl&lt;/wsa:PortType>\n\&lt;/wsa:EndpointReference>\n\&lt;wsdd:Types>tds:Device&lt;/wsdd:Types>\n\&lt;wsdd:Scopes>onvif://www.onvif.org/type/NetworkVideoTransmitter\r\nonvif://www.onvif.org/name/IPC_2802222\r\nonvif://www.onvif.org/location/Country/China&lt;/wsdd:Scopes>\n\&lt;wsdd:XAddrs>http://192.168.42.100:5000/onvif/device_service&lt;/wsdd:XAddrs>\n\&lt;wsdd:MetadataVersion>1&lt;/wsdd:MetadataVersion>\n\&lt;/wsdd:ProbeMatch>\n\&lt;/wsdd:ProbeMatches>\n\&lt;/SOAP-ENV:Body>\n\&lt;/SOAP-ENV:Envelope>\n\n"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 创建 socket 用于UDP通讯 */</span>     sockfd <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                  <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"socket creating err in udptalk\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">exit</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 设置要加入组播的地址 */</span>     <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mreq<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> ip_mreq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span><span class="token string">"239.255.255.250"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>the_member<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置组地址 */</span>     <span class="token function">bcopy</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>the_member<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mreq<span class="token punctuation">.</span>imr_multiaddr<span class="token punctuation">.</span>s_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> in_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 设置发送组播消息的源主机的地址信息 */</span>     mreq<span class="token punctuation">.</span>imr_interface<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span> <span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 把本机加入组播地址，即本机网卡作为组播成员，只有加入组才能收到组播消息 */</span>     <span class="token comment" spellcheck="true">//if (setsockopt(sockfd, IPPROTO_IP, IP_ADD_MEMBERSHIP | IP_MULTICAST_LOOP, &amp;mreq,sizeof (struct ip_mreq)) == -1)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> IPPROTO_IP<span class="token punctuation">,</span> IP_ADD_MEMBERSHIP <span class="token punctuation">,</span> <span class="token operator">&amp;</span>mreq<span class="token punctuation">,</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> ip_mreq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span> <span class="token punctuation">(</span><span class="token string">"setsockopt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> IPPROTO_IP<span class="token punctuation">,</span> IP_MULTICAST_LOOP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>loop<span class="token punctuation">,</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"IP_MULTICAST_LOOP set fail!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    socklen <span class="token operator">=</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">memset</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>groupcast_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> socklen<span class="token punctuation">)</span><span class="token punctuation">;</span>     groupcast_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    groupcast_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span> <span class="token punctuation">(</span><span class="token number">3702</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token string">"239.255.255.250"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>groupcast_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 绑定自己的端口和IP信息到socket上 */</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>groupcast_addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>              <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"Bind error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">exit</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>             <span class="token function">bzero</span> <span class="token punctuation">(</span>recmsg<span class="token punctuation">,</span> BUFLEN <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         n <span class="token operator">=</span> <span class="token function">recvfrom</span> <span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> recmsg<span class="token punctuation">,</span> BUFLEN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>the_member<span class="token punctuation">,</span> <span class="token operator">&amp;</span>socklen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                  <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"recvfrom err in udptalk!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">exit</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>                  recmsg<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"recv:[%s]\n\n"</span><span class="token punctuation">,</span> recmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ip:%s\n"</span><span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>the_member<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"port:%d\n"</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>the_member<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cust_uuid <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>recmsg<span class="token punctuation">,</span> <span class="token string">"uuid:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取recmsg字符串中 子字符串"uuid:"的位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cust_uuid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uuid: err!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cust_uuid <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取接收的uuid的值</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>uu_buf<span class="token punctuation">,</span> cust_uuid<span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>uu_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>recmsg<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>recmsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>recmsg<span class="token punctuation">,</span> aa<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>recmsg<span class="token punctuation">,</span> uu_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>recmsg<span class="token punctuation">,</span> bb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> recmsg<span class="token punctuation">,</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>recmsg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>the_member<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>the_member<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                  <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"sendto error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"send ok\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Linux下编译：<code>gcc ipc_server_c.c -o ipc_server</code><br><img src="https://img-blog.csdnimg.cn/20191203141956890.png" alt="在这里插入图片描述"><br>直接运行<br><img src="https://img-blog.csdnimg.cn/2019120314201152.png" alt="在这里插入图片描述"><br>现在我们用 ONVIF Device Test Tool，测试一下<br><img src="https://img-blog.csdnimg.cn/20191203142119887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> ONVIF Device Test Tool 搜索后，服务端就打印了这些信息<br><img src="https://img-blog.csdnimg.cn/20191203142221919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>ifconfig查看下虚拟机ip地址<br><img src="https://img-blog.csdnimg.cn/20191203142300230.png" alt="在这里插入图片描述"><br>同样可以被我们之前写的 客户端 搜索到<br><img src="https://img-blog.csdnimg.cn/20191203142522136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2、使用gSOAP生成ONVIF框架，编写服务端"><a href="#2、使用gSOAP生成ONVIF框架，编写服务端" class="headerlink" title="2、使用gSOAP生成ONVIF框架，编写服务端"></a>2、使用gSOAP生成ONVIF框架，编写服务端</h4><p>文件下载于：<a href="https://github.com/As772309423/onvif-server-discover" target="_blank" rel="noopener">GitHub</a><br>参考文章：<a href="https://blog.csdn.net/weixin_44362642/article/details/86749042" target="_blank" rel="noopener">onvif服务器篇之onvif 服务器框架的搭建</a><br>碰到的问题同样写在评论区，可自行查看。<br><img src="https://img-blog.csdnimg.cn/20191203142607157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改Makefile，GSOAP_ROOT改成自己的soap路径<br><img src="https://img-blog.csdnimg.cn/20191203143202882.png" alt="在这里插入图片描述"><br>终端 <code>make</code> 编译。生成 deviceserver<br>我们直接运行 <code>./deviceserver</code><br><img src="https://img-blog.csdnimg.cn/20191203143624179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>我们同样用 ONVIF Device Test Tool，搜索一下</strong><br><img src="https://img-blog.csdnimg.cn/20191203143842910.png" alt="在这里插入图片描述"><br>服务端也有所反应<br><img src="https://img-blog.csdnimg.cn/20191203143742708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>那么本次的服务端和客户端都测试完毕了。网上资料不多，真的进行的十分困难。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>ONVIF官网：<a href="http://www.onvif.org/" target="_blank" rel="noopener">http://www.onvif.org/</a><br>gSOAP安装配置：<a href="https://blog.csdn.net/Ikaros_521/article/details/103232677" target="_blank" rel="noopener">gSOAP安装配置+使用案例参考+参考链接</a><br><a href="https://blog.csdn.net/benkaoya/category_6924052.html" target="_blank" rel="noopener">许振坪的ONVIF专栏</a><br><a href="https://blog.csdn.net/love_xjhu/article/details/11821037" target="_blank" rel="noopener">onvif开发之设备发现功能的实现</a><br><a href="https://blog.csdn.net/qq_26600237/article/details/81145602" target="_blank" rel="noopener">Linux下onvif服务端之发现设备</a><br><a href="https://blog.csdn.net/benkaoya/article/details/72476120" target="_blank" rel="noopener">ONVIF协议网络摄像机（IPC）客户端程序开发（7）：设备搜索</a><br><a href="https://blog.csdn.net/benkaoya/article/details/72466827" target="_blank" rel="noopener">ONVIF协议网络摄像机（IPC）客户端程序开发（6）：使用gSOAP生成ONVIF框架代码</a><br><a href="https://blog.csdn.net/love_xjhu/article/details/11821037" target="_blank" rel="noopener">onvif开发之设备发现功能的实现</a><br><a href="https://blog.csdn.net/qq_26600237/article/details/81145602" target="_blank" rel="noopener">Linux下onvif服务端之发现设备</a><br><a href="https://github.com/As772309423/onvif-server-discover" target="_blank" rel="noopener">GitHub服务端下载</a><br><a href="https://blog.csdn.net/weixin_44362642/article/details/86749042" target="_blank" rel="noopener">onvif服务器篇之onvif 服务器框架的搭建</a><br><a href="http://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ch=14&amp;tn=98010089_dg&amp;wd=ONVIF%20Device%20Test%20Tool&amp;rsv_spt=1&amp;oq=uuid_generate%25E2%2580%2599%25E6%259C%25AA%25E5%25AE%259A%25E4%25B9%2589%25E7%259A%2584%25E5%25BC%2595%25E7%2594%25A8&amp;rsv_pq=fce567870001ae85&amp;rsv_t=a164/AiScSOCRPNmIrBcLJbgENJ9FWFgopyq5W9tKZ%2bFeClsBvhaPOxGtfkOB7MJrh4&amp;rqlang=cn&amp;rsv_enter=0&amp;rsv_dl=tb&amp;inputT=629&amp;rsv_n=2&amp;rsv_sug3=3&amp;rsv_sug4=629" target="_blank" rel="noopener">ONVIF Device Test Tool</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> ONVIF </tag>
            
            <tag> gSOAP </tag>
            
            <tag> 网络摄像机 </tag>
            
            <tag> IPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux驱动——学习笔记</title>
      <link href="/blog/2019/12/01/linux-qu-dong-xue-xi-bi-ji/"/>
      <url>/blog/2019/12/01/linux-qu-dong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、烧写Linux系统到inand"><a href="#一、烧写Linux系统到inand" class="headerlink" title="一、烧写Linux系统到inand"></a>一、烧写Linux系统到inand</h2><pre><code>1、烧写u-boot到inand    tftp 30008000 u-boot.bin    movi write u-boot 300080002、烧写Linux内核到inand    tftp 30008000 zImage-qt    movi write kernal 300080003、烧写文件系统到inand    开发板中已经有文件系统，无须再烧，设置启动参数即可。4、设置启动环境变量setenv bootcmd "movi read kernel 30008000;bootm 30008000"setenv bootargs "console=ttySAC2,115200 root=/dev/mmcblk0p2 rw init=/linuxrc rootfstype=ext3"</code></pre><h2 id="二、挂载ubuntu系统的文件夹到开发板"><a href="#二、挂载ubuntu系统的文件夹到开发板" class="headerlink" title="二、挂载ubuntu系统的文件夹到开发板"></a>二、挂载ubuntu系统的文件夹到开发板</h2><pre><code>目的：是为了把编译好驱动程序下载到共享目下。1、进入开发板系统 root 1234562、检查开板的ip地址3、在启动脚本添加以下内容：vi /etc/init.d/rcS    mount -t nfs -o nolock 192.168.1.66:/nfs /mnt</code></pre><h2 id="三、Linux内核下的C语言编程"><a href="#三、Linux内核下的C语言编程" class="headerlink" title="三、Linux内核下的C语言编程"></a>三、Linux内核下的C语言编程</h2><pre><code>1、命名习惯    普通代码：        #define PI 3.14159        int minVal,maxVal;        void sendData(void);    内核代码：        #define PI 3.14159        int min_val,max_val;        void send_data(void);2、GNU C与ANSI C    GNU编译器是专门为Linux内核所设计的一款编译器，而且Linux内核中也使用大量只有GNU编译才支持的C语言语法，因此只有GNU编译器才能编译内核代码和Linux驱动程序。    a、零长数组        typedef struct {            int len;            char data[0];        }Data;        Data* dp = malloc(sizeof(Data)+1024);        dp-&gt;len = 1024;        send(sockfd,dp,sizeof(dp-&gt;len+sizeof(*dp)),0);    b、case范围        switch(n)        {            case 1 ... 5: break;            case 6 ... 9: break;        }    c、typeof        定义一个宏求两个变量的最大值。        #define MIN(a,b) ((a)&gt;(b)?(a):(b))        #define MIN(type,a,b) ({type _a=num1++;type _b=num2++;_a&gt;_b?_a:_b;})        MIN(int,num1++,num2++) =&gt; num1++ &gt; num2++ ? num1++ : num2++;        #define MIN(a,b) ({typeof(a) _a=a; typeof(b) _b=b; _a&gt;_b?_a:_b;})        定义一个宏交换两个变量值。        #define swap(a,b) ({typeof(a) t=a; a=b; b =t;})    d、可变参长数宏        int printf(const char *format, ...);        #define debug(ftm,arg,...) printf(ftm,##arg)    e、标号元素        ANSI C        struct Student stu = {            name:"hehe",            sex:'m',            age:18        };        GNU C        struct Student stu = {            .name = "hehe",            .sex = 'm',            .age = 18        };3、do{ } while(0)    定义一个宏函数，用来释放堆内存。    #define FREE_HEAP(p) do{free(p); p = NULL;}while(0)    int func(void)    {        if(NULL != p)            FREE_HEAP(p)        else            return -1;    }4、goto语句    一般的企业代码中禁止使用goto语句，因为goto可以跳转到函数内的任意位置，会打破原有分支、循环结构、或业务逻辑，所以goto是应用层代码中是一种非常危险的语句，但在内核中却有它独到的功能。    int example(void)    {        if(!register_a())        {            goto err1;        }        if(!register_b())        {            goto err2:        }        if(!register_c())        {            goto err3:        }        // work    err3:        unregister_c();    err2:        unregister_b();    err1:        unretister_a();    err:        return ret;    }    在内核中，资源的申请与释放必须是逆序，而goto语句能够把错误处理的代码写的安全、严谨而有简洁。</code></pre><h2 id="四、内核模块"><a href="#四、内核模块" class="headerlink" title="四、内核模块"></a>四、内核模块</h2><pre><code>通过分析Linux内核的编译过程，了解到一个实事：Linux内核是由很多模块组成了。1、内核以模块的形式组成的好处    a、可以灵活的进行裁剪    b、可以动态加载或卸载    c、可以尽量控制内核的大小2、内核模块的特点    a、内核模块代码最终是要加入内核中的    b、内核模块代码工作在内核态。    c、内核模块代码一旦出错，可能会导致整个内核（操作）崩溃。    d、在Linux系统中驱动程序是一个内核模块，它按照内核模块的格式进行编写。3、内核模块的结构    a、模块加载函数（必须）        模块加载内核时自动执行此函数，相当于内核模块的入口函数。        此函数一般要做些初始化工作、申请内存、资源，注册相关信息。    b、模块卸载函数（必须）        模块被卸载时自动执行。        此函数一般要做些资源的释放、销毁的工作。    c、模块声明许可证（必须）    d、模块作者信息声明（可选）    e、其它一些自定义函数，可以被模块加载函数调用。4、内核模块的加载与卸载    insmod hello.ko    rmmod hello.ko</code></pre><h2 id="五、printfk函数"><a href="#五、printfk函数" class="headerlink" title="五、printfk函数"></a>五、printfk函数</h2><pre><code>printfk是在内核中运行的向控制台输出显示信息的函数，与printf函数的用法基本一致。内核中的消息是分等级的，定义在include/linux/kernal.h    #define    KERN_EMERG    "&lt;0&gt;"    /* system is unusable            */    #define    KERN_ALERT    "&lt;1&gt;"    /* action must be taken immediately    */    #define    KERN_CRIT    "&lt;2&gt;"    /* critical conditions            */    #define    KERN_ERR    "&lt;3&gt;"    /* error conditions            */    #define    KERN_WARNING    "&lt;4&gt;"    /* warning conditions            */    #define    KERN_NOTICE    "&lt;5&gt;"    /* normal but significant condition    */    #define    KERN_INFO    "&lt;6&gt;"    /* informational            */    #define    KERN_DEBUG    "&lt;7&gt;"    /* debug-level messages            */    printk 默认的等级是 KERN_NOTICE在操作系统中可以设置显示消息等级，数字越大，级别超低。    cat  /proc/sys/kernel/printk 可以看当前系统设置的消息等级    echo "5" &gt; /proc/sys/kernel/printk</code></pre><h2 id="一、模块参数"><a href="#一、模块参数" class="headerlink" title="一、模块参数"></a>一、模块参数</h2><pre><code>在加载模块时可以像应用程序一样附加一些参数。定义变量：用来存储数据。注册变量：让内核允许加载模块时变量被赋值。    module_param(变量名，类型，权限)；    类型:        byte、short、ushort、int、uint、long、ulong、charp    权限:        #define S_IRUSR 00400        #define S_IWUSR 00200        #define S_IXUSR 00100传递参数：insmod xxx.ko 变量名=数据模块导出符号：    EXPORT_SYMBOL_GPL(符号);    导出的符号（变量名、函数名）可以被其他模块使用，使用前声明一下即可。</code></pre><h2 id="二、驱动概述"><a href="#二、驱动概述" class="headerlink" title="二、驱动概述"></a>二、驱动概述</h2><pre><code>什么是驱动：就是控制硬件工作的软件。在Linux系统下，驱动程序工作在内核中，以内核模块形式存在，它能能够控制硬件工作，或者提供控制硬件的接口。驱动程序提供接口归内核调用，然后内核再统一抽象成文件（设备文件），代应用的程序以操作文件式进行控制硬件。应用程序工作在用户态，驱动程序工作在内核态，它们之间不能直接联系，需要按照内核提供的接口（open/read/write/close）来传递数据。在Linux系统下一切皆文件。</code></pre><h2 id="三、驱动的类型"><a href="#三、驱动的类型" class="headerlink" title="三、驱动的类型"></a>三、驱动的类型</h2><pre><code>字符设备：在IO过程中以字符或字节为单位进行数据传输，数据也要按照一定的顺序进行读写。    操作这种设备的接口有：open/close/read/write    常见的字符设备有：鼠标、键盘、串口、LED灯、温度传感器、湿度传感器等。    字符设备由于功能杂乱，设备也混乱，一般都是小厂家生产的没有统一的接口，所以大多数据需要编写驱动的都是字符设备。块设备：以块为单位进行数据的读写，用记在读写数据时必须最少读一块，这种设备一般都带缓冲区，而且数据量一般都很大，数据在读写时一般不会立即到达硬件。    操作这种设备的接口有：open/close/read/write/sync/fsync/fdatasync。    常见的块设备有：硬盘、SD卡、Nand、iNand。    虽然存储介质不同，但都有一个控制器不需要外部直接操作，只需要按照控制器的接口来操作即可。网络设备：具有网络通信协议的设备，网络设备没有设备文件,必须使用socket进行操作。    操作这种设备的接口有：send/recv/sendto/recvfrom。    网络设备都非常标准的、规范，所以有了万能的网卡驱动，顶多需要移植一下，也不需要编写驱动。</code></pre><h2 id="四、设备文件"><a href="#四、设备文件" class="headerlink" title="四、设备文件"></a>四、设备文件</h2><pre><code>在Linux系统会把硬件抽象成文件来制作（网上除外）。查看设备文件：ls -l /dev每个字母表示文件的类型：    -   普通文件    d   目录文件    l   链接文件    c   字符设备文件    b   块设备文件    p   管道文件    s   socket文件设备号：主设备号+从设备号组成    主设备号：表示硬件的类型，1~254    从设备号：硬件的编号，0~255    它是在驱动程序中确定的，可以让内核自动生成，也可以手动确定，或者手动创建。    注意：设备不能重复。</code></pre><h2 id="五、字符设备驱动"><a href="#五、字符设备驱动" class="headerlink" title="五、字符设备驱动"></a>五、字符设备驱动</h2><pre><code>1、字符设备驱动分析    drivers\char\Cs5535_gpio.c    a、按照内核模块格式编写    b、创建设备号、初始化、添加    c、实现文件操作函数2、设备号    dev_t dev_id = MKDEV(主设备号，从设备号);    功能：生成一个设备号    返回值：主设备号+从设备号的合体    注意：不一定能使用。    int register_chrdev_region(dev_t from, unsigned count, const char *name)    功能：注册希望使用的设备号，如果已经被占用则失败。    from：希望使用的设备号，MKDEV的返回值    count：设备的数量    name：设备文件名    返回值：成功返回0    int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,const char *name)    dev：内核分配的设备号，返回值    baseminor：设备号的起始值    count：设备的数量    name：设备名    返回值：成功返回0    MAJOR(dev_id) 解析出主设备号    MINOR(dev_id) 解析出从设备号    void unregister_chrdev_region(dev_t from, unsigned count)    功能：释放设备号    from：设备号    count：数量3、字符设备结构体    struct cdev {        struct kobject kobj;  // 内嵌的对象        struct module *owner; // 模块名        const struct file_operations *ops; // 文件操作结构体（函数指针）        struct list_head list;        dev_t dev; // 设备号        unsigned int count; // 设备数量    };    void cdev_init(struct cdev *cdev, const struct file_operations *fops)；    功能：初始化字符设备结构体    cdev：字符设备结构体    fops：文件操作结构体    int cdev_add(struct cdev *p, dev_t dev, unsigned count)    功能：添加字符设备到内核    p：被初始化过的字符设备结构体    dev：注册过的设备号    count：设备数量    struct file_operations {        // 模块名        struct module *owner;         // 设备文件位置指针        loff_t (*llseek) (struct file *, loff_t, int);        // read函数        ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);        // write        ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);        // poll        unsigned int (*poll) (struct file *, struct poll_table_struct *);        // ioctl        int (*ioctl) (struct inode *, struct file *, unsigned int, unsigned long);        // mmap        int (*mmap) (struct file *, struct vm_area_struct *);        // open        int (*open) (struct inode *, struct file         // flush        int (*flush) (struct file *, fl_owner_t id);        // close        int (*release) (struct inode *, struct file *);    }</code></pre><h2 id="六、设备文件"><a href="#六、设备文件" class="headerlink" title="六、设备文件"></a>六、设备文件</h2><pre><code>1、手动创建    mknod 创建设备文件的命令。    cat /proc/devices 查看内核分配的主设备号    mknod /dev/char_v1 c 250 02、自动创建内核提供一组函数用于自动创建设备文件，设备类对动对应的数据结构：struct class    class_create-&gt;*__class_create    struct class *__class_create(struct module *owner, const char *name,struct lock_class_key *key)    功能：在内核中创建设备类 /sys/class/xxx    owner：模块名    key：设备类的名字    返回值：设备类指针    struct device *device_create(struct class *class, struct device *parent,dev_t devt, void *drvdata, const char *fmt, ...)    功能：/sys/class/xxx/在dev目录下自动创建设备文件    class：设备类指针，class_create函数的返回值    parent：设备结构体指针，兼容各种类型的设备，此处填写字符设备结构指针。    devt：设备号    drvdata：创建设备文件时的附加信息    fmt：设备文件名void device_destroy(struct class *class, dev_t devt)功能：删除设备class：设备类指针，class_create函数的返回值devt：设备号void class_destroy(struct class *cls)功能：从内核中删除设备类</code></pre><h2 id="一、驱动程序中操作GPIO"><a href="#一、驱动程序中操作GPIO" class="headerlink" title="一、驱动程序中操作GPIO"></a>一、驱动程序中操作GPIO</h2><pre><code>在内核中已经把各个GPIO定义为宏，不需要再找地址了，在头文件 arch/arm/mach-sv5pv210/include/mach/gpio.h。int gpio_request(unsigned gpio, const char *label)功能：申请GPIO资源gpio：GPIO管脚的编号，在gpio.h头文件中有定义label：给GPIO管脚取个名字void gpio_free(unsigned gpio)功能：释放GPIO资源int gpio_direction_input(unsigned gpio)功能：设置GPIO管脚为输入模式int gpio_direction_output(unsigned gpio, int value)功能：设置GPIO管脚为输出模式int gpio_get_value(unsigned gpio)功能：从GPIO管脚读取数据void gpio_set_value(unsigned gpio, int value)功能：向GPIO管脚写入数据</code></pre><h2 id="二、ioctl"><a href="#二、ioctl" class="headerlink" title="二、ioctl"></a>二、ioctl</h2><pre><code>int ioctl(int d, int request, ...);功能：从应用层来调用内核层的ioctl函数，对设备进行设置。d：文件描述符，open函数的返回值request：命令...：附加参数，存储在用户层，以指针的方式交给内核层。返回值：成功返回0，失败返回-1。int (*ioctl) (struct inode *, struct file *, unsigned int cmd, unsigned long arg);功能：响应应用层的ioctl函数，对硬件进行设置。cmd：对应应用层requestarg：实际上是一个指针，它第指向用户层的一段数据。</code></pre><h2 id="三、内核的内存管理"><a href="#三、内核的内存管理" class="headerlink" title="三、内核的内存管理"></a>三、内核的内存管理</h2><pre><code>unsigned long __must_check copy_from_user(void *to, const void __user *from, unsigned long n)功能：从用户层拷贝数据到内核层to：指向内核层空间的指针from：指向用户层空间的指针n：要拷贝的字节数据返回值：成功拷贝的字节数long copy_to_user(void __user *to,const void *from, unsigned long n)功能：从内核层拷贝数据到用户层to：指向用户层空间的指针from：指向内核层空间的指针n：要拷贝的字节数据返回值：成功拷贝的字节数void *kmalloc(int size)功能：与标准C中的用法一致，其实就是调用malloc，kmalloc只是一个宏名。void kfree(void *where)功能：释放内存</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> 驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统移植——学习笔记</title>
      <link href="/blog/2019/12/01/linux-xi-tong-yi-zhi-xue-xi-bi-ji/"/>
      <url>/blog/2019/12/01/linux-xi-tong-yi-zhi-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、u-boot工程"><a href="#一、u-boot工程" class="headerlink" title="一、u-boot工程"></a>一、u-boot工程</h2><h3 id="1、BootLoader介绍"><a href="#1、BootLoader介绍" class="headerlink" title="1、BootLoader介绍"></a>1、BootLoader介绍</h3><p>BootLoader是操作系统运行之前要执行的一段程序，它负责初始化硬件设备、建立内容空间映射，从而操作系统的运行做好准备，是一个专门加载操作系统的程序。<br>        对于嵌入式系统而言，没有通用的硬件平台，因此也没有通用的BootLoader，不同的平台、不同的CPU构架都有不同的BootLoader，因为BootLoader不光依赖CPU的体系结构也依赖硬件平台的配置，对于不同的开发板而言，那怕它的CPU一样，而BootLoader都会有区别，因此我们要为每一款开发板制作它属于它的BootLoader程序。<br>        但大部分开发板的BootLoader仍有许多共性，所以我们没有必须全部从零制作，而对一个基础的BootLoader进行修改，而制作出能用的BootLoader程序。</p><h3 id="2、u-boot简介"><a href="#2、u-boot简介" class="headerlink" title="2、u-boot简介"></a>2、u-boot简介</h3><p>   u-boot（ Universal Boot Loader）是BootLoader的一种，它遵循GPL通用许可证的开源项目，它的源码的目录、编译形式都和Linux的源码很相似，可以说u-boot就是仿照Linux而开发的。</p><h3 id="3、u-boot源码的获取"><a href="#3、u-boot源码的获取" class="headerlink" title="3、u-boot源码的获取"></a>3、u-boot源码的获取</h3><p>1.源头的代码是u-boot官网下载的，这种源码是最干净最纯粹的，一般CPU的生产厂商会下载这种源码，当CPU厂商生产出一款CPU之后就会使用这款CPU制作出一块公板(它会把这款CPU所具备的功能全部体现出来)，然后会根据公板修改出一份符合它的u-boot。<br>        2.开发板的供应商会购买CPU厂商的公板，然后对公板进行裁剪（去掉一些不需要的功能、替换掉一些不必要的硬件），然后再根据裁剪后开板有厂商提供的u-boot进行修改，从而制作出属于这款开发板的u-boot。<br>        3.官网、CPU厂商、开发板厂商处可以获取u-boot源码，而从开发板厂商处获取的u-boot源码基本上是可以使用的，不需要做什么大的修改。 </p><h3 id="4、u-boot源码结构"><a href="#4、u-boot源码结构" class="headerlink" title="4、u-boot源码结构"></a>4、u-boot源码结构</h3><pre><code>    顶层的u-boot源有30多个目录，大致分为三类：        1.与CPU体系结构或开发板硬件直接相关的代码。        2.能用的函数、驱动程序        3.应用程序、工具、文档    board 平台相关 存储电路板相关的目录文件    cpu 平台相关 与CPU的体系结构相关的库文件，由于S5PC11x的CPU早于S5PV210,而还兼容S5PV210，所以在这个目录只能看到S5PC110。    include 通用 u-boot通用的一些头文件，还有一些各种硬件平台的汇编文件、系统配置和支持文件系统，configs目录有与开发板配置相关的头文件。    common 通用 里面有u-boot所有支持的命令，每一个文件就代表一个命令。    lib_generic 通用 里面是通用的库函数。    net 通用 里面是与网络协议相关的代码。    fs 通用 所支持的文件系统（管理硬盘上的文件的程序）。    drivers 通用 所支持的设备驱动，如：网卡、串口、USB。    disk 通用 对磁盘的支持。    doc 文档 里面非常完整的u-boot说明文档。    tools 通用 u-boot的一些工具    examples 案例 一些能够独立运行的应用程序。</code></pre><h3 id="5、u-boot的配置编译"><a href="#5、u-boot的配置编译" class="headerlink" title="5、u-boot的配置编译"></a>5、u-boot的配置编译</h3><pre><code>    u-boot是通过Makefile组织编译的，顶层的Makefile可以对开发板进行整体配置，然后递归调用各级目录下的Makefile，最后把所有编译过的代码链接成u-boot镜像。    注意：编译前确定交叉编译，Makefile的147行。    1.清理之前的编译的残留。        make distclean    2.配置编译方法        make x210_sd_config        注意：chmod +x mkconfig    3.多线程编译        make -jn 一般n是CPU内核数量的2倍。</code></pre><h3 id="6、u-boot的运行"><a href="#6、u-boot的运行" class="headerlink" title="6、u-boot的运行"></a>6、u-boot的运行</h3><pre><code>    1.u-boot是ELF格式的，而u-boot.bin才是纯二进制指令格式的。    2.u-boot.bin并不能直接运行，原因是没有添加校验和，而且之前添加校和的工具不能继续使用。    3.sd_fusing目录中有为u-boot.bin添加校验和的工具，但并不能直接使用，需要在Makefile添加以下指令。        291 all:            cd sd_fusing &amp;&amp; make            ./sd_fusing/mkbl1 u-boot.bin sd-bl1-8k.bin 8192            dd if=sd-bl1-8k.bin of=u-boot_image.bin            dd if=u-boot.bin of=u-boot_image.bin seek=48            rm -rf sd-bl1-8k.bin            cp u-boot_image.bin /media/sf_shared/image/</code></pre><h2 id="二、u-boot常用命令"><a href="#二、u-boot常用命令" class="headerlink" title="二、u-boot常用命令"></a>二、u-boot常用命令</h2><pre><code>1、帮助命令    help/p/?2、环境变量相关命令    printenv 显示所有环境变量    setenv 添加/删除/修改环境变量    saveenv 保存环境变量到硬盘    注意：环境变量都是字符串，没有数据类型之分。    注意：修改只是临时有效，重启后就会还原，必须使用保存命令才能长期有效。    u-boot中的环境变量    netmask：子网掩码    ipaddr：板子的ip地址    ethaddr：mac地址    baudrate：串口波特率    bootdelay：启动系统前的等待秒数    gatewayip：网关ip地址    bootcmd：默认启动时执行的命令    bootargs：启动时传递给内核的参数    serverip：服务器ip地址3、网络相关的命令    ping ip 测试与服务器是连通    tftp 0x01020304 file.bin 可以从服务器下载程序到指定的内存地址。        1.ubuntu系统需要搭建tftp服务器        2.在ubuntu系统关机的情况下，设置网络模式为桥接模式，然后启动。        3.设置ubuntu的ip地址，保证ubuntu、windows、开发板三者ip地址在同一网段、子网掩码一致。        4.开发板ping通windows系统。        5.开发板ping通ubuntu系统。        6.在u-boot中执行 tftp d0020010 led.bin，可以将程序下载到开发板的d0020010地址处，go d0020010 可以到此地址执行。        注意：Windows防火墙，如果不会配置规则，建议关闭。4、启动命令    boottm 0x01020304 从该内存地址启动系统。    boot 它需要与bootcmd环境变量配合，根据bootcmd的设置来启动系统。</code></pre><h2 id="一、u-boot编译过程分析"><a href="#一、u-boot编译过程分析" class="headerlink" title="一、u-boot编译过程分析"></a>一、u-boot编译过程分析</h2><p>u-boot顶层目录下的Makefile负责u-boot的整体编译过程，因此想要了解u-boot的编译过程需要阅读Makefile文件。<br>    Makefile中没有数据类型之分，全部都是字符串数据。<br>    具体分析过程参见 Makefile_bck 文件</p><pre><code>总结：    1、u-boot的源码不是一行行代码写出来的，而拼凑出来的，一份u-boot源码中可能包含了适用于各种开发板的源码，用条件编译进行区分的。    2、很多文件不自带的，而是配置过程根据一些原材料生成的。    3、u-boot的整体的代码构架是参考了Linux内核，而编译过程与Linux也很相似。</code></pre><h2 id="二、u-boot的配置过程"><a href="#二、u-boot的配置过程" class="headerlink" title="二、u-boot的配置过程"></a>二、u-boot的配置过程</h2><pre><code>1、执行make x210_sd_config 命令，然后make会执行Makefile脚本中的x210_sd_config目标。2、x210_sd_config依赖了unconfig，unconfig中会删除所有旧的头文件、mk文件。3、然后调用了mkconfig脚本，并传递了6个参数，分别是x210_sd arm s5pc11x x210      samsung s5pc110。4、在mkconfig脚本中先确定的开发板的名字，检查参数的数量。5、根据参数3，删除旧的链接文件，创建新的链接文件。6、然后把参数2、3、4、5、5写到include目录下的config.mk中7、在include目录下创建config.h头文件，并让它实际指向，config/下的以参数1命名的头文件。8、把0xc3e00000写入board/samsung/x210/config.mk文件中，用于指定链接地址。</code></pre><h2 id="三、u-boot的链接脚本"><a href="#三、u-boot的链接脚本" class="headerlink" title="三、u-boot的链接脚本"></a>三、u-boot的链接脚本</h2><pre><code> u-boot的链接脚本在board/samsung/x210/u-boot.lds，与裸机课程中讲的链接脚本没有本质区别，只是复杂度高一些，文件多一些，使用的技巧多一些。    1、ENTRY(_start) 指定整个uboot的入口地址，类似于C语言中的main函数。    2、指定程序链接地址的方法有两种        在Makefile文件中通过参数 -Ttext=0xc3e00000        在链接脚本中的SECTIONS里 .=0x00000000    注意：如果两个方式都设置，优先使用-Ttext设置的地址，而u-boot实际使用的是0xc3e00000。</code></pre><h2 id="一、u-boot第一阶段启动流程"><a href="#一、u-boot第一阶段启动流程" class="headerlink" title="一、u-boot第一阶段启动流程"></a>一、u-boot第一阶段启动流程</h2><p>根据u-boot的配置过程可以找到它的链接脚本，然后根据链接脚本中代码段的排列位置找到u-boot的入口代码应该是cpu/s5pc11x/start.S文件。</p><h3 id="1、start-S"><a href="#1、start-S" class="headerlink" title="1、start.S"></a>1、start.S</h3><pre><code>    a、导入了一些头文件，这些头文件都配置过程中生成的链接文件（u-boot不能在windows目录下配置、编译）。    b、config.h头文件是配置过程中生成了，里面的内容只有一行，#include &lt;configs/x210_sd.h&gt;，所以实际被包含的是configs/x210_sd.h。    c、x210_sd.h文件中有大量的宏，里面都u-boot所需要的一些参数。    d、version.h里面只记录一行有效内容，#include "version_autogenerated.h"，version_autogenerated.h是配置过程中自动生成的，里面记录是u-boot的版本号。    e、asm不是u-boot中的原生目录，而配置过程中生成的软链接，实际指向是asm-arm目录，而最终被包含的应该是asm-arm/proc-armv/domain.h。    f、regs.h配置过程中生成的，实际被包含的是s5pc110.h。    g、16个字节的校验和，而裸机课程时mkv210_image.c的功能就添加16个字节的校验和。    h、_start:函数中就是用指令模拟的异常向量表，而_start依赖了reset函数，因此真正的入口函数是reset。    i、而reset函数中禁用了外部中断和快速中断，设置cpu为SVC（特权模式）。    j、接下顺序执行了cpu_init_crit函数，首先禁用了二级缓存，然后设置二级缓存，最后再启动二级缓存。    k、然后初始化一级缓存、禁用MMU(内存管理单元，负责内存映射)，然后读取启动介绍信息，根据r2寄存器中的值，确定启动介绍，最终会以SD/MMC BOOT方式启动。    l、设置sram内存中位置为栈指针，然后调用lowlevel_init函数，而此函数在board/samsung/x210/lowlevel_init.S。</code></pre><h3 id="2、lowlevel-init-S"><a href="#2、lowlevel-init-S" class="headerlink" title="2、lowlevel_init.S"></a>2、lowlevel_init.S</h3><pre><code>    a、检查复位状态，原因是reset函数被执行的原因有很多，比如：冷上电、热启动、睡眠状态下的唤醒，而它们区别是冷上电需要初始化DDR内存，而其它不用，如果是冷上则继续向下执行，否则调用wake。    b、关闭看门狗，初始化SRAM相关的GPIO管脚，电源锁定。    c、判断当前代码在什么位置，如果在DDR内存中则直接开始加载系统，如果在SRAM中则需要初始化时钟、DDR等。    d、初始化时钟，205行~385行的代码都是初始化时钟系统。    e、初始化DDR内存，mem_ctrl_asm_init函数不在当前文件中，而是定义在cpu/s5pc11x/s5pc110/cpu_init.S。    f、初始uart，当完成uart的初始化后，向uart发送一个'O'。    g、初始化TrustZone，开户系统保护。    h、关闭基带模拟，到此为止lowlevel_init的工作已经全部完成，向uart发送一个'K'，然后返回start.S中。    总结lowlevel_init中一共做哪些事情：        检查复位状态、SRAM相关GPIO管理的初始化，关闭看门狗、电源锁定、初始化时钟、初始化DDR内存、初始化串口关打印'O'，启动TZPC、关闭基带模拟关打开'K'。</code></pre><h3 id="3、Start-S"><a href="#3、Start-S" class="headerlink" title="3、Start.S"></a>3、Start.S</h3><pre><code>    a、从lowlevel_init函数中返回，再次锁定电源。    b、再次设置栈指针，因为之前已经设置过了，但当时DDR内存还没有初始化只能调到到SRAM中，而此时DDR已经完成初始化可以设置到DDR内存中了。    c、再交判断代码的执行位置，这次判断的目的与之前的不同，这是为了决定是否重定位而判断的，如果此时代码运行在SRAM中，则说当前代码不是完成的u-boot，而初始化工作也已经全部完成，接下来则要把完整的u-boot从SD拷贝到DDR中运行。    d、确定SD卡的通道号，会根据开发板的拨码开关设置自动在内存中设置相应的值。    e、确定拷贝源，也就是什么介质中拷贝u-boot，最终会调用mmcsd_boot函数。    f、mmcsd_boot函数中首先调用了movi_bl2_copy函数，而movi_bl2_copy函数会调用iROM中的拷贝函数。        u32(*copy_sd_mmc_to_mem)(            u32 channel, 表示通道号            u32 start_block, 开始扇区号            u16 block_size, 要拷贝的扇区数量            u32 *trg, 拷贝到的目标位置            u32 init); 保留    g、重定位完成后则开始执行after_copy函数，开启域访问控制（为MMU做准备）。    h、接下来设置TTB（内存映射转换表），然后开户MMU。    物理地址：就是设置在生产时赋予的地址，它是根据在CPU管理上的接线位置决定的，物理地址是硬件编码一旦确定无法修改。        我们在裸机编程时使用到的寄存器的地址都是物理地址，可以通过查阅芯片手册获取并操作，物理地址的缺点就是不够灵活。    虚拟地址：就是在物理的软件操作之间加一个转换，这个转换操作就地址映射。        物理地址到虚拟地址的映射时会建立一个地址映射表，操作硬件时，只需要操作虚拟地址，然后MMU芯片会根据地址映射表自动去操作对应的物理地址，这个过程由MMU芯片负责。    地址映射的好处：        1、可以编程更灵活        2、使用代码的通用性更强        3、在映射时还可以给虚拟地址设置权限，如：可读、可写、可执行等，提高内存的安全性。        4、还可以把零散的内存映射成为一整块的内存，x210共有两个内存接入口，DRAM0可以接512M内存实际只接入了256M，DRAM1可以接1024M内存而实际只接入了256M内存，因此DRAM0与DRAM1中间是不连续的，而通过MMU的映入可以把DRAM0与DRAM1合并成一整块512M内存更方便使用。    i、接下来再次设置栈指针，此次设置是在MMU开启之后，现在已经有了一块连续的512M内存，这次的设置会让内存的使用更安全，更紧凑，更节约内存。    j、清理bss内存段，如果不清理全局变量和static变量就无法定义、使用。    k、以后工作完成后则调用start_armboot函数，此函数位于lib_arm/board.c中，是一个C语言的函数，此时会跳转到DDR内存中开始第二阶段的u-boot运行。    u-boot第一阶段启动流程总结：        1、构建异常向量表        2、设置CPU工作模式为特权模式        3、关闭看门狗        4、开发板电源锁定        5、时钟系统初始化        6、DDR内存初始化        7、初始化串口并打印OK        8、重定位        9、建立映射表并开户MMU        10、跳转到第二阶段</code></pre><h2 id="二、u-boot第二阶段启动流程"><a href="#二、u-boot第二阶段启动流程" class="headerlink" title="二、u-boot第二阶段启动流程"></a>二、u-boot第二阶段启动流程</h2><pre><code>1、从宏观角度分析u-boot第二阶段启动流程应该做什么    a、第一阶段主要是初始化CPU内部的一些硬件（看门狗、时钟、uart等），然后初始化DDR内存、重定位、开户MMU。2、第二阶段就应该初始化CPU外部的一些硬件设备了，如：iNand、网卡、ADC。3、u-boot本身所需要的一些事情，如：环境变量、命令。4、完成所有的初始化工作后开始倒计时：    1.等待超时，开始加载操作、加载文件系统，然后就是操作系统启动完成。    2.按任意键，进入u-boot的命令行，在命令行中中可以执行命令、设置或查看环境变量。        u-boot的命令行就是个死循环，不停的接收命令、解析命令、执行命令。</code></pre><h2 id="三、u-boot源码分析"><a href="#三、u-boot源码分析" class="headerlink" title="三、u-boot源码分析"></a>三、u-boot源码分析</h2><pre><code>1、u-boot的源码不是某个人或某人组织完成的，而是不同的组织完成了不同的工作，最终让u-boot具备引导操作系统的能力。    u-boot官网负责整体代码的组织架构。    半导体生产广商，根据CPU的特性对BL1段的代码进行修改，添加。    开发板的生产广商，根据开发板的外部硬件对BL1、BL2阶段的代码进行修改、添加。2、所有在修改u-boot代码时都遵循这样的原则：    尽量不删除代码，那代码会接下的启动流程也是选择注释掉，而不是删除。    u-boot为了兼容更多的CPU会做一些对于个别CPU无意义的事情。    尽量多做不要少做，那怕做一些无意义的事情，也要让操作系统顺利启动。3、由于u-boot只负责把操作系统启动起来，因此它不需要效率高、安全、稳定。4、由于u-boot的代码构成比较复杂，所以质量不高，因此没有借鉴价值。5、但u-boot代码是按照Linux内存的框架设计的，因此我们分析、研究、了解是为Linux内核的学习打开基础。</code></pre><h2 id="四、u-boot启动过程特征总结"><a href="#四、u-boot启动过程特征总结" class="headerlink" title="四、u-boot启动过程特征总结"></a>四、u-boot启动过程特征总结</h2><pre><code>1、从代码角度来看，第一阶段主要以汇编代码为主，第二阶段以C代码为主。2、从内存角度来看，第一阶段主要运行在SRAM中，第二阶段在主要运行在DDR中。3、从硬件角度来看，第二阶段注重的是CPU内部，第二阶段注意的是CPU外部、开发板的内部。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> 系统移植 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM体系结构（重制版）——九鼎创展 x210V3s</title>
      <link href="/blog/2019/11/29/arm-ti-xi-jie-gou-chong-zhi-ban-jiu-ding-chuang-zhan-x210v3s/"/>
      <url>/blog/2019/11/29/arm-ti-xi-jie-gou-chong-zhi-ban-jiu-ding-chuang-zhan-x210v3s/</url>
      
        <content type="html"><![CDATA[<h2 id="检查开发板："><a href="#检查开发板：" class="headerlink" title="检查开发板："></a>检查开发板：</h2><pre><code>1、网线2、电源3、USB转串口4、SD卡5、开发板</code></pre><h2 id="任务："><a href="#任务：" class="headerlink" title="任务："></a>任务：</h2><pre><code>1、试用开发板2、阅读用户手册</code></pre><h2 id="搭建开发板的开发环境："><a href="#搭建开发板的开发环境：" class="headerlink" title="搭建开发板的开发环境："></a>搭建开发板的开发环境：</h2><pre><code>1、安装USB转串口的驱动，安装完成后重启。    查看串口信息，设置编号，设置波特率。    右击此电脑-&gt;管理-&gt;设备管理器-&gt;串口-&gt;USB-to-Serial-&gt;右击属性-&gt;端口设置-&gt;设置波特率115200-&gt;高级-&gt;选择串口编号。2、安装串口通信工具(putty、dnw)    以putty为例，选择串口，115200，会话名，保存，双击打开会话    此等待与开发板通信，长按电源键，如果不出错则有字符显示。3、安装SD卡烧写工具    右击以管理员身份运行，如果无法运行，则安装vsc++2008运行库。    从image中下载led_image.bin到本机，然后把SD卡插入到电脑中。    点击Browse选择下载的led_image.bin，然后点击ADD，然后点击START，开始烧写。    把SD卡插入到开发板的靠近按键的卡槽中，然后长按电源键。4、安装交叉编译器    复制arm-2009q3-tar.bz2到ubuntu系统，在主目录下解压。    在终端中进入arm-2009q3/bin目录下，使用pwd获取当前路径，然后复制。    sudo vim /etc/environment，把刚才的路径粘贴到PATH的最前面，用:分隔，保存退出。    在终端执行 source /etc/environment 重新加载环境变量配置文件。    执行命令 arm-none-linux-gnueabi-gcc -v 查看交叉编译器的版本信息。    注意：64位的虚拟机安装下列工具    sudo apt-get install lib32c-dev      sudo apt-get install lib32stdc++6  </code></pre><h2 id="开发板介绍："><a href="#开发板介绍：" class="headerlink" title="开发板介绍："></a>开发板介绍：</h2><pre><code>1、x210v3s，由深圳九鼎创展生产，目前已经停产。2、CPU由三星公司生产叫S5PV210，目前已经停产。3、S5PV210采用ARMv7架构CortexTM-A8系列。4、支持android4.0和android2.3，Qt4.8。5、启动设置：    拨码开关在下：通过USB口启动，    拨码开关在上：是通过SD卡启动，优先内置的SD卡（硬盘），如果内置的SD卡，没有启动信息，则会从外置的SD卡启动。6、串口：    CPU带了四串口接口，但此开发板只外接了两个串口（UART0和UART2）。    注意，默认 andorid2.3,WINCE 使用 uart0 作为调试串口，android4.0 和 linux 使用 uart2 作为调试串口。7、SD卡槽：    有两个SD卡槽，只有右侧可以使用。8、LED和蜂鸣器：    一个蜂鸣器，有5个LED，其中一个电源指示灯。    用于调试程序。9、电源：    此开发板采用了电源管理芯片，长按3秒才能开机。    如果没有电源锁定程序，松开后会立即断点。</code></pre><h2 id="什么是嵌入式："><a href="#什么是嵌入式：" class="headerlink" title="什么是嵌入式："></a>什么是嵌入式：</h2><pre><code>是以应用为中心，以计算机技术为基础，软硬件可裁剪，适应应用系统对功能、可靠性、成本、体积、功耗等严格要求的专用计算机系统。1、计算机设备，遵守冯·诺依曼体系结构。    1、运算器    2、控制器    3、存储设备(内存)    4、输入设备    5、输出设备2、操作系统    因为嵌入式设备是一种专用性很强的计算机，    不是标准的操作系统，需要适当的进行裁剪（移植）。3、嵌入式软件工程师    也是在操作的基础进行编程，调用系统接口、C/C++标准库、第三库（Qt/MySQL/Madplay）。    但要求更要，一般嵌入式设备的资源有限（存储设备、电量、运算速度）、环境恶劣。4、嵌入式的开发模式    由于嵌入式的特殊性可能暂时没有操作系统，或者硬件的的速度慢无法运行开发工具，因此只能在PC机下写好代码，然后编译，下载、烧写的方式到嵌入式设备中运行。    普通的开发模板：A计算机开发，A计算机运行    嵌入式的开发模式：A计算机开发，编译出B计算机可以运行和程序，把可执行程序放在B计算机上运行，这种叫做交叉编译。</code></pre><h2 id="一、嵌入式系统的构成"><a href="#一、嵌入式系统的构成" class="headerlink" title="一、嵌入式系统的构成"></a>一、嵌入式系统的构成</h2><pre><code>软件：    应用程序    第三方库（Qt，libc，myclient）    操作系统：        引导程序        内核+驱动        文件系统硬件：    底板：        外置芯片            网卡（DM9000）            声卡            ADC            电源            USB        接口：            串口            SD            LCD+触摸屏            摄像头            按键    核心板：        Soc(CPU+uart+timer)        DDR        Nand</code></pre><h2 id="二、嵌入式系统的演进方式"><a href="#二、嵌入式系统的演进方式" class="headerlink" title="二、嵌入式系统的演进方式"></a>二、嵌入式系统的演进方式</h2><pre><code>1、以单芯片为核心、可编程控制器形式存在的    没有操作系统支持    软件以汇编为主    功能单一、处理效率低、存储器容量小、没有外部接口    使用简单、价格低    单片机2、以嵌入式CPU为基础，简单操作系统为核心    CPU种类多、通用性弱    系统开销小，效率高    具有一定的兼容性和扩展性    用户的体验不好，交互界面不够友好3、以嵌入式操作系统为标志    兼容性好，适用于不同的平台    系统开销小、效率高、具有高度模块化及拓展性    图形界面、用户界面友好4、以物联网为标志    以5G为基础，将传感器技术与传统的嵌入式技术相结合    小型化、智能化、网络化、可视化、低功耗、绿色环保    多核技术、云计算、大数据、人工智能相结构</code></pre><h2 id="三、ARM处理器介绍"><a href="#三、ARM处理器介绍" class="headerlink" title="三、ARM处理器介绍"></a>三、ARM处理器介绍</h2><pre><code>1、发展历史    ARM的前身是艾康电脑，于1978年成立于英国剑桥。    1980年苹果公司与艾康电脑合作开发新版的CPU，于1985年发布了全球第一款商用RISC处理器。    1990年艾康电脑财务危机，接受苹果公司的投资，分割出独立子公司ARM（Advanced RISC Machine）。    之后发布了一系统的RISC处理器设计方案。2、商业模式和生态系统    ARM之前的半导休行业        Intel、ADM、Motorola这些公司都是自己设计IC，自己设计芯片、自己生产、自己销售。    ARM的商业模式        ARM只负责IC设计，销售自己的IP设计    自己不生产芯片，而是把IP设计授权其它的半导体生产商，收取专利费。        因此严格来说ARM不是半导休厂商，而是一家设计公司。    ARM的启示        1、不要抱怨劣势，有时候反而可能是机会。        2、想成功，要先学习帮助别人，成全别人。        3、一个成熟社会的标志就是分工不断的细化。3、为什么选择三星    1、在中国的使用广泛，有良好的企业应用基础。    2、学习资料多，便于学习。    3、开发板和方案多，软硬件平台好找。    4、体系典型，适用于学习。</code></pre><h2 id="四、ARM的体系结构"><a href="#四、ARM的体系结构" class="headerlink" title="四、ARM的体系结构"></a>四、ARM的体系结构</h2><pre><code>1、ARM的工作模式    用户模式    系统模式    快速中断模式    外部中断模式    特权模式    快速模式    未定义模式    除用户模式外，其它被称为特权模式    用户模式和系统模式外，其它被称为异常模式2、ARM的寄存器    一共37个寄存器，用户模式和系统模式可以使用17个，其它模式可以使用18个（17+状态寄存器的备份）。    r0~r7：所有模式共用    r8~r12：快速中断模式有它私有的，其它模式共用。    r13~r14：用户模式和系统模式共用，其它模式有私有的。    r15、cpsr：所有模式共用        r15也叫pc：程序计数器，它记录着下一条要执行的程序，可以被赋值，这样就实现了跳转。        cpsr：用户来记录上一条指令的执行状态，进位、溢出、零、负数、当前模式，只有12位有效，其它位目前保留。    spsr：用户模式和系统模式下没有，其它模式有私有的。        与cpsr的格式一样，它是用来备份用户模式和系统模式的cpsr。</code></pre><h2 id="五、流水线"><a href="#五、流水线" class="headerlink" title="五、流水线"></a>五、流水线</h2><pre><code>一条指令的执行需要六个步骤：    1、取指    2、译码    3、取数    4、计算    5、存储    6、回写如果只是按顺序执行，那么执行其中一项操作时其它硬件都处于空闲状态，因此ARM引入了流水线的概念，每个控制单元只负责干一件事情，这样理论上，三级流水线就提高了三倍的性能，而5级流水线就提高了五倍的性能。但实际情况其实达不到，因为流水线会被打断、暂停。比如：    bl func //跳转指令    ldr r0,[r0,#0]    add r0,r0,r1 //在5级流水线上产生</code></pre><h2 id="六、ARM处理器寻址方式"><a href="#六、ARM处理器寻址方式" class="headerlink" title="六、ARM处理器寻址方式"></a>六、ARM处理器寻址方式</h2><pre><code>1.立即寻址：#1002.寄存器寻址：r0，把寄存器当变量使用3.寄存器间接寻址：[r0]，把寄存器当指针变量使用，*r04.寄存器偏移寻址：r0 &lt;&lt; n，对寄存器进行左移或右移操作5.基址变址寻址：[r0,#1]，相当于对指针变量进行加减操作，*(r0+1);6.多寄存器寻址：寄存器的批量操作，类似于数组初始化操作7.堆栈寻址：在ARM汇编语句中也可以使用堆内存和栈内存，但前提是要设置好堆内存和栈内存的基地址，然后就可以向堆内存和栈内存读取、写入数据。</code></pre><h2 id="七、ARM指令集"><a href="#七、ARM指令集" class="headerlink" title="七、ARM指令集"></a>七、ARM指令集</h2><pre><code>1、ARM指令的格式    &lt;opcode&gt; {&lt;cond&gt;}{S} &lt;Rd&gt;,&lt;Rn&gt; &lt;operand2&gt;...    opcode 指令码    cond 条件码    S 是否影响状态寄存器    Rd 目标寄存器    Rn 源寄存器    {} 可以省略，而&lt;&gt;必须要有的2、RM指令条件执行及标志位    CMP会自动把比较结果存储到状态寄存器    而数据处理指令需要在指令反加S才会把计算结果存储到状态寄存器。    EQ 相等    NE 不等3、跳转指令    B 目标地址，是一种相对地址跳转，在当前地址的基础上加一个偏移值，进行跳转，这种跳转速度比较快，但是跳转的范围有限，正负32M以内。    BL 目标地址，是一种绝对地址跳转，需要是完整的一个地址，在跳转前会把下一条指令的地址存储到r14中，然后跳转到目标位置执行，当执行完成后可以从r14中恢复到pc中，这样就实现了返回。    BLX 功能与BL类似，但会从ARM（32位状态），切换到Thumb（16位状态）。    BX 功能与B类似，但会从ARM（32位状态），切换到Thumb（16位状态）。4、数据处理指令    MOV r0,#100 &lt;=&gt; r0 = 100    MOV R1,R3,LSL,#3 &lt;=&gt; r1 = r3 &lt;&lt; 3    MVN r0,#100 &lt;=&gt; r0 = ~100    ADD r0,r1,#110 &lt;=&gt; r0=r1+110    SUB R0,R0,#1 &lt;=&gt; r0-=1 反减    RSB R3,R1,#0xFF00 &lt;=&gt; r3=0xff00-r1    ADDS R1,R1,R2     ADC R0,R0,R2 带进位的加    SUBS R0,R0,R2    SBC  R1,R1,R3 带借位的减    RSBS R2,R0,#0    RSC  R3,R1,#0 带借位的反减    AND R0,R0,#3 &lt;=&gt; r0 = r0&amp;3    ORR R0,R0,#3 &lt;=&gt; r0 = r0|3    EOR R1,R1,#3 &lt;=&gt; r1 = r1^3    BIC R0,R0,#3 &lt;=&gt; r0 = r0&amp;(~3)    CMP R1,R0 把两个数的比较结果影响状态寄存器    CMN R1,R0 把两个数求反后比较，并把比较结果结果影响状态寄存器    TST R0,#0x01 把两个数进行按位与操作，并把计算结果影响状态寄存器    TEQ R1,R2 把两个数进行按位异或操作，并把计算结果影响状态寄存器5、程序状态寄存器传输指令    MRS R7,CPSR 把当前模式的状态寄存器备份到r7    MSR CPSR_cxsf,R3 把数据写入到状态寄存器        [31:24] 为条件标志位域，用f表示        [23:16] 为状态位域，用s表示        [15:8]  为扩展位域，用x表示        [7:0]   为控制位域，用c表示6、Load、Store指令    Load 从内存加载数据到寄存器        LDR R0,#8        LDR R0,[R1,#8] &lt;=&gt; r0 = *(r1+8);        DMFD R13,{R0,R4‐R12,LR}    Store 把寄存器中的数据写到内存        STR #8,R0        STR R0,[R1,#8]  *(r1+8) = r0        STMFD R13,{R0,R4‐R12,LR}    SWP r0,r1,r2 &lt;=&gt; r0 = r2; r2 = r1;7、中断指令    SWI 0-16777215 一旦这条指令就会进入中断模式。</code></pre><h2 id="电源锁定："><a href="#电源锁定：" class="headerlink" title="电源锁定："></a>电源锁定：</h2><pre><code>1、找到厂家提供的代码，保存为start.S文件。start:    ldr  r0, =0xe010e81c    ldr  r1, [r0]    orr  r1, r1, #0x300    orr  r1, r1, #0x1    str  r1, [r0]2、生成目标代码    arm-none-linux-gnueabi-gcc -c start.S -&gt;start.o3、生成可执行文件（设置代码段、不加入启动代码、不加入标准库）    arm-none-linux-gnueabi-gcc -Ttext 0xd0020010 -nostartfiles -nostdlib start.o -o lock4、从可执行文件中拷贝出纯二进制指令    arm-none-linux-gnueabi-objcopy -O binary lock lock.bin5、编译出添加校验和的工具（研究一下，明天我们自己写一份）    gcc mkv210_image.c -o mkv2106、为lock.bin添加校验和    ./mkv210 lock.bin lock_image.bin7、把添加校验和后的文件烧写到SD卡中执行，效果：开发板能够持续供电。</code></pre><h2 id="一、常用的存储介质"><a href="#一、常用的存储介质" class="headerlink" title="一、常用的存储介质"></a>一、常用的存储介质</h2><pre><code>内存：    SRAM：静态随机存储器，容量小，但价格高，不需要初始化上电直接使用，在使用过程中不需要做一维护操作。    DRAM：动态随机存储器，容量大，价格低，上电后不能直接使用，需要初始化，在使用过程中需要一些刷电操作，DDR，LDDR。    IROM：ROM只读存储器，IROM用于存储指令的只读存储器，一般用于固化一些初始化程序。外存：    NorFlash：容量小，价格高，优点是可以与CPU的总线直接相连，CPU上电后可以直接读取，因此可以用作启动介质。    NandFlash：（硬盘），容量大，价格低，缺点是不能总线式访问，也就是不能在CPU上电后直接使用，协议、时序复杂，一般都通过一个单独的控制器进行读写操作。 </code></pre><h2 id="二、各大类计算机的启动方式"><a href="#二、各大类计算机的启动方式" class="headerlink" title="二、各大类计算机的启动方式"></a>二、各大类计算机的启动方式</h2><pre><code>PC：小容量的NorFlash+大容量的硬盘+大容量的DRAM单片机：小容量的NorFlash+小容量的SRAM嵌入式：大容量的DRAM+大容量的NandFlash+Soc内置少量的SRAMS5PV210：大容量的DRAM+外接大容量的NandFlash+Soc内置少量的SRAM+Soc内置少量的IROM。</code></pre><h2 id="三、S5PV210的启动顺序"><a href="#三、S5PV210的启动顺序" class="headerlink" title="三、S5PV210的启动顺序"></a>三、S5PV210的启动顺序</h2><pre><code>通过S5PV210_iROM_ApplicationNote可以知道S5PV210的启动过程分为5大步骤：    1、BL0(从Nand拷贝小于96KB的程序到SRAM，然后跳转到BL1)    2、BL1（唤醒尝试闲置状态的SRAM，检查是是否是安全启动模式，然后跳转到BL2）    3、BL2（运行SRAM中的程序，初始化DRAM）    4、从Nand拷贝OS到DRAM    5、DRAM启动操作系统三星在S5PV210中固化一段程序到iROM中，负责完成一些初始化工作。    1、关闭看门狗定时器    2、初始化高速缓存    3、初始化栈内存基地址    4、初始化堆内存基地址    5、初始化块设备拷贝函数        通过函数指针实现的回调模式。        调用代码已经实现，而具体的函数功能还没有实现出来。    6、初始化系统时钟    7、拷贝BL1程序到SRAM内存    8、检查前16个字节，BL1程序的校验和。    9、检查是否是安全启动模式    10、跳转到BL1位置执行</code></pre><h2 id="练习：实现计算校验和和功能。"><a href="#练习：实现计算校验和和功能。" class="headerlink" title="练习：实现计算校验和和功能。"></a>练习：实现计算校验和和功能。</h2><pre><code>1、准备16kb的缓冲区2、缓冲区前16个字节，先定写入****************。3、从文件中读取内容，读取缓冲区16个字节后。4、把读取的内容，每个字节相加到一个8字节的整数，然后把它写入到8~15处。5、把缓冲区里的所有内存到新文件中。</code></pre><h2 id="四、GPIO介绍"><a href="#四、GPIO介绍" class="headerlink" title="四、GPIO介绍"></a>四、GPIO介绍</h2><pre><code>GPIO即通用输入/输出接口，简称GPIO。优点：低功耗、封装小、成本低、快速上市。</code></pre><h2 id="五、GPIO的寄存器"><a href="#五、GPIO的寄存器" class="headerlink" title="五、GPIO的寄存器"></a>五、GPIO的寄存器</h2><pre><code>    GPx0CON 控制寄存器，用于设置GPIO接口的工作模式        0000 = Input         0001 = Output        0010 = 特殊功能        0011 ~ 1110 = Reserved    GPx0DAT 数据寄存器        根据控制寄存器的配置，来决定DAT寄存器的用法。        Input 读取DAT中的数据，用来获取外部处于什么状态。        Output 向DAT写入数据，写入0则输出低电流，写入1则输出高电流。    GPx0PUD 上/下拉电阻寄存器        上/下拉电阻寄存器的作用，当GPIO接口既不输入也不输出，的状态，然后就可以产拉电阻，让电路处于高阻状态，相当于电路是断的。</code></pre><h2 id="六、通过GPIO控制LED"><a href="#六、通过GPIO控制LED" class="headerlink" title="六、通过GPIO控制LED"></a>六、通过GPIO控制LED</h2><pre><code>1、通过阅读电路原理图找到硬件具体的接口。2、通过阅读核心版电路图找到接口对应的GPIO编号。3、阅读CPU芯片手册，找到对应地址，计算出相应的位以后要赋值的数据。    GPJ0_3 接口要处于低电流状态，然后LED灯才会亮。    GPJ0CON Address = 0xE020_0240         [13~15]位 在不改变其它二进制位的情况下赋值为:0001b    GPJ0DAT Address = 0xE020_0244        [3]位 在不改变其它二进制位的情况下赋值为:0，让GPJ0_3输出低电流    GPJ0PUD Address = 0xE020_0248        [6~7]位 在不改变其它二进制位的情况下赋值为:00，禁用上/下拉电阻。</code></pre><h2 id="七、汇编语言调用C函数"><a href="#七、汇编语言调用C函数" class="headerlink" title="七、汇编语言调用C函数"></a>七、汇编语言调用C函数</h2><pre><code>C代码的执行需要内存划分局域，可以借助链接脚本来规划内存的分布。链接地址：我们希望程序在什么地址下执行，然后编译时编译就会以此地址计算相关跳转语句。运行地址：程序实际运行时，所在的地址，运行地址如果和实际地址不匹配可能会出现跳转错误。链接脚本能干什么：链接脚本就是一个规则文件，可以用它来指挥链接器的工作，链接器会根据链表脚本中的内存，合并目标文件，最终生成可执行程序。链接脚本内容：    SECTIONS{ //所有内容都会被它包含        .代表当前位置        = 用来赋值        .text 表示代码段        .data 表示数据段        .bss  表示静态数据段    }</code></pre><h2 id="一、串口通信的优点"><a href="#一、串口通信的优点" class="headerlink" title="一、串口通信的优点"></a>一、串口通信的优点</h2><pre><code>串口通信以字节为单位收发数据，但确是使用一根线收一要线发，这样的好处是可以传输的距离很远，而且通信简单。串口通信是嵌入式开发中非常常用的调试设备的方式。</code></pre><h2 id="二、串口通信的重要参数"><a href="#二、串口通信的重要参数" class="headerlink" title="二、串口通信的重要参数"></a>二、串口通信的重要参数</h2><pre><code>1、波特率：该参数表示串口每秒传输的比特位数。    常用9600、115200，通信时传输距离越长，波特率就要越低。2、数据位    表示在收到的数据包中，单纯的数据点多少位，如果仅传输标准的ASCII表中的字符（0~127），那么7位就够，如果是带扩展的则需要8位（0~255）。3、奇偶校验位    通过统计数据中的高或低的个数，来实现数据检验的一种方式。如果常见的检测方式有：偶校验、奇校验、标记等方式。4、停止位    用于标志一个数据的传输结构，可以取1位或者两位，它不仅标志着数据包的传输结束，也给通信双方提供的校正时钟的机会。5、流控制    在双方通信时，由于速度不匹配，比如发送方比接收方速度快，这样可能会造成接收方缓冲区中的数据还没有读取，新的发送数据再次来临，这样就会造成数据被覆盖。    所谓的流控制就增加一个响应消息，用于标志接收方是否读取缓冲区里的数据。</code></pre><h2 id="二、通用异步接收器"><a href="#二、通用异步接收器" class="headerlink" title="二、通用异步接收器"></a>二、通用异步接收器</h2><pre><code>UART（通用异步接收器）：是一种通用的串行数据总线，用于异步通信，总共有四个单元组成，分别是波特率发生单元、控制单元、发送器、接收器。volatileUART寄存器：    1、收发数据的GPIO接口的工作模式设置。        GPA1CON, R/W, Address = 0xE020_0020    2、ULCON2, R/W, Address = 0xE290_0800        不使用红外线传输        无奇偶校验        1个停止位        8个数据们    3、UCON2, R/W, Address = 0xE290_0804        读取模式选择中断或轮询        发送模式选择中断或轮询        不发生中断信息        确定使用轮询        错误处理不使用中断        超时不产生中断        读取数据中断、发送数据中断        时钟选择默认        DMA的读写缓冲区大小采用默认    4、UTRSTAT2, R, Address = 0xE290_0810        读缓冲区是否为空        发送是否完成    5、UTXH2, W, Address = 0xE290_0820        发送缓冲，直接把要发送的数据写入此寄存器    6、URXH2, R, Address = 0xE290_0824        接收到的数据会存储到此寄存器中    7、UBRDIV2, R/W, Address = 0xE290_0828         DIV = (时钟频率 / (波特率 x 16)) -1    8、UDIVSLOT2, R/W, Address = 0xE290_082C        UBRDIV2、UDIVSLOT2配合设置波特率        (时钟频率 / (波特率 x 16))-1结果的小数部分*16，</code></pre><h2 id="一、中断的基本概念"><a href="#一、中断的基本概念" class="headerlink" title="一、中断的基本概念"></a>一、中断的基本概念</h2><pre><code>1、什么是中断    当计算机在执行程序时，当出现异常情况（信号），计算机停止当前程序的运行，转而去处理异常情况，处理完成后再返回继续执行，这种情况叫中断。2、中断的处理过程    在S5PV210中，ARM设计了一个完成的中断系统，中断程序独立于主程序之外，中断响应过程是：    1、主程序正常在执行，中断事件、中断源产生一个中断请求。    2、CPU接收到中断请求后，将主程序暂停，产生一个中断点。    3、中断系统响应中断请求，转而执行中断服务程序。    4、执行完成中断响应程序后返回到主程序的中断点处，继续执行主程序。3、中断系统的优点    现在绝大多数的嵌入式芯片都具有中断系统，使用它的好处：    1、实现实时处理，根据CPU的内部功能模块（硬件上的）来响应中断请求，为其服务，不需要主程序做任务的监控，因此可以实时处理任务。    2、实现分时操作，根据需要设计若干个中断源，这样就可以同时响应多个外部设备的中断请求，只有在外部设备产生中断时，CPU才转而为它服务，这样可以让多个外部设备同时工作，实现分时操作。    3、故障处理，与轮询模式相比，中断处理异常情况、或故障时会更及时，可以实现紧急故障及时处理。    4、待机唤醒，嵌入式设备最大的一个特点就是低功耗，因此就需要具有休眠的功能，而从休眠状态快速切换到正常工作模式，就是通过中断实现的。4、中断源、中断信号、中断向量    中断源：顾名思义，就是能够产生中断的源头（能够产生中断的一些内设或外设），S5PV210中有128个中断源，但有一些是空的，如：定时器、串行通信、数模转换器。    中断信号：        1、脉冲信号（上升或下降）        2、电平信号（高电平或低电平）        3、电平变化（高电平转低电平或低电平转高电平）    中断向量：        也叫异常向量，以CPU规则一个位置用于存储各异常模式的响应位置，而每个模式占4字节，因此无法直接存储异常响应程序，而只能存储一个地址，该地址指向真正的异常响应程序。</code></pre><h2 id="二、SDRAM内存"><a href="#二、SDRAM内存" class="headerlink" title="二、SDRAM内存"></a>二、SDRAM内存</h2><pre><code>1、SDRAM简介    同步动态随机存取内存（synchronous dynamic random-access memory）简称SDRAM。    DDR：就是DDR SDRAM，是SDRAM的升级版，意思是双倍速的SDRAM。    DDR有好多种代：DDR1、DDR2、DDR3、DDR4、LPDDR（低功耗的LPDDR）。2、SDRAM的特性    SRAM （静态随机存取存储器）：只需要保持通电即可，在使用过程中不需要做额外的操作，而SRAM在使用过程中需要每隔一段赶时间进行刷新一次，这样的就浪费了大量的时间。    SRAM：容量小、价格高、速度快、上电就可用、掉电丢失、随机读写、总线式访问。    SDRAM：容量大、价格低、动态刷新、需要初始化、速度慢、掉电丢失、随机读写、总线式访问。    由于SRAM和SDRAM的特性，所以就导致启动过程比较怪异、复杂，我们在裸机阶段学习一些硬件其实是为了学习uboot做准备，而学习uboot是为了学习内核，而学习内核的目的是为了编写驱动程序还有学习内核中优秀的代码、算法。3、SDRAM芯片介绍    PS：芯片的发展趋势，把很多外部芯片的功能集成到CPU内部形成SOC    SDRAM芯片属于外设，也就是接在CPU外面，因为SDRAM不光要频繁的读写数据还要定时刷新，所以导致SDRAM芯片的温度特别高，而SOC本身的温度就特别高，如果两者结合在一起，估计可以煎鸡蛋。    开发板的原理上标注的是K4T1G164QQ，但实际上不是这个款芯片，而是一款与K4T1G164QQ兼容的国内半导体厂商生产的芯片。    全球做SDRAM芯片的厂商不多，一般都是二、三线厂家向一线厂家看齐，目的是为了兼容一线厂家的芯片，然后让在意成本的厂商选择它替代一线厂家的芯片，而二、三线厂家没有创新、研发、测试的成本，因此价格比较低。    由于这些行业现状导致SDRAM芯片的标准比较统一。4、原理图中的SDRAM    由于S5PV210中只有两个DRAM接口，但通过查看原理图会发现有四个SDRAM芯片，而九鼎其实是通过并联方式把SDRAM芯片两两连接在一起，形成两个32们的内存芯片。    DRAM0接口的范围：0x20000000~0x40000000 512M    DRAM1接口的范围：0x40000000~0x80000000 1024M    S5PV210一共可以支持1.5G的内存,而九鼎接的每个SDRAM芯片只有128M，也就相当两个256M，共512M内存。</code></pre><h2 id="三、重定位"><a href="#三、重定位" class="headerlink" title="三、重定位"></a>三、重定位</h2><pre><code>1、链接地址    程序编译时指定的地址，通过-Ttext参数指定的地址，它是理论上程序在运行时所处的地址。2、加载地址    程序在运行时实际所处理的地址。    注意：链接地址与加载地址不能保障一定一样。3、位置有关代码    如果程序的链接地址与加载地址不符，程序就无法运行，或运行错误这中代码叫位置有关代码。4、位置无关代码    如果程序的链接地址与加载地址不符，程序依然能够正确运行，这种代码叫位置无关代码。    可以简单的认为使用了BL的代码叫位置有关代码，而没有使用BL的叫位置无关代码。5、再论S5PV210的启动过程    1、iROM中的固定程序会从SD中拷贝16~96KB的程序先进行环境初始化（设置时钟、初始化内存、开看门狗等）。    2、然后再把剩余的程序从SD中拷贝到SDRAM中。    3、然后把开发板上的所以资源都初始化好，为OS的运行做好准备。    4、然后拷贝OS到SDRAM中，启动OS。6、什么是重定位    而uboot为了兼容大多数CPU并不会这样，而先把uboot的前96KB拷贝到SRAM中，然后初始化，再把完整的uboot拷贝到SDRAM中。    因此uboot的前96KB的程序就会在不同的位置运行两次，所以一定会出现链接地址与加载地址不符的情况。    具体的做法是先把uboot拷贝到SRAM中只运行当量的位置无关代码，然后再把程序拷贝到正确的位置，种行为叫重定位。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> 九鼎创展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gSOAP安装配置+使用案例参考+参考链接</title>
      <link href="/blog/2019/11/25/gsoap-an-zhuang-pei-zhi-shi-yong-an-li-can-kao-can-kao-lian-jie/"/>
      <url>/blog/2019/11/25/gsoap-an-zhuang-pei-zhi-shi-yong-an-li-can-kao-can-kao-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建与配置"><a href="#环境搭建与配置" class="headerlink" title="环境搭建与配置"></a>环境搭建与配置</h2><p>gSOAP下载地址：<a href="https://sourceforge.net/projects/gsoap2/files/" target="_blank" rel="noopener">https://sourceforge.net/projects/gsoap2/files/</a><br>相关配置参考：<a href="https://blog.csdn.net/hktkfly6/article/details/78321908" target="_blank" rel="noopener">gsoap_2.8.33.zip安装与编译</a><br>配置完成后，根据官网文档：<a href="https://www.genivia.com/dev.html" target="_blank" rel="noopener">https://www.genivia.com/dev.html</a><br>编写一个hello进行测试</p><h2 id="gSOAP的使用案例参考"><a href="#gSOAP的使用案例参考" class="headerlink" title="gSOAP的使用案例参考"></a>gSOAP的使用案例参考</h2><p>新建文件 <strong>hello.h</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// hello.h</span><span class="token keyword">int</span> <span class="token function">ns__hello</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>string name<span class="token punctuation">,</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>string<span class="token operator">&amp;</span> greeting<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>终端运行 <code>soapcpp2 hello.h</code> ，如果你不在此程序的路径，则输入完整路径编译<br>如 <code>/usr/local/gSOAP/bin/soapcpp2 hello.h</code><br><img src="https://img-blog.csdnimg.cn/20191125101610120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们新建 <strong>hello.cpp</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// hello.cpp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapH.h"</span>  </span><span class="token comment" spellcheck="true">// include the generated source code headers</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ns.nsmap"</span> </span><span class="token comment" spellcheck="true">// include XML namespaces</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">soap_serve</span><span class="token punctuation">(</span><span class="token function">soap_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">ns__hello</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> std<span class="token operator">::</span>string name<span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> greeting<span class="token punctuation">)</span><span class="token punctuation">{</span>  greeting <span class="token operator">=</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>终端运行 <code>c++ -o hello.cgi hello.cpp soapC.cpp soapServer.cpp stdsoap2.cpp</code><br>报错如下<br><img src="https://img-blog.csdnimg.cn/20191125101818262.png" alt="在这里插入图片描述"><br>没有<strong>stdsoap2.cpp</strong>这个文件<br>这个文件可以在gSOAP解压后的文件夹里找到 gsoap-2.8/gsoap<br><img src="https://img-blog.csdnimg.cn/20191125101956121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们将 <strong>stdsoap2.cpp</strong> 和 <strong>stdsoap2.h</strong> 这两个文件拷贝到源程序的目录，再次执行</p><p><code>c++ -o hello.cgi hello.cpp soapC.cpp soapServer.cpp stdsoap2.cpp</code><br><img src="https://img-blog.csdnimg.cn/20191125102259568.png" alt="在这里插入图片描述"><br>编译完成 生成 <strong>hello.cgi</strong> 。</p><hr><p>看到 cgi程序，我就想到了之前我用的BOA，那么我们来试试看吧。<br>BOA相关参考：<a href="https://blog.csdn.net/Ikaros_521/article/details/102801453" target="_blank" rel="noopener">嵌入式web服务器BOA+CGI+HTML+MySQL项目实战——Linux</a><br>老规矩 运行boa</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ./boa</code></pre><p>将 cgi程序放在 /var/www/cgi-bin 目录下<br><img src="https://img-blog.csdnimg.cn/20191125103341242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后在浏览器访问我们的网址 <code>http://localhost:886/cgi-bin/hello.cgi</code><br>效果如下：<br><img src="https://img-blog.csdnimg.cn/2019112510343436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一个SOAP的XML，SOAP相关知识可以参考：<a href="https://www.runoob.com/soap/soap-tutorial.html" target="_blank" rel="noopener">SOAP菜鸟教程</a></p><hr><h2 id="如何实现和部署gSOAPWeb服务API"><a href="#如何实现和部署gSOAPWeb服务API" class="headerlink" title="如何实现和部署gSOAPWeb服务API"></a>如何实现和部署gSOAPWeb服务API</h2><p>回到官方文档   如何实现和部署gSOAPWeb服务API。其教程：<a href="https://www.genivia.com/tutorials.html" target="_blank" rel="noopener">传送门</a></p><p>终端运行 <code>wsdl2h -c -o calc.h http://www.genivia.com/calc.wsdl</code><br>同样，我的是<br><code>/usr/local/gSOAP/bin/wsdl2h -c -o calc.h http://www.genivia.com/calc.wsdl</code><br><img src="https://img-blog.csdnimg.cn/20191125104306549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>继续根据教程走<br>终端运行 <code>soapcpp2 -SL calc.h</code><br>同样，我的是 <code>/usr/local/gSOAP/bin/soapcpp2 -SL calc.h</code><br><img src="https://img-blog.csdnimg.cn/20191125104438805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>很顺利哈，我们继续。<br>官方教程让我们运行 <code>cc -o calc.cgi calccgi.c soapClient.c soapC.c stdsoap2.c</code><br><a href="https://www.cnblogs.com/zhouyinhui/archive/2010/02/01/1661078.html" target="_blank" rel="noopener">Linux 下 的 cc 和 gcc</a><br>这cc是个啥？我运行后。。。<br><img src="https://img-blog.csdnimg.cn/20191125104633382.png" alt="在这里插入图片描述"><br>又缺少文件了 后者我还能理解，前者这个文件从哪来的？<br>在哪也找不到 calccgi.c 这个文件，后来看了文档发现，官方提供了 此文件的超链接。。。<br>那么我们 从 <a href="https://www.genivia.com/files/calccgi.c" target="_blank" rel="noopener">https://www.genivia.com/files/calccgi.c</a> 复制代码，自建一个 <strong>calccgi.c</strong> 文件。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*    calccgi.c    Example calculator service in C    Compilation in C (see samples/calc/calc.h):    $ wsdl2h -c -o calc.h http://www.genivia.com/calc.wsdl    $ soapcpp2 -SL calc.h    $ cc -o calc.cgi calccgi.c stdsoap2.c soapC.c soapServer.c    where stdsoap2.c is in the 'gsoap' directory, or use libgsoap:    $ cc -o calc.cgi calccgi.c soapC.c soapServer.c -lgsoap--------------------------------------------------------------------------------gSOAP XML Web services toolsCopyright (C) 2001-2017, Robert van Engelen, Genivia, Inc. All Rights Reserved.This software is released under one of the following two licenses:GPL or Genivia's license for commercial use.--------------------------------------------------------------------------------GPL license.This program is free software; you can redistribute it and/or modify it underthe terms of the GNU General Public License as published by the Free SoftwareFoundation; either version 2 of the License, or (at your option) any laterversion.This program is distributed in the hope that it will be useful, but WITHOUT ANYWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR APARTICULAR PURPOSE. See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along withthis program; if not, write to the Free Software Foundation, Inc., 59 TemplePlace, Suite 330, Boston, MA 02111-1307 USAAuthor contact information:engelen@genivia.com / engelen@acm.org--------------------------------------------------------------------------------A commercial use license is available from Genivia, Inc., contact@genivia.com--------------------------------------------------------------------------------*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapH.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"calc.nsmap"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> soap soap<span class="token punctuation">;</span>  <span class="token function">soap_init1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>soap<span class="token punctuation">,</span> SOAP_XML_INDENT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">soap_serve</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* serve as CGI application */</span>  <span class="token function">soap_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">soap_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">soap_done</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">ns2__add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>soap<span class="token punctuation">;</span>  <span class="token operator">*</span>result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">ns2__sub</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>soap<span class="token punctuation">;</span>  <span class="token operator">*</span>result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">ns2__mul</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>soap<span class="token punctuation">;</span>  <span class="token operator">*</span>result <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">ns2__div</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token operator">*</span>result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">soap_malloc</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token function">SOAP_SNPRINTF</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;error xmlns=\"http://tempuri.org/\">Can't divide %f by %f&lt;/error>"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">soap_sender_fault</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token string">"Division by zero"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">ns2__pow</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>soap_errno <span class="token operator">==</span> EDOM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* soap_errno is like errno, but compatible with Win32 */</span>  <span class="token punctuation">{</span> <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">soap_malloc</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token function">SOAP_SNPRINTF</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;error xmlns=\"http://tempuri.org/\">Can't raise %f to %f&lt;/error>"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">soap_sender_fault</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token string">"Power function domain error"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>那么现在我们还缺少 <strong>soapClient.c</strong>，我们之前生成了 <strong>soapClient.cpp</strong> 文件<br>打开项目文件夹，我发现一个很尴尬的事情，我们生成了server的c和cpp文件，但client却只有c。<br><img src="https://img-blog.csdnimg.cn/20191125110549933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我无语了，那我就自建 soapClient.c，拷贝soapClient.cpp贴入soapClient.c。<br>再次运行 <code>cc -o calc.cgi calccgi.c soapClient.c soapC.c stdsoap2.c</code><br>报错如下：<br><img src="https://img-blog.csdnimg.cn/20191125111124629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>果然没有那么容易，看到 std::string，这事情不简单了。<br>我们重新执行 <code>/usr/local/gSOAP/bin/soapcpp2 calc.h</code><br>成功生成了 soapClient.c 文件了<br><img src="https://img-blog.csdnimg.cn/20191125111612525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但为什么官方提供的命令是加个 <strong>-SL</strong> ?<br>我查看了下载来的gSOAP文档：<a href="https://dl.pconline.com.cn/download/1448138.html" target="_blank" rel="noopener">太平洋那下载的，自行斟酌</a><br><img src="https://img-blog.csdnimg.cn/20191125111947631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们机翻一下看看， -S -L 是干什么的<br><img src="https://img-blog.csdnimg.cn/20191125112031448.png" alt="在这里插入图片描述"><br>只生成服务器端代码，官方教程为什么要这么做，不知道为啥，既然我们现在生成好了，我们再编译看看，终端运行 <code>cc -o calc.cgi calccgi.c soapClient.c soapC.c stdsoap2.c</code><br><img src="https://img-blog.csdnimg.cn/20191125112201364.png" alt="在这里插入图片描述"></p><h3 id="对‘soap-serve’未定义的引用"><a href="#对‘soap-serve’未定义的引用" class="headerlink" title="对‘soap_serve’未定义的引用"></a>对‘soap_serve’未定义的引用</h3><p>事情还是没有那么顺利，又报错了。<br>我们试试官网的 <a href="https://www.genivia.com/files/calc.h" target="_blank" rel="noopener">calc.h</a> 的源码贴入看看<br>再次执行 <code>/usr/local/gSOAP/bin/soapcpp2 calc.h</code><br><img src="https://img-blog.csdnimg.cn/20191125112555804.png" alt="在这里插入图片描述"><br>没有效果呀  ￣へ￣<br>会看之前的hello.cpp 却没有报错，区别就是c和cpp？<br>在 <strong>soapServer.cpp</strong> 中<br><img src="https://img-blog.csdnimg.cn/20191125140006682.png" alt="在这里插入图片描述"><br><strong>soapServer.c</strong> 中<br><img src="https://img-blog.csdnimg.cn/20191125140045965.png" alt="在这里插入图片描述"><br>而 soapClient.c和cpp压根没这函数？？？<br>那我们加入 <strong>soapServer.c</strong> 一起编译！</p><p><code>cc -o calc.cgi calccgi.c soapClient.c soapC.c stdsoap2.c soapServer.c</code><br><img src="https://img-blog.csdnimg.cn/20191125140336937.png" alt="在这里插入图片描述"><br>(⊙ˍ⊙)  错误消失了。。。  我服了<br>pow函数大家应该都比较熟悉，链接 pow 所在的数学库 libm</p><p><code>cc -o calc.cgi calccgi.c soapClient.c soapC.c stdsoap2.c soapServer.c -lm</code><br><img src="https://img-blog.csdnimg.cn/20191125140721529.png" alt="在这里插入图片描述"><br>总算过去了！ ╥﹏╥…<br>抛到BOA看看<br><img src="https://img-blog.csdnimg.cn/20191125141630416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>和hello.cgi 一样。</p><p>回到官方教程</p><h3 id="部署CGI服务"><a href="#部署CGI服务" class="headerlink" title="部署CGI服务"></a>部署CGI服务</h3><p>我事先已经装好了Apache，那我们继续往下走<br>要编译C服务器：</p><p><code>cc -o calcserver.cgi calcserver.c soapC.c soapServer.c stdsoap2.c</code><br>恩，calcserver.c 这文件又没有。同样官方给了链接，进去看看：<a href="https://www.genivia.com/examples/calc/index.html" target="_blank" rel="noopener">传送门</a><br><img src="https://img-blog.csdnimg.cn/20191125142133734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这 <strong>typemap.dat</strong> 在gSOAP中可以搜到，我们先手动建个 <strong>calc.h</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//gsoap ns service name:            calc Simple calculator service described at https://www.genivia.com/dev.html</span><span class="token comment" spellcheck="true">//gsoap ns service protocol:        SOAP</span><span class="token comment" spellcheck="true">//gsoap ns service style:           rpc</span><span class="token comment" spellcheck="true">//gsoap ns service encoding:        encoded</span><span class="token comment" spellcheck="true">//gsoap ns service namespace:       http://websrv.cs.fsu.edu/~engelen/calc.wsdl</span><span class="token comment" spellcheck="true">//gsoap ns service location:        http://websrv.cs.fsu.edu/~engelen/calcserver.cgi</span><span class="token comment" spellcheck="true">//gsoap ns schema namespace:        urn:calc</span><span class="token comment" spellcheck="true">//gsoap ns service method: add Sums two values</span><span class="token keyword">int</span> <span class="token function">ns__add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//gsoap ns service method: sub Subtracts two values</span><span class="token keyword">int</span> <span class="token function">ns__sub</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//gsoap ns service method: mul Multiplies two values</span><span class="token keyword">int</span> <span class="token function">ns__mul</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//gsoap ns service method: div Divides two values</span><span class="token keyword">int</span> <span class="token function">ns__div</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//gsoap ns service method: pow Raises a to b</span><span class="token keyword">int</span> <span class="token function">ns__pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其他都不管，来到client</p><h3 id="为客户端应用程序构建步骤"><a href="#为客户端应用程序构建步骤" class="headerlink" title="为客户端应用程序构建步骤"></a>为客户端应用程序构建步骤</h3><p>新建 <strong>calcclient.c</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapH.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"calc.nsmap"</span></span><span class="token comment" spellcheck="true">/* the Web service endpoint URL */</span><span class="token keyword">const</span> <span class="token keyword">char</span> server<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://websrv.cs.fsu.edu/~engelen/calcserver.cgi"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> soap <span class="token operator">*</span>soap <span class="token operator">=</span> <span class="token function">soap_new1</span><span class="token punctuation">(</span>SOAP_XML_INDENT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* new context */</span>  <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: [add|sub|mul|div|pow] num num\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  a <span class="token operator">=</span> <span class="token function">strtod</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> <span class="token function">strtod</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token punctuation">:</span>      <span class="token function">soap_call_ns__add</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token punctuation">:</span>      <span class="token function">soap_call_ns__sub</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token punctuation">:</span>      <span class="token function">soap_call_ns__mul</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token punctuation">:</span>      <span class="token function">soap_call_ns__div</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'p'</span><span class="token punctuation">:</span>      <span class="token function">soap_call_ns__pow</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unknown command\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>soap<span class="token operator">-></span>error<span class="token punctuation">)</span>    <span class="token function">soap_print_fault</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %g\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">soap_destroy</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* delete deserialized objects */</span>  <span class="token function">soap_end</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* delete heap and temp data */</span>  <span class="token function">soap_free</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* we're done with the context */</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>使用以下方法为客户端生成服务和数据绑定接口：</strong></p><p><code>soapcpp2 -c -r -CL calc.h</code><br><img src="https://img-blog.csdnimg.cn/20191125142728880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有产生警告，暂时不管。</p><p><strong>构建示例客户端应用程序</strong></p><p><code>cc -o calcclient calcclient.c stdsoap2.c soapC.c soapClient.c</code><br><img src="https://img-blog.csdnimg.cn/20191125142858180.png" alt="在这里插入图片描述"><br>没有问题。</p><h3 id="实现CGI服务器应用程序"><a href="#实现CGI服务器应用程序" class="headerlink" title="实现CGI服务器应用程序"></a>实现CGI服务器应用程序</h3><p>新建 <strong>calcserver.c</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapH.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"calc.nsmap"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> soap <span class="token operator">*</span>soap <span class="token operator">=</span> <span class="token function">soap_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* new context */</span>  <span class="token function">soap_serve</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* serve CGI request */</span>  <span class="token function">soap_destroy</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* delete deserialized objects */</span>  <span class="token function">soap_end</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* delete heap and temp data */</span>  <span class="token function">soap_free</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* we're done with the context */</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* service operation function implementation */</span><span class="token keyword">int</span> <span class="token function">ns__add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">*</span>result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* service operation function implementation */</span><span class="token keyword">int</span> <span class="token function">ns__sub</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">*</span>result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* service operation function implementation */</span><span class="token keyword">int</span> <span class="token function">ns__mul</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">*</span>result <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* service operation function implementation */</span><span class="token keyword">int</span> <span class="token function">ns__div</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token operator">*</span>result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token function">soap_sender_fault</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token string">"Division by zero"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* service operation function implementation */</span><span class="token keyword">int</span> <span class="token function">ns__pow</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>soap<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>soap_errno <span class="token operator">==</span> EDOM<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* soap_errno is like errno, but portable */</span>    <span class="token keyword">return</span> <span class="token function">soap_sender_fault</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token string">"Power function domain error"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> SOAP_OK<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>官方教程说<br><img src="https://img-blog.csdnimg.cn/20191125143241883.png" alt="在这里插入图片描述"><br>那我们继续往下走。</p><h3 id="实现独立的服务器应用程序"><a href="#实现独立的服务器应用程序" class="headerlink" title="实现独立的服务器应用程序"></a>实现独立的服务器应用程序</h3><p>此示例展示了一个独立的迭代服务器，该服务器接受主机端口上的传入请求。该程序与CGI服务相同，但在循环中通过套接字进行服务请求调度除外：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapH.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"calc.nsmap"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"plugin/threads.h"</span></span><span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">process_request</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> soap <span class="token operator">*</span>soap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> soap<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>  <span class="token function">THREAD_DETACH</span><span class="token punctuation">(</span>THREAD_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>soap<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">soap_serve</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_destroy</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_end</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_free</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  SOAP_SOCKET m<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">/* master socket */</span>  <span class="token keyword">struct</span> soap <span class="token operator">*</span>soap <span class="token operator">=</span> <span class="token function">soap_new1</span><span class="token punctuation">(</span>SOAP_IO_KEEPALIVE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* new context with HTTP keep-alive enabled */</span>  soap<span class="token operator">-></span>send_timeout <span class="token operator">=</span> soap<span class="token operator">-></span>recv_timeout <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 5 sec socket idle timeout */</span>  soap<span class="token operator">-></span>transfer_timeout <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/* 30 sec message transfer timeout */</span>  m <span class="token operator">=</span> <span class="token function">soap_bind</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">soap_valid_socket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">soap_valid_socket</span><span class="token punctuation">(</span><span class="token function">soap_accept</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      THREAD_TYPE tid<span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token operator">*</span>arg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">soap_copy</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* use updated THREAD_CREATE from plugin/threads.h https://www.genivia.com/files/threads.zip */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">THREAD_CREATE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>process_request<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">soap_print_fault</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">soap_destroy</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* delete deserialized objects */</span>  <span class="token function">soap_end</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* delete heap and temp data */</span>  <span class="token function">soap_free</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* we're done with the context */</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* service operation functions */</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>这个暂且忽略，我们往下走</p><h3 id="为服务器应用程序构建步骤"><a href="#为服务器应用程序构建步骤" class="headerlink" title="为服务器应用程序构建步骤"></a>为服务器应用程序构建步骤</h3><p>使用以下方法为服务器端生成服务和数据绑定接口：</p><p><code>soapcpp2 -c -r -SL calc.h</code></p><p><img src="https://img-blog.csdnimg.cn/20191125144147396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>同样有警告<br><img src="https://img-blog.csdnimg.cn/20191125144226884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们继续往下<br><strong>构建示例服务器应用程序：</strong></p><p><code>cc -o calcserver calcserver.c stdsoap2.c soapC.c soapServer.c</code><br><img src="https://img-blog.csdnimg.cn/20191125144320132.png" alt="在这里插入图片描述"><br>修改为 <code>cc -o calcserver calcserver.c stdsoap2.c soapC.c soapServer.c -lm</code><br><img src="https://img-blog.csdnimg.cn/20191125144354731.png" alt="在这里插入图片描述"><br>官方教程接近尾声</p><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><p><img src="https://img-blog.csdnimg.cn/20191125144505380.png" alt="在这里插入图片描述"><br>根据官方教程 我们执行 calcclient程序 <code>./calcclient add 2 3</code><br><img src="https://img-blog.csdnimg.cn/20191125144557279.png" alt="在这里插入图片描述"><br>成功计算出结果了。恩 这和 calcserver 有关系吗？<br>我们删了 <strong>calcserver</strong> 看看，恩 你会发现 还是能输出结果。。。</p><hr><p>回到前一个<a href="https://www.genivia.com/tutorials.html" target="_blank" rel="noopener">教程</a><br>要编译C服务器：</p><p><code>cc -o calcserver.cgi calcserver.c soapC.c soapServer.c stdsoap2.c</code><br><img src="https://img-blog.csdnimg.cn/20191125144943135.png" alt="在这里插入图片描述"><br>同样我们加上 -lm<br><code>cc -o calcserver.cgi calcserver.c soapC.c soapServer.c stdsoap2.c -lm</code><br><img src="https://img-blog.csdnimg.cn/20191125145011738.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191125145050913.png" alt="在这里插入图片描述"><br>我们直接执行这条命令看看 <code>./calcserver.cgi &lt; calc.add.req.xml</code><br><img src="https://img-blog.csdnimg.cn/20191125145132290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这将显示自动生成的示例soap/xml消息的服务响应。<strong>calc.add.req.xml</strong><br>那依照教程，将 cgi 放在cgi-bin 下，我的是BOA<br><img src="https://img-blog.csdnimg.cn/20191125145433832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们提供浏览器访问看看<br><img src="https://img-blog.csdnimg.cn/20191125145510198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>效果还是一样。<br>那差不多就这样结束了，官方教程还有一大堆，可自行查阅：<a href="https://www.genivia.com/tutorials.html" target="_blank" rel="noopener">传送门</a><br><strong>目录：</strong></p><ul><li>了解XML SOAP、REST、WSDL和XML模式</li><li>如何实现和部署gSOAPWeb服务</li><li>如何链接多个C++服务类以接受一个服务器端口上的请求</li><li>如何使独立服务为HTTPGET请求提供服务</li><li>如何使独立服务为HTTP POST、PUT、修补和删除请求提供服务</li><li>如何在gSOAP中使用JSON和JSONPath</li><li>如何通过HTTP代理连接并使用HTTP承载或基本/摘要身份验证、NTLM身份验证和WS-安全身份验证</li><li>如何用指数退避重试连接</li><li>如何处理HTTP重定向</li><li>如何启用HTTP访问控制(CORS)标头</li><li>如何添加自定义HTTP报头</li><li>如何在gSOAP客户机中使用curl</li><li>如何在客户端和独立的gSOAP服务器上使用HTTPS tls/ssl</li><li>如何使用OpenSSL启用FIPS 140-2</li><li>如何使用OpenSSL和gSOAP创建自签名证书</li><li>如何将PEM格式的证书转换为MS Windows的CER格式</li><li>如何使用GNUTLS创建自签名证书</li><li>如何通过超时和错误处理程序增强应用程序的健壮性</li><li>如何设置和获取SOAP头</li><li>如何设置和获取SOAP故障</li><li>如何通过包装xml请求和响应元素从XSD创建新的SOAP服务操作</li></ul><hr><h2 id="别人的案例"><a href="#别人的案例" class="headerlink" title="别人的案例"></a>别人的案例</h2><p>我们看看别人的案例试试 <a href="https://blog.csdn.net/hktkfly6/article/details/78321908" target="_blank" rel="noopener">gsoap_2.8.33.zip安装与编译</a></p><h3 id="新建-add-h"><a href="#新建-add-h" class="headerlink" title="新建 add.h"></a>新建 <code>add.h</code></h3><p>复制过来运行发现有问题，改为</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//gsoapopt cw</span><span class="token comment" spellcheck="true">//gsoap ns2 schema namespace: urn:add</span><span class="token comment" spellcheck="true">//gsoap ns2 schema form: unqualified</span><span class="token comment" spellcheck="true">//gsoap ns2 service name: add</span><span class="token comment" spellcheck="true">//gsoap ns2 service type: addPortType   </span><span class="token comment" spellcheck="true">//add http://schemas.xmlsoap.org/soap/encoding/</span><span class="token comment" spellcheck="true">//gsoap ns2  service method-action:     add ""</span><span class="token keyword">int</span> <span class="token function">ns2__add</span><span class="token punctuation">(</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> sum <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">ns2__sub</span><span class="token punctuation">(</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后 执行 <code>/usr/local/gSOAP/bin/soapcpp2 -c add.h</code><br><img src="https://img-blog.csdnimg.cn/20191125151345183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="服务端，创建-addserver-c"><a href="#服务端，创建-addserver-c" class="headerlink" title="服务端，创建 addserver.c"></a>服务端，创建 <strong>addserver.c</strong></h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapH.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"add.nsmap"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token keyword">struct</span> soap add_soap<span class="token punctuation">;</span>    <span class="token function">soap_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_set_namespaces</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">,</span> namespaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: %s &lt;server_port> /n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    m <span class="token operator">=</span> <span class="token function">soap_bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">soap_print_fault</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Socket connection successful: master socket = %d\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          s <span class="token operator">=</span> <span class="token function">soap_accept</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">soap_print_fault</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Socket connection successful: slave socket = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">soap_serve</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">soap_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">ns2__add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>add_soap<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">ns2__sub</span><span class="token punctuation">(</span><span class="token keyword">struct</span> soap <span class="token operator">*</span>sub_soap<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>sub <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="客户端，新建-addclient-c"><a href="#客户端，新建-addclient-c" class="headerlink" title="客户端，新建 addclient.c"></a>客户端，新建 <strong>addclient.c</strong></h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapStub.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"add.nsmap"</span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>server<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>server<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> server<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num1<span class="token punctuation">;</span>    <span class="token keyword">int</span> num2<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: %s &lt;ip:port> num1 num2 /n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num2 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"soap error, errcode=%d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"soap error, errcode=%d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d - %d = %d\n"</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>server<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">struct</span> soap add_soap<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">soap_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_set_namespaces</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">,</span> namespaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_call_ns2__add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"server is %s, num1 is %d, num2 is %d\n"</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>add_soap<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"soap error: %d, %s, %s\n"</span><span class="token punctuation">,</span> add_soap<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">soap_faultcode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">soap_faultstring</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> add_soap<span class="token punctuation">.</span>error<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">soap_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_done</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>server<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sub<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> soap add_soap<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">soap_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_set_namespaces</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">,</span> namespaces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_call_ns2__sub</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"server is %s, num1 is %d, num2 is %d\n"</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>add_soap<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"soap error: %d, %s, %s\n"</span><span class="token punctuation">,</span> add_soap<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">soap_faultcode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">soap_faultstring</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> add_soap<span class="token punctuation">.</span>error<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">soap_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">soap_done</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>add_soap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>stdsoap2.c</strong> 和 <strong>stdsoap2.h</strong>，在gSOAP里面搜出来，拷贝过来，上文已经准备好了</p><h3 id="编写Makefile"><a href="#编写Makefile" class="headerlink" title="编写Makefile"></a>编写Makefile</h3><p>新建 <strong>Makefile</strong><br>直接复制过来多半是不行的，看到第一行 GSOAP_ROOT ，根目录改成自己的，那我应该是如下</p><pre class=" language-bash"><code class="language-bash">GSOAP_ROOT <span class="token operator">=</span> /home/hlx/gsoap-2.8/gsoapWSNAME <span class="token operator">=</span> addCC <span class="token operator">=</span> g++ -g -DWITH_NONAMESPACESINCLUDE <span class="token operator">=</span> -I <span class="token variable"><span class="token variable">$(</span>GSOAP_ROOT<span class="token variable">)</span></span>SERVER_OBJS <span class="token operator">=</span>soapC.o stdsoap2.o soapServer.o <span class="token variable"><span class="token variable">$(</span>WSNAME<span class="token variable">)</span></span>server.o CLIENT_OBJS <span class="token operator">=</span>soapC.o stdsoap2.o soapClient.o <span class="token variable"><span class="token variable">$(</span>WSNAME<span class="token variable">)</span></span>client.o all: serverserver: <span class="token variable"><span class="token variable">$(</span>SERVER_OBJS<span class="token variable">)</span></span>     <span class="token variable"><span class="token variable">$(</span>CC<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>INCLUDE<span class="token variable">)</span></span> -o <span class="token variable"><span class="token variable">$(</span>WSNAME<span class="token variable">)</span></span>server <span class="token variable"><span class="token variable">$(</span>SERVER_OBJS<span class="token variable">)</span></span>    client: <span class="token variable"><span class="token variable">$(</span>CLIENT_OBJS<span class="token variable">)</span></span>     <span class="token variable"><span class="token variable">$(</span>CC<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>INCLUDE<span class="token variable">)</span></span> -o <span class="token variable"><span class="token variable">$(</span>WSNAME<span class="token variable">)</span></span>client <span class="token variable"><span class="token variable">$(</span>CLIENT_OBJS<span class="token variable">)</span></span>clean:    <span class="token function">rm</span> -f *.o *.xml *.a *.wsdl *.nsmap soap* <span class="token variable"><span class="token variable">$(</span>WSNAME<span class="token variable">)</span></span>Stub.* <span class="token variable"><span class="token variable">$(</span>WSNAME<span class="token variable">)</span></span>server ns.xsd <span class="token variable"><span class="token variable">$(</span>WSNAME<span class="token variable">)</span></span><span class="token function">test</span></code></pre><p>可以 到相应目录执行 <code>pwd</code><br><img src="https://img-blog.csdnimg.cn/20191125151953738.png" alt="在这里插入图片描述"></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>终端执行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> server<span class="token function">make</span> client</code></pre><p><img src="https://img-blog.csdnimg.cn/20191125152242387.png" alt="在这里插入图片描述"><br>我make挂了，<strong>tab分割符，不能用空格</strong>，我们修改一下。<br><img src="https://img-blog.csdnimg.cn/20191125152610100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>make完毕。编译生成服务端执行程序 <strong>addserver</strong> 和客户端执行程序 <strong>addclient</strong> </p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>终端执行 <code>./addserver  8888</code>  运行服务端程序<br><img src="https://img-blog.csdnimg.cn/20191125152804547.png" alt="在这里插入图片描述"><br>终端打印出“Socket connection successful: master socket = 3”，那么你的server已经在前台run起来了<br>新建另一终端执行客户端程序 <code>./addclient http://localhost:8888 99 22</code><br><img src="https://img-blog.csdnimg.cn/20191125152947485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>成功计算了加减法，服务端也有所响应。<br>案例结束<br>引自：<a href="https://blog.csdn.net/hktkfly6/article/details/78321908" target="_blank" rel="noopener">gsoap_2.8.33.zip安装与编译</a> 作者：拿破仑的海阔天空</p><h2 id="别人的博客2"><a href="#别人的博客2" class="headerlink" title="别人的博客2"></a>别人的博客2</h2><p>大佬博客链接：<a href="https://blog.csdn.net/benkaoya/article/details/72452968" target="_blank" rel="noopener">ONVIF协议网络摄像机（IPC）客户端程序开发（4）：使用gSOAP生成Web Services框架代码</a><br>我新建了个code，大佬是在Windows下的，所以那2个exe我没拷贝，其他同理拷贝，建立文件夹<br><img src="https://img-blog.csdnimg.cn/20191125172230727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>然后我们终端执行</strong></p><pre class=" language-powershell"><code class="language-powershell"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>gSOAP<span class="token operator">/</span>bin<span class="token operator">/</span>wsdl2h <span class="token operator">-</span>o mobilecode<span class="token punctuation">.</span>h <span class="token operator">-</span>c <span class="token operator">-</span>s <span class="token operator">-</span>t typemap<span class="token punctuation">.</span>dat http:<span class="token operator">/</span><span class="token operator">/</span>ws<span class="token punctuation">.</span>webxml<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>WebServices<span class="token operator">/</span>MobileCodeWS<span class="token punctuation">.</span>asmx?wsdl</code></pre><p><img src="https://img-blog.csdnimg.cn/20191125172826404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有警告，暂时忽略。生成了 <strong>mobilecode.h</strong><br><img src="https://img-blog.csdnimg.cn/2019112517235375.png" alt="在这里插入图片描述"><br>其中-c为产生纯c代码，默认生成 c++代码；-s为不使用STL库，-t为typemap.dat的标识。详情可通过wsdl2h.exe -help查看帮助。<br>这里的WSDL文件，可以在wsdl2h命令中在线下载，也可以先下载到本地，然后引用本地WSDL文件，这里是采用在线下载方式。 —— 引自 <a href="https://blog.csdn.net/benkaoya/article/details/72452968" target="_blank" rel="noopener">https://blog.csdn.net/benkaoya/article/details/72452968</a></p><p><strong>终端执行</strong> <code>/usr/local/gSOAP/bin/soapcpp2 -C -c -x -Iimport -Icustom mobilecode.h</code><br><img src="https://img-blog.csdnimg.cn/20191125172740167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>custom、import、wsdl2h.exe、soapcpp2.exe、typemap.dat、mobilecode.h、soapClientLib.c 无用，可以删除。删除后<br><img src="https://img-blog.csdnimg.cn/20191125173011248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>新建 main.c</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"soapStub.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MobileCodeWSSoap.nsmap"</span></span><span class="token keyword">void</span> <span class="token function">getMobileCodeInfo</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>mobileCode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> soap <span class="token operator">*</span>soap <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span>  <span class="token operator">*</span>endpoint <span class="token operator">=</span> <span class="token string">"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx"</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> _ns1__getMobileCodeInfo          req<span class="token punctuation">;</span>    <span class="token keyword">struct</span> _ns1__getMobileCodeInfoResponse  resp<span class="token punctuation">;</span>    soap <span class="token operator">=</span> <span class="token function">soap_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// allocate and initalize a context</span>    <span class="token function">soap_set_mode</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> SOAP_C_UTFSTRING<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// support multibyte string(for Chinese)</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span>mobileCode <span class="token operator">=</span> mobileCode<span class="token punctuation">;</span>    req<span class="token punctuation">.</span>userID     <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>SOAP_OK <span class="token operator">==</span> <span class="token function">soap_call___ns1__getMobileCodeInfo</span><span class="token punctuation">(</span>soap<span class="token punctuation">,</span> endpoint<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token operator">&amp;</span>resp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> resp<span class="token punctuation">.</span>getMobileCodeInfoResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>getMobileCodeInfoResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token function">soap_destroy</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// delete deserialized objects</span>    <span class="token function">soap_end</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// delete allocated data</span>    <span class="token function">soap_free</span><span class="token punctuation">(</span>soap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// free the soap struct context data</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">getMobileCodeInfo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>大佬突然就运行了，我们Linux的话 编译 <code>gcc main.c stdsoap2.c soapC.c soapClient.c</code><br>然后 ./a.out 手机号码<br>随便百度个手机号码看看<br><img src="https://img-blog.csdnimg.cn/2019112517405115.png" alt="在这里插入图片描述"><br>我们终端执行 <code>./a.out 18937777777</code><br><img src="https://img-blog.csdnimg.cn/20191125174132491.png" alt="在这里插入图片描述"><br>运行结果出来了，大佬的博客也结束了，大佬的ONVIF栏目 <a href="https://blog.csdn.net/benkaoya/category_6924052.html" target="_blank" rel="noopener">传送门</a> 大家可自行查阅。</p><hr><p>恩 我们的文章到此结束了，真是漫长的旅程。各位有缘再见。O(∩_∩)O~~</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>gsoap下载：<a href="https://sourceforge.net/projects/gsoap2/" target="_blank" rel="noopener">https://sourceforge.net/projects/gsoap2/</a><br>gsoap主页：<a href="http://www.cs.fsu.edu/~engelen/soap.html" target="_blank" rel="noopener">http://www.cs.fsu.edu/~engelen/soap.html</a><br>gsoap官网： <a href="http://gsoap2.sourceforge.net/" target="_blank" rel="noopener">http://gsoap2.sourceforge.net/</a><br>官方教程：<a href="https://www.genivia.com/tutorials.html" target="_blank" rel="noopener">https://www.genivia.com/tutorials.html</a><br>gSOAP资料下载-太平洋下载中心（自行斟酌）：<a href="https://dl.pconline.com.cn/download/1448138.html" target="_blank" rel="noopener">https://dl.pconline.com.cn/download/1448138.html</a><br>gsoap_2.8.33.zip安装与编译：<a href="https://blog.csdn.net/hktkfly6/article/details/78321908" target="_blank" rel="noopener">https://blog.csdn.net/hktkfly6/article/details/78321908</a><br>SOAP菜鸟教程：<a href="https://www.runoob.com/soap/soap-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/soap/soap-tutorial.html</a><br>WSDL 教程：<a href="https://www.w3school.com.cn/wsdl/index.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/wsdl/index.asp</a><br>ONVIF协议解读：<a href="https://blog.csdn.net/hktkfly6/article/details/78322154" target="_blank" rel="noopener">https://blog.csdn.net/hktkfly6/article/details/78322154</a><br>ONVIF协议学习笔记：<a href="https://www.cnblogs.com/lsdb/p/9157302.html" target="_blank" rel="noopener">https://www.cnblogs.com/lsdb/p/9157302.html</a><br>ONVIF大佬博客：<a href="https://blog.csdn.net/benkaoya/category_6924052.html" target="_blank" rel="noopener">https://blog.csdn.net/benkaoya/category_6924052.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> ONVIF </tag>
            
            <tag> gSOAP </tag>
            
            <tag> SOAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现socket通信TCP 程序参考</title>
      <link href="/blog/2019/11/22/c-yu-yan-shi-xian-socket-tong-xin-tcp-cheng-xu-can-kao/"/>
      <url>/blog/2019/11/22/c-yu-yan-shi-xian-socket-tong-xin-tcp-cheng-xu-can-kao/</url>
      
        <content type="html"><![CDATA[<h2 id="概念参考：网络通信TCP-UDP——学习笔记"><a href="#概念参考：网络通信TCP-UDP——学习笔记" class="headerlink" title="概念参考：网络通信TCP/UDP——学习笔记"></a><strong>概念参考：</strong><a href="https://blog.csdn.net/Ikaros_521/article/details/98939373" target="_blank" rel="noopener">网络通信TCP/UDP——学习笔记</a></h2><h2 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a><strong>实现效果：</strong></h2><p><strong>先运行服务端，再运行客户端。连接完毕，客户端可以发送消息。</strong><br><img src="https://img-blog.csdnimg.cn/20191122133910388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>客户端发送了 “1”，服务端收到消息并打印，此时轮到服务端发送消息。</strong><br><img src="https://img-blog.csdnimg.cn/2019112213405018.png" alt="在这里插入图片描述"><br><strong>服务端发送消息“2”，客户端收到消息也进行打印，之后不断重复。</strong><br><img src="https://img-blog.csdnimg.cn/20191122134143616.png" alt="在这里插入图片描述"></p><h2 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h2><p><strong>在客户端/服务端等待对方发送消息的同时，并没有限制其继续输入消息。所以会有下图的这种效果，等待过程中发送的消息会在对方发送消息后，给对方发送过去。</strong></p><p><img src="https://img-blog.csdnimg.cn/20191122134459436.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191122134523732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191122134544180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>全部收完后，又恢复刚开始的样子。（可能会存在上限【类似缓冲区的东西（猜测）】，有待测试）</strong></p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><p>代码中使用了gets，可以更改为 fgets(buf,1000,stdin);<br><strong>服务端 server.c</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务器创建socket...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> sockfd<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"准备地址...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in addr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socklen_t len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"绑定socket与地址...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设置监听...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"listen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"等待客户端连接...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> sockaddr_in addrcli <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> clifd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addrcli<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> clifd<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">read</span><span class="token punctuation">(</span>clifd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"quit"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">close</span><span class="token punctuation">(</span>clifd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">write</span><span class="token punctuation">(</span>clifd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>客户端 client.c</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务器创建socket...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> sockfd<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"准备地址...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in addr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socklen_t len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"绑定连接服务器...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"quit"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"通信结束!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">read</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> C </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML发送表单给python处理——Linux</title>
      <link href="/blog/2019/11/08/html-fa-song-biao-dan-gei-python-chu-li-linux/"/>
      <url>/blog/2019/11/08/html-fa-song-biao-dan-gei-python-chu-li-linux/</url>
      
        <content type="html"><![CDATA[<p>操作系统： CentOS7<br>环境搭建： 需要 Apache，Python<br><a href="https://blog.csdn.net/u014157384/article/details/79497761" target="_blank" rel="noopener">centos7 apache 安装配置步骤</a><br><a href="https://www.cnblogs.com/anxminise/p/9650206.html" target="_blank" rel="noopener">Centos7安装Python3.7</a>，补充，将python解压后放入/usr/local/python3下。然后升级pip3，之后缺什装什。<br>具体搭建可以参考：<a href="https://blog.csdn.net/Ikaros_521/article/details/102801453" target="_blank" rel="noopener">嵌入式web服务器BOA+CGI+HTML+MySQL项目实战——Linux</a><br>与之前不同的是，我将Apache配置文件 /etc/httpd/conf/httpd.conf<br>根目录改为/var/www，cgi根目录为/var/www/cgi-bin<br><img src="https://img-blog.csdnimg.cn/20191105155011778.png" alt=" "><br><img src="https://img-blog.csdnimg.cn/2019110515511438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>然后将 html文件放在 /var/www 下，py文件放在 /var/www/cgi-bin 下。</strong><br><img src="https://img-blog.csdnimg.cn/20191105155244977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20191105155319305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>源码如下：</strong> 转自：<a href="https://blog.csdn.net/bjbz_cxy/article/details/79358718" target="_blank" rel="noopener">从0开始python后端开发_前端（html）向后端（python）传递数据_GET_POST</a><br><strong>post.html</strong></p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;POST方法传递数据(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="cgi-bin/post.py" method="post"&gt;数据值1: &lt;input type="text" name="data_1"&gt;  &lt;br /&gt;数据值2: &lt;input type="text" name="data_2" /&gt;&lt;input type="submit" value="POST提交" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>post.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># 添加GI处理模块</span><span class="token keyword">import</span> cgi<span class="token punctuation">,</span> cgitb <span class="token comment" spellcheck="true"># 创建FieldStorage的实例化</span>form <span class="token operator">=</span> cgi<span class="token punctuation">.</span>FieldStorage<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取html页面传递过来的数据值</span>str_data_1  <span class="token operator">=</span>  form<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token string">'data_1'</span><span class="token punctuation">)</span>str_data_2  <span class="token operator">=</span>  form<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token string">'data_2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印输出</span><span class="token keyword">print</span> <span class="token string">"Content-type:text/html"</span><span class="token keyword">print</span><span class="token keyword">print</span> <span class="token string">"&lt;html>"</span><span class="token keyword">print</span> <span class="token string">"&lt;head>"</span><span class="token keyword">print</span> <span class="token string">"&lt;meta charset=\"utf-8\">"</span><span class="token keyword">print</span> <span class="token string">"&lt;title>POST&lt;/title>"</span><span class="token keyword">print</span> <span class="token string">"&lt;/head>"</span><span class="token keyword">print</span> <span class="token string">"&lt;body>"</span><span class="token keyword">print</span> <span class="token string">"&lt;h2>data_1:%s,data_2:%s&lt;/h2>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>str_data_1<span class="token punctuation">,</span> str_data_2<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"&lt;/body>"</span><span class="token keyword">print</span> <span class="token string">"&lt;/html>"</span></code></pre><p>启动Apache服务，<code>systemctl start httpd</code><br>浏览器访问 localhost:80/post.html<br><img src="https://img-blog.csdnimg.cn/20191105155543930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br>输入数据，点击提交。<br><img src="https://img-blog.csdnimg.cn/20191105160047425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br>成功跳转，并打印。<br><img src="https://img-blog.csdnimg.cn/20191105160102874.png" alt=" "></p><hr><p>之后我发现菜鸟教程有完整的教程，苦我百度一天无果，运气好看到了条博客，才解决问题。<br>菜鸟教程，<a href="https://www.runoob.com/python/python-cgi.html" target="_blank" rel="noopener">python的CGI编程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> HTML </tag>
            
            <tag> CGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站动态转发抽奖脚本+教程</title>
      <link href="/blog/2019/11/08/b-zhan-dong-tai-zhuan-fa-chou-jiang-jiao-ben-jiao-cheng/"/>
      <url>/blog/2019/11/08/b-zhan-dong-tai-zhuan-fa-chou-jiang-jiao-ben-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="运行python脚本需要的条件："><a href="#运行python脚本需要的条件：" class="headerlink" title="运行python脚本需要的条件："></a>运行python脚本需要的条件：</h2><p>1、连通的网络<br>2、已安装Python2并配置环境变量<br>3、Python脚本源码</p><h2 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h2><p>网络就不用我说了(〃’▽’〃)  那么下面我们来安装python吧。<br>Python官网有2个版本2和3，我们选择2，因为语法等方面会有所不同。<br>Python2下载：<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">https://www.python.org/downloads/windows/</a><br><img src="https://img-blog.csdnimg.cn/20191030112918269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br>具体安装教学可百度，或参考 教程：<a href="https://www.runoob.com/python/python-install.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-install.html</a><br>记得要配置环境变量。</p><p><strong>环境变量配置方法</strong>： “计算机”右键-&gt; “属性”-&gt;“高级系统设置”-&gt;“环境变量”-&gt; 系统变量中找到“Path”-&gt;“编辑”-&gt;“新建”-&gt; 将你python安装的路径粘贴进去-&gt; 全部“确认”。<br><img src="https://img-blog.csdnimg.cn/2019103011295336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20191030113018694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>测试python是否配置完成。<br>按Win+R 键，输入“cmd”，“确认”。<br><img src="https://img-blog.csdnimg.cn/20191030113032502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>成功运行python命令即表示成功。<br><img src="https://img-blog.csdnimg.cn/20191030113052375.png" alt=" "></p><h2 id="编写脚本："><a href="#编写脚本：" class="headerlink" title="编写脚本："></a>编写脚本：</h2><p>桌面右键 -&gt; “新建”-&gt; “文本文档” -&gt; 取名为 “抽奖.py”（不要隐藏文件扩展名）<br>修改正确后的图标是<img src="https://img-blog.csdnimg.cn/20191030113117295.png" alt=" ">，而不是<img src="https://img-blog.csdnimg.cn/20191030113127840.png" alt=" ">。<br><strong>补充 取消隐藏文件扩展名的方法（win10）：</strong><br>1、打开 “计算机”<br>2、点击这个箭头<br><img src="https://img-blog.csdnimg.cn/20191030113151699.png" alt=" "><br>3、选择 “查看”<br><img src="https://img-blog.csdnimg.cn/20191030113200672.png" alt=" "><br>4、勾上 “文件扩展名”<br><img src="https://img-blog.csdnimg.cn/20191030113210105.png" alt=" "><br>5、回到“桌面”，再次修改文件名。</p><p>感谢 <strong>Hack Inn</strong>大佬的脚本，下载网址：<a href="https://www.hackinn.com/index.php/archives/112/" target="_blank" rel="noopener">https://www.hackinn.com/index.php/archives/112/</a><br>文件建好后，我们贴入已经写好的代码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- encoding: utf-8 -*-</span><span class="token triple-quoted-string string">"""    Bilibili动态转发抽奖脚本 V1.1    Auteur:Poc Sir   Bilibili:鸟云厂商    Mon site Internet:https://www.hackinn.com    Weibo:Poc-Sir Twitter:@rtcatc    更新内容: 1.增加了对画册类型动态的支持。"""</span><span class="token keyword">import</span> os<span class="token keyword">import</span> urllib2<span class="token keyword">import</span> json<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> random<span class="token keyword">import</span> webbrowser<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">from</span> urlparse <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">GetMiddleStr</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>startStr<span class="token punctuation">,</span>endStr<span class="token punctuation">)</span><span class="token punctuation">:</span>    startIndex <span class="token operator">=</span> content<span class="token punctuation">.</span>index<span class="token punctuation">(</span>startStr<span class="token punctuation">)</span>    <span class="token keyword">if</span> startIndex<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>        startIndex <span class="token operator">+=</span> len<span class="token punctuation">(</span>startStr<span class="token punctuation">)</span>    endIndex <span class="token operator">=</span> content<span class="token punctuation">.</span>index<span class="token punctuation">(</span>endStr<span class="token punctuation">)</span>    <span class="token keyword">return</span> content<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> Bilibili_Key    GetTotalRepost<span class="token punctuation">(</span><span class="token punctuation">)</span>    Tmp_count <span class="token operator">=</span> <span class="token number">0</span>    Bilibili_Key <span class="token operator">=</span> <span class="token number">0</span>    DynamicAPI <span class="token operator">=</span> <span class="token string">"https://api.live.bilibili.com/dynamic_repost/v1/dynamic_repost/view_repost?dynamic_id="</span><span class="token operator">+</span> Dynamic_id <span class="token operator">+</span> <span class="token string">"&amp;offset="</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'Bilibili_TMP.db'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> Tmp_count<span class="token operator">&lt;</span>Total_count<span class="token punctuation">:</span>        Tmp_DynamicAPI <span class="token operator">=</span> DynamicAPI <span class="token operator">+</span> str<span class="token punctuation">(</span>Tmp_count<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            BiliJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>GetMiddleStr<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>Tmp_DynamicAPI<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"comments\":"</span><span class="token punctuation">,</span><span class="token string">",\"total"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> BiliJson_dict <span class="token keyword">in</span> BiliJson<span class="token punctuation">:</span>                Bilibili_UID <span class="token operator">=</span> str<span class="token punctuation">(</span>BiliJson_dict<span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                Bilibili_Uname <span class="token operator">=</span> BiliJson_dict<span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span>                Bilibili_Comment <span class="token operator">=</span> BiliJson_dict<span class="token punctuation">[</span><span class="token string">'comment'</span><span class="token punctuation">]</span>                Bilibili_Sql <span class="token operator">=</span> <span class="token string">"INSERT or REPLACE into Bilibili (UID,Uname,Comment,ID) VALUES ("</span> <span class="token operator">+</span> Bilibili_UID <span class="token operator">+</span> <span class="token string">", '"</span> <span class="token operator">+</span> Bilibili_Uname <span class="token operator">+</span> <span class="token string">"', '"</span> <span class="token operator">+</span> Bilibili_Comment <span class="token operator">+</span> <span class="token string">"', "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>Bilibili_Key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>                c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>Bilibili_Sql<span class="token punctuation">)</span>                conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                Bilibili_Key <span class="token operator">=</span> Bilibili_Key <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        Tmp_count <span class="token operator">=</span> Tmp_count <span class="token operator">+</span> <span class="token number">20</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        Tmp_count <span class="token operator">=</span> <span class="token number">0</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">GetTotalRepost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> Total_count    <span class="token keyword">global</span> UP_UID    DynamicAPI <span class="token operator">=</span> <span class="token string">"https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/get_dynamic_detail?dynamic_id="</span> <span class="token operator">+</span> Dynamic_id    BiliJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>DynamicAPI<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Total_count <span class="token operator">=</span> BiliJson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'card'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'repost'</span><span class="token punctuation">]</span>    UP_UID <span class="token operator">=</span> BiliJson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'card'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'user_profile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">GetLuckyDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Bilibili_Doge <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Bilibili_Key<span class="token punctuation">)</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'Bilibili_TMP.db'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT UID from Bilibili where ID="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>Bilibili_Doge<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    suc <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>        suc <span class="token operator">=</span> <span class="token boolean">True</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn2 <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'Bilibili_TMP.db'</span><span class="token punctuation">)</span>        c2 <span class="token operator">=</span> conn2<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        info_cursor <span class="token operator">=</span> c2<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT UID,Uname,Comment from Bilibili where ID="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>Bilibili_Doge<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> info_cursor<span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">" 用户ID: "</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">print</span> <span class="token string">" 用户名: "</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">print</span> <span class="token string">" 转发详情: "</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span>            bilibili_open <span class="token operator">=</span> raw_input<span class="token punctuation">(</span>TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 是否打开网页给获奖用户发送私信: （Y/N） "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> bilibili_open <span class="token operator">==</span> <span class="token string">"Y"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"y"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"Yes"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"是"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"是的"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        conn2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        suc <span class="token operator">=</span> <span class="token boolean">False</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        GetLuckyDog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">DeleteDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DB_path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>sep <span class="token operator">+</span> <span class="token string">"Bilibili_TMP.db"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>DB_path<span class="token punctuation">)</span>        <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 正在清理缓存..."</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 正在清理缓存..."</span><span class="token keyword">def</span> <span class="token function">CreateDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'Bilibili_TMP.db'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''CREATE TABLE Bilibili       (UID INT PRIMARY KEY     NOT NULL,       Uname           TEXT    NOT NULL,       Comment           TEXT    NOT NULL,       ID            INT      NOT NULL);'''</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">GetDynamicid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">" 请粘贴您获取到的网址: "</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>       bilibili_domain <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>       <span class="token keyword">if</span> bilibili_domain <span class="token operator">==</span> <span class="token string">"t.bilibili.com"</span><span class="token punctuation">:</span>           <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 为纯文本类型动态 "</span>           <span class="token keyword">return</span> str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token keyword">elif</span> bilibili_domain <span class="token operator">==</span> <span class="token string">"h.bilibili.com"</span><span class="token punctuation">:</span>           bilibili_docid <span class="token operator">=</span> <span class="token string">"https://api.vc.bilibili.com/link_draw/v2/doc/dynamic_id?doc_id="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           Dynamic_id <span class="token operator">=</span> GetMiddleStr<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>bilibili_docid<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"dynamic_id\":\""</span><span class="token punctuation">,</span><span class="token string">"\"}}"</span><span class="token punctuation">)</span>           <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 为画册类型动态 "</span>           <span class="token keyword">return</span> str<span class="token punctuation">(</span>Dynamic_id<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>       <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 您输入的网址有误! "</span>       exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">TellTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    localtime <span class="token operator">=</span> <span class="token string">"["</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%H:%M:%S'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span>    <span class="token keyword">return</span> localtime<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    DeleteDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"+------------------------------------------------------------+"</span>    <span class="token keyword">print</span> <span class="token string">"|在电脑端登录Bilibli,点击进入个人主页,再点击动态,进入动态页面|"</span>    <span class="token keyword">print</span> <span class="token string">"|点击对应的动态内容，将获取到的网址复制，并粘贴在下方:       |"</span>    <span class="token keyword">print</span> <span class="token string">"+------------------------------------------------------------+\n"</span>    Dynamic_id <span class="token operator">=</span> str<span class="token punctuation">(</span>GetDynamicid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 获取动态成功，ID为: "</span> <span class="token operator">+</span> Dynamic_id    <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 正在获取转发数据中......"</span>    CreateDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>    GetUsers<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 获取数据成功! "</span>    <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 中奖用户信息: \n"</span>    GetLuckyDog<span class="token punctuation">(</span><span class="token punctuation">)</span>    DeleteDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>以上就是源码部分。<br>贴入文件后 “保存” 退出。</p><p>按Win+R 键，输入 “cmd”，进入命令提示符，我们默认路径不在桌面，所以需要修改路径。输入“cd Desktop”,来到桌面，输入“chcp 65001”，再输入<br>“set PYTHONIOENCODING=utf-8”。然后输入“python 抽奖.py”运行程序。<br><img src="https://img-blog.csdnimg.cn/2019103011552058.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>然后贴入你的动态页面的网址。进入“b站”-&gt; “动态” -&gt; 找到自己要抽奖的那条动态 -&gt; 复制网址 -&gt; 粘贴到命令行中 -&gt; “回车”即可<br><img src="https://img-blog.csdnimg.cn/20191030115539676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>运行效果如下：<br><img src="https://img-blog.csdnimg.cn/20191030115614164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>可能会碰到如下错误，是因为中文字符的原因，可以使用英文版。<br>提供下解决思路，将中文字符串前后都加个英文空格。<br>然后命令行依然需要输入<br> “chcp 65001”<br> “set PYTHONIOENCODING=utf-8”<br>然后运行程序 “python 文件名.py”<br><img src="https://img-blog.csdnimg.cn/20191030115635644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>英文版源码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- encoding: utf-8 -*-</span><span class="token triple-quoted-string string">"""    Bilibili动态转发抽奖脚本 V1.1    Auteur:Poc Sir   Bilibili:鸟云厂商    Mon site Internet:https://www.hackinn.com    Weibo:Poc-Sir Twitter:@rtcatc    更新内容:1.增加了对画册类型动态的支持。"""</span><span class="token keyword">import</span> os<span class="token keyword">import</span> urllib2<span class="token keyword">import</span> json<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> random<span class="token keyword">import</span> webbrowser<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">from</span> urlparse <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">GetMiddleStr</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>startStr<span class="token punctuation">,</span>endStr<span class="token punctuation">)</span><span class="token punctuation">:</span>    startIndex <span class="token operator">=</span> content<span class="token punctuation">.</span>index<span class="token punctuation">(</span>startStr<span class="token punctuation">)</span>    <span class="token keyword">if</span> startIndex<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>        startIndex <span class="token operator">+=</span> len<span class="token punctuation">(</span>startStr<span class="token punctuation">)</span>    endIndex <span class="token operator">=</span> content<span class="token punctuation">.</span>index<span class="token punctuation">(</span>endStr<span class="token punctuation">)</span>    <span class="token keyword">return</span> content<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> Bilibili_Key    GetTotalRepost<span class="token punctuation">(</span><span class="token punctuation">)</span>    Tmp_count <span class="token operator">=</span> <span class="token number">0</span>    Bilibili_Key <span class="token operator">=</span> <span class="token number">0</span>    DynamicAPI <span class="token operator">=</span> <span class="token string">"https://api.live.bilibili.com/dynamic_repost/v1/dynamic_repost/view_repost?dynamic_id="</span><span class="token operator">+</span> Dynamic_id <span class="token operator">+</span> <span class="token string">"&amp;offset="</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'Bilibili_TMP.db'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> Tmp_count<span class="token operator">&lt;</span>Total_count<span class="token punctuation">:</span>        Tmp_DynamicAPI <span class="token operator">=</span> DynamicAPI <span class="token operator">+</span> str<span class="token punctuation">(</span>Tmp_count<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            BiliJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>GetMiddleStr<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>Tmp_DynamicAPI<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"comments\":"</span><span class="token punctuation">,</span><span class="token string">",\"total"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> BiliJson_dict <span class="token keyword">in</span> BiliJson<span class="token punctuation">:</span>                Bilibili_UID <span class="token operator">=</span> str<span class="token punctuation">(</span>BiliJson_dict<span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                Bilibili_Uname <span class="token operator">=</span> BiliJson_dict<span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span>                Bilibili_Comment <span class="token operator">=</span> BiliJson_dict<span class="token punctuation">[</span><span class="token string">'comment'</span><span class="token punctuation">]</span>                Bilibili_Sql <span class="token operator">=</span> <span class="token string">"INSERT or REPLACE into Bilibili (UID,Uname,Comment,ID) VALUES ("</span> <span class="token operator">+</span> Bilibili_UID <span class="token operator">+</span> <span class="token string">", '"</span> <span class="token operator">+</span> Bilibili_Uname <span class="token operator">+</span> <span class="token string">"', '"</span> <span class="token operator">+</span> Bilibili_Comment <span class="token operator">+</span> <span class="token string">"', "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>Bilibili_Key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>                c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>Bilibili_Sql<span class="token punctuation">)</span>                conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                Bilibili_Key <span class="token operator">=</span> Bilibili_Key <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        Tmp_count <span class="token operator">=</span> Tmp_count <span class="token operator">+</span> <span class="token number">20</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        Tmp_count <span class="token operator">=</span> <span class="token number">0</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">GetTotalRepost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> Total_count    <span class="token keyword">global</span> UP_UID    DynamicAPI <span class="token operator">=</span> <span class="token string">"https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/get_dynamic_detail?dynamic_id="</span> <span class="token operator">+</span> Dynamic_id    BiliJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>DynamicAPI<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Total_count <span class="token operator">=</span> BiliJson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'card'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'repost'</span><span class="token punctuation">]</span>    UP_UID <span class="token operator">=</span> BiliJson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'card'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'user_profile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">GetLuckyDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Bilibili_Doge <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Bilibili_Key<span class="token punctuation">)</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'Bilibili_TMP.db'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT UID from Bilibili where ID="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>Bilibili_Doge<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    suc <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>        suc <span class="token operator">=</span> <span class="token boolean">True</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn2 <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'Bilibili_TMP.db'</span><span class="token punctuation">)</span>        c2 <span class="token operator">=</span> conn2<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        info_cursor <span class="token operator">=</span> c2<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT UID,Uname,Comment from Bilibili where ID="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>Bilibili_Doge<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> info_cursor<span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"user ID:"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">print</span> <span class="token string">"user name:"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\n"</span>            bilibili_open <span class="token operator">=</span> raw_input<span class="token punctuation">(</span>TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Do you want to open a web page to send private messages to the winning users?:(Y/N)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> bilibili_open <span class="token operator">==</span> <span class="token string">"Y"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"y"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"Yes"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"是"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> bilibili_open <span class="token operator">==</span> <span class="token string">"是的"</span><span class="token punctuation">:</span>                webbrowser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"https://message.bilibili.com/#/whisper/mid"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        conn2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        suc <span class="token operator">=</span> <span class="token boolean">False</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        GetLuckyDog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">DeleteDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DB_path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>sep <span class="token operator">+</span> <span class="token string">"Bilibili_TMP.db"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>DB_path<span class="token punctuation">)</span>        <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Cleaning up cache..."</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Cleaning up cache..."</span><span class="token keyword">def</span> <span class="token function">CreateDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'Bilibili_TMP.db'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''CREATE TABLE Bilibili       (UID INT PRIMARY KEY     NOT NULL,       Uname           TEXT    NOT NULL,       Comment           TEXT    NOT NULL,       ID            INT      NOT NULL);'''</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">GetDynamicid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"Please paste the website you get:"</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>       bilibili_domain <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>       <span class="token keyword">if</span> bilibili_domain <span class="token operator">==</span> <span class="token string">"t.bilibili.com"</span><span class="token punctuation">:</span>           <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Dynamic for plain text type"</span>           <span class="token keyword">return</span> str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token keyword">elif</span> bilibili_domain <span class="token operator">==</span> <span class="token string">"h.bilibili.com"</span><span class="token punctuation">:</span>           bilibili_docid <span class="token operator">=</span> <span class="token string">"https://api.vc.bilibili.com/link_draw/v2/doc/dynamic_id?doc_id="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           Dynamic_id <span class="token operator">=</span> GetMiddleStr<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>bilibili_docid<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"dynamic_id\":\""</span><span class="token punctuation">,</span><span class="token string">"\"}}"</span><span class="token punctuation">)</span>           <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Dynamic for album type"</span>           <span class="token keyword">return</span> str<span class="token punctuation">(</span>Dynamic_id<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>       <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"The URL you entered is incorrect!"</span>       exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">TellTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    localtime <span class="token operator">=</span> <span class="token string">"["</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%H:%M:%S'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span>    <span class="token keyword">return</span> localtime<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    DeleteDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"+---------------------------------------------------------------------------------------+"</span>    <span class="token keyword">print</span> <span class="token string">"|PC login Bilibli,in home page,Click on the news again,Enter the dynamic page          |"</span>    <span class="token keyword">print</span> <span class="token string">"|Click the corresponding dynamic content, copy and paste the obtained URL below:       |"</span>    <span class="token keyword">print</span> <span class="token string">"+---------------------------------------------------------------------------------------+\n"</span>    Dynamic_id <span class="token operator">=</span> str<span class="token punctuation">(</span>GetDynamicid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Get dynamic success with ID:"</span> <span class="token operator">+</span> Dynamic_id    <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Getting forwarding data......"</span>    CreateDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>    GetUsers<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Data acquisition successful!"</span>    <span class="token keyword">print</span> TellTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Winning user information:\n"</span>    GetLuckyDog<span class="token punctuation">(</span><span class="token punctuation">)</span>DeleteDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>使用操作是不需要修改编码，直接win+R，运行cmd，然后cd到桌面，运行python文件，粘贴入你的动态页面网址，就可以完成抽奖了。之后可以选择是否私信，很方便。再次感谢<strong>Hack Inn</strong>大佬提供的源码。</p><p><img src="https://img-blog.csdnimg.cn/20191030115732555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><h2 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h2><p>动态转发抽奖.py   是英文版<br>动态转发抽奖2.py  是中文版</p><h3 id="查看所有转发者的信息"><a href="#查看所有转发者的信息" class="headerlink" title="查看所有转发者的信息"></a>查看所有转发者的信息</h3><p>如果想看所有转发者的数据，可以下载<strong>SQLiteSpy可视化工具</strong>或安装<strong>SQLite数据库</strong>，打开Bilibili_TMP.db文件（存储数据的数据库文件）<br>SQLite官网：<a href="https://www.sqlite.org/index.html" target="_blank" rel="noopener">https://www.sqlite.org/index.html</a><br>SQLite安装教程：<a href="https://www.runoob.com/sqlite/sqlite-installation.html" target="_blank" rel="noopener">https://www.runoob.com/sqlite/sqlite-installation.html</a><br><img src="https://img-blog.csdnimg.cn/20191128232530634.png" alt="在这里插入图片描述"><br>此时不要继续操作。在运行路径下可以看到文件Bilibili_TMP.db。<img src="https://img-blog.csdnimg.cn/20191128232619882.png" alt="在这里插入图片描述"><br>运行我们的 <strong>SQLiteSpy</strong><br><img src="https://img-blog.csdnimg.cn/20191128232644703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>file -&gt; open database<br><img src="https://img-blog.csdnimg.cn/20191128232724434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开我们的 Bilibili_TMP.db<br><img src="https://img-blog.csdnimg.cn/20191128232810260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>双击table下的bilibili<br><img src="https://img-blog.csdnimg.cn/20191128232849687.png" alt="在这里插入图片描述"><br>数据库中的数据就可以看到了<br><img src="https://img-blog.csdnimg.cn/20191128232931460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>现在可以自行进行筛选，如运用SQL语句进行筛选。<br>比如：<code>select * from Bilibili where Comment!="转发动态"</code><br>除去只转发没有说多余话的人。效果如下：<br><img src="https://img-blog.csdnimg.cn/20191128233220642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行SQL语句的方法是在上面的框中输入SQL语句，然后按F9（execute-&gt;execute sql）运行SQL语句。<br><img src="https://img-blog.csdnimg.cn/20191128233419420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就可以看到执行效果了。<br><strong>SQL语句的学习参考</strong>：<a href="https://blog.csdn.net/Ikaros_521/article/details/100808626" target="_blank" rel="noopener">数据库的相关知识—学习笔记</a>，<a href="https://blog.csdn.net/Ikaros_521/article/details/100826220" target="_blank" rel="noopener">SQL数据查询语言—实际运用参考</a></p><p>如需帮助可联系up<br>b站：<a href="https://space.bilibili.com/3709626" target="_blank" rel="noopener">Love丶伊卡洛斯</a><br>QQ： 327209194<br>QQ群：511921385</p><p>侵删同样联系方式如上。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 哔哩哔哩 </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 转发抽奖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式web服务器BOA+CGI+HTML+MySQL项目实战——Linux</title>
      <link href="/blog/2019/11/08/qian-ru-shi-web-fu-wu-qi-boa-cgi-html-mysql-xiang-mu-shi-zhan-linux/"/>
      <url>/blog/2019/11/08/qian-ru-shi-web-fu-wu-qi-boa-cgi-html-mysql-xiang-mu-shi-zhan-linux/</url>
      
        <content type="html"><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>操作系统： Ubuntu12.04 LTS<br>环境搭建： 需要 BOA，Apache，CCGI，MySQL，GCC<br><a href="https://blog.csdn.net/Ikaros_521/article/details/102610768" target="_blank" rel="noopener">Linux下嵌入式Web服务器BOA和CGI编程开发</a><br><a href="https://blog.csdn.net/Ikaros_521/article/details/102610768" target="_blank" rel="noopener">数据库的相关知识——学习笔记</a> 的三<br><a href="https://blog.csdn.net/Ikaros_521/article/details/102664117" target="_blank" rel="noopener">mysql中文乱码问题解决 / C程序插入仍是乱码解决 / 卸载重装教学</a><br>扩展： 我还用了<a href="https://www.runoob.com/bootstrap/bootstrap-tutorial.html" target="_blank" rel="noopener">bootstrap</a>框架，CSS/JS<br>源码链接：GitHub：<a href="https://github.com/Ikaros-521/boa_cgi_html_mysql" target="_blank" rel="noopener">传送门</a>  ， 码云：<a href="https://gitee.com/ikaros-521/boa_cgi_html_mysql" target="_blank" rel="noopener">传送门</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>环境准备好后，我们在 /var/www 下写HTML文件<br><img src="https://img-blog.csdnimg.cn/20191029161455842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br>在 /var/www/cgi-bin 下写c文件，编译后命名为.cgi。<br>编译命令仅供参考<br> <code>gcc -o login.cgi login.c cgic.c -lpthread -ldl -lmysqlclient</code><br><img src="https://img-blog.csdnimg.cn/20191029161513208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br>程序都写好后，我们开始测试。</p><p><strong>1、开启MySQL服务    默认开启</strong><br><img src="https://img-blog.csdnimg.cn/20191029161420461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br>我的程序需要事先   新建用户test，数据库register，表user</p><pre class=" language-bash"><code class="language-bash">mysql -utest -ptest</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// 创建新用户test</span>mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'test'</span>@'localhost<span class="token string">' identified by '</span>test'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给test用户所有权限</span>mysql<span class="token operator">></span> <span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span>  <span class="token keyword">to</span> test<span class="token variable">@localhost</span> identified <span class="token keyword">by</span> <span class="token string">'test'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 刷新权限</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> register<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">use</span> register<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2、开启BOA服务器，在/boa/src目录下</strong>    <code>sudo ./boa</code><br><img src="https://img-blog.csdnimg.cn/2019102916165782.png" alt=" "><br><strong>3、打开浏览器，访问localhost:端口号 访问的即 /var/www 目录<br>我直接访问 <a href="http://localhost:886/login.html" target="_blank" rel="noopener">http://localhost:886/login.html</a>  我的登录页面</strong><br><img src="https://img-blog.csdnimg.cn/20191029161753741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br>   其他页面都是同理。</p><h2 id="思路讲解"><a href="#思路讲解" class="headerlink" title="思路讲解"></a>思路讲解</h2><p><img src="https://img-blog.csdnimg.cn/20191029165019995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>开启boa服务器后，我们访问到我们在 /var/www 下编写的HTML文件，显示我们的登录页面。<br>我们点击“注册”按钮，跳转到 register.html</strong><br><img src="https://img-blog.csdnimg.cn/20191029162441412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>点击“注册”按钮，提交form表单信息给cgi-bin/register.cgi</strong><br><img src="https://img-blog.csdnimg.cn/20191029162553274.png" alt=" "><br><strong>cgi程序通过 cgiFormString函数试图检索发送给指定字段的字符串。存入变量中。我们连接MySQL数据库</strong><br><img src="https://img-blog.csdnimg.cn/20191029162908685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20191029163139201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>将数据写入register数据库中的user表中（此数据库和表需要先建好）</strong><br><img src="https://img-blog.csdnimg.cn/20191029163104479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>处理完毕后，跳回 login.html 登录页面</strong><br><img src="https://img-blog.csdnimg.cn/20191029163244907.png" alt=" "><br><img src="https://img-blog.csdnimg.cn/20191029163352485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>现在我们输入数据，点击“登录”，同理将表单发给 login.cgi ，对数据在MySQL数据库中查询后，成功就来到base_config.html 配置页面。</strong><br><img src="https://img-blog.csdnimg.cn/20191029164311961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>然后我们输入相应数据，点击“提交”，交给base_config.cgi处理，之后任意发挥就好了。</strong><br><img src="https://img-blog.csdnimg.cn/20191029164437115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><strong>我是打印出来，写入系统文件的代码暂时注释了，慎用</strong><br><img src="https://img-blog.csdnimg.cn/20191029164447236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><em>遇到问题可以参考页首的链接</em></p><hr><h2 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h2><p>login.html</p><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token keyword">register</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-2.2.3.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-ui.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>link type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"css/jquery-ui.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"css/bootstrap.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/bootstrap.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>link type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"css/login.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/my.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>SCRIPT language <span class="token operator">=</span> <span class="token string">"JavaScript"</span><span class="token operator">></span>    function <span class="token function">checkUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//验证用户名</span>        var fname <span class="token operator">=</span> document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>username<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        var reg<span class="token operator">=</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fname<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>fname<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"只能输入字母或数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fname<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">||</span>fname<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"只能输入4-16个字符"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>username<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false     <span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    function <span class="token function">passCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//验证密码</span>        var userpass <span class="token operator">=</span> document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userpass <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"未输入密码 \n"</span> <span class="token operator">+</span> <span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>   <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userpass<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token operator">||</span>userpass<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"密码必须在 6-12 个字符。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>   <span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    function <span class="token function">passCheck2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var p1<span class="token operator">=</span>document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        var p2<span class="token operator">=</span>document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password2<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">!=</span>p2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"确认密码与密码输入不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    function <span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var Email <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        var e <span class="token operator">=</span> Email<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token operator">&amp;&amp;</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Email<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Email<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"@"</span><span class="token operator">&amp;&amp;</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"符号@和符号.不能再邮件地址第一位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> true<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"电子邮件格式不正确\n"</span><span class="token operator">+</span><span class="token string">"必须包含@符号和.符号！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入电子邮件！"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    function <span class="token function">checkbirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//验证用户名</span>        var year <span class="token operator">=</span> document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">1949</span> <span class="token operator">||</span> year <span class="token operator">></span> <span class="token number">2007</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"年份范围从1949-2007年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    function <span class="token function">validateform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">passCheck</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">passCheck2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">checkbirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    function <span class="token function">clearText</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>user<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span> <span class="token punctuation">;</span>        document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//显示隐藏对应的switchPwd()方法:</span>    $<span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过jqurey修改</span>        $<span class="token punctuation">(</span><span class="token string">"#passwordeye"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            let type <span class="token operator">=</span>  $<span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                $<span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                $<span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>SCRIPT<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"img/login_bg.jpg"</span> class<span class="token operator">=</span><span class="token string">"bg"</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"head"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"img/login_head.png"</span> width<span class="token operator">=</span><span class="token number">100</span><span class="token operator">%</span> height<span class="token operator">=</span><span class="token keyword">auto</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span><span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"myform"</span> onSubmit<span class="token operator">=</span><span class="token string">"return validateform( )"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span> action<span class="token operator">=</span><span class="token string">"cgi-bin/login.cgi"</span> method<span class="token operator">=</span><span class="token string">"post"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"input-group"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>input class<span class="token operator">=</span><span class="token string">"form-control"</span> id<span class="token operator">=</span><span class="token string">"username"</span> name<span class="token operator">=</span><span class="token string">"username"</span> type<span class="token operator">=</span><span class="token string">"text"</span>  style<span class="token operator">=</span><span class="token string">"height:40px"</span> value<span class="token operator">=</span><span class="token string">""</span> placeholder<span class="token operator">=</span><span class="token string">"只能输入字母或数字，4-16个字符"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"input-group"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h3<span class="token operator">></span>密<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>码：<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>input class<span class="token operator">=</span><span class="token string">"form-control"</span> id<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span> type<span class="token operator">=</span><span class="token string">"password"</span> style<span class="token operator">=</span><span class="token string">"height:40px"</span>  value<span class="token operator">=</span><span class="token string">""</span> placeholder<span class="token operator">=</span><span class="token string">"密码长度6-12位"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"input-group-btn"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>INPUT class<span class="token operator">=</span><span class="token string">"btn btn-default"</span> id<span class="token operator">=</span><span class="token string">"passwordeye"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"show/hide"</span>"<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>INPUT class<span class="token operator">=</span><span class="token string">"btn btn-primary"</span> name<span class="token operator">=</span><span class="token string">"loginButton"</span> type<span class="token operator">=</span><span class="token string">"submit"</span> id<span class="token operator">=</span><span class="token string">"Button"</span> value<span class="token operator">=</span><span class="token string">"登录"</span>  onclick<span class="token operator">=</span><span class="token string">"checkUserName()"</span><span class="token operator">></span>        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"register.html"</span><span class="token operator">></span><span class="token operator">&lt;</span>INPUT class<span class="token operator">=</span><span class="token string">"btn btn-primary"</span> name<span class="token operator">=</span><span class="token string">"registerButton"</span> id<span class="token operator">=</span><span class="token string">"Button"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"注册"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"bottom"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"footer"</span> style<span class="token operator">=</span><span class="token string">"color:white;"</span><span class="token operator">></span>         Copyright <span class="token operator">&amp;</span>copy<span class="token punctuation">;</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">2019</span> All Rights Reserved<span class="token punctuation">.</span> 备案号：    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>对应 login.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"cgic.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> SQL_SIZE 256 </span><span class="token keyword">int</span> <span class="token function">cgiMain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> username<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> email<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//回显信息到HTML网页cgiHeaderContentType("text/html");</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;html>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;p>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cgiFormString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> cgiFormSuccess<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"cgiFormString function username failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//exit(-1);</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"用户名:%s\n\n"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// password gateway server_ip dns subnet_mask dhcp error</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cgiFormString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> cgiFormSuccess<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"cgiFormString function password failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//exit(-1);</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"密码:%s\n\n"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    if(cgiFormString("email", email, sizeof(email)) != cgiFormSuccess)    {        fprintf(stderr, "cgiFormString function email failed");        //exit(-1);    }    printf("电子邮箱:%s\n\n",phone);    printf("&lt;br>\n\n");*/</span>    <span class="token comment" spellcheck="true">/***  将用户信息写入MySQL数据库中  ***/</span>     <span class="token comment" spellcheck="true">//数据存储到数据库</span>    MYSQL<span class="token operator">*</span> conn<span class="token punctuation">;</span>    bool isAutoCommit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 MySQL</span>    conn <span class="token operator">=</span> <span class="token function">mysql_init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> conn<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> user<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> passwd<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> database<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"register"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试与运行在主机上的MySQL数据库引擎建立连接</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token function">mysql_real_connect</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ip<span class="token punctuation">,</span>user<span class="token punctuation">,</span>passwd<span class="token punctuation">,</span>database<span class="token punctuation">,</span>port<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---errno:%d error:%s\n\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    isAutoCommit <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据mysql的autocommit参数设置来决定是否自动提交</span>    <span class="token function">mysql_autocommit</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>isAutoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设定数据库编码</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET NAMES 'utf8'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET CHARACTER SET utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET CHARACTER_SET_RESULT = utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span>SQL_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 置字节字符串cmd的前SQL_SIZE个字节为零且包括‘\0’</span>    <span class="token function">bzero</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> SQL_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建user表</span>    <span class="token comment" spellcheck="true">// strcpy(cmd, "CREATE TABLE user(username varchar(20) PRIMARY KEY,password varchar(20));");</span>    <span class="token comment" spellcheck="true">// 将sql语句写入cmd变量</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"select * from user where username='%s' and password='%s';"</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    MYSQL_RES <span class="token operator">*</span>res<span class="token punctuation">;</span>    MYSQL_ROW row<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向与指定的连接标识符关联的服务器中的当前活动数据库发送一条查询</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> num_fields <span class="token operator">=</span> <span class="token function">mysql_field_count</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num_fields <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    res <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> res<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num_fields<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">mysql_free_result</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;p>登陆成功&lt;/p>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv=Refresh content=1;URL=../base_config.html>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;p>帐号或密码错误&lt;/p>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv=Refresh content=1;URL=../login.html>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//printf("&lt;p>&lt;/p>\n\n");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>register.html</p><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token keyword">register</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-2.2.3.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/jquery-ui.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>link type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"css/jquery-ui.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>link type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"css/register.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"css/bootstrap.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/bootstrap.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/my.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>SCRIPT language <span class="token operator">=</span> <span class="token string">"JavaScript"</span><span class="token operator">></span>    function <span class="token function">checkUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//验证用户名</span>        var fname <span class="token operator">=</span> document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>username<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        var reg<span class="token operator">=</span><span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fname<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>fname<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"只能输入字母或数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fname<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">||</span>fname<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"只能输入4-16个字符"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>username<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false     <span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    function <span class="token function">passCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//验证密码</span>        var userpass <span class="token operator">=</span> document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userpass <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"未输入密码 \n"</span> <span class="token operator">+</span> <span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>   <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userpass<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token operator">||</span>userpass<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"密码必须在 6-12 个字符。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>   <span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    function <span class="token function">passCheck2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var p1<span class="token operator">=</span>document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        var p2<span class="token operator">=</span>document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password2<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">!=</span>p2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"确认密码与密码输入不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    function <span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        var Email <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        var e <span class="token operator">=</span> Email<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token operator">&amp;&amp;</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Email<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Email<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"@"</span><span class="token operator">&amp;&amp;</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"符号@和符号.不能再邮件地址第一位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> true<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"电子邮件格式不正确\n"</span><span class="token operator">+</span><span class="token string">"必须包含@符号和.符号！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入电子邮件！"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    function <span class="token function">checkbirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//验证用户名</span>        var year <span class="token operator">=</span> document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">1949</span> <span class="token operator">||</span> year <span class="token operator">></span> <span class="token number">2007</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"年份范围从1949-2007年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    function <span class="token function">validateform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">passCheck</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">passCheck2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">checkEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">checkbirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    function <span class="token function">clearText</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>user<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span> <span class="token punctuation">;</span>        document<span class="token punctuation">.</span>myform<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//显示隐藏对应的switchPwd()方法:</span>    $<span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过jqurey修改</span>        $<span class="token punctuation">(</span><span class="token string">"#passwordeye"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            let type <span class="token operator">=</span>  $<span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                $<span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                $<span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token punctuation">(</span><span class="token string">"#passwordeye2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            let type <span class="token operator">=</span>  $<span class="token punctuation">(</span><span class="token string">"#password2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                $<span class="token punctuation">(</span><span class="token string">"#password2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                $<span class="token punctuation">(</span><span class="token string">"#password2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>SCRIPT<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"img/login_bg.jpg"</span> class<span class="token operator">=</span><span class="token string">"bg"</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"head"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"img/register_head.png"</span> width<span class="token operator">=</span><span class="token number">100</span><span class="token operator">%</span> height<span class="token operator">=</span><span class="token keyword">auto</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span><span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"myform"</span> onSubmit<span class="token operator">=</span><span class="token string">"return validateform( )"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span> action<span class="token operator">=</span><span class="token string">"cgi-bin/register.cgi"</span> method<span class="token operator">=</span><span class="token string">"post"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"input-group"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>用<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>户<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>名：<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>input class<span class="token operator">=</span><span class="token string">"form-control"</span>  id<span class="token operator">=</span><span class="token string">"username"</span> name<span class="token operator">=</span><span class="token string">"username"</span> type<span class="token operator">=</span><span class="token string">"text"</span>  style<span class="token operator">=</span><span class="token string">"height:40px"</span> value<span class="token operator">=</span><span class="token string">""</span>  placeholder<span class="token operator">=</span><span class="token string">"只能输入字母或数字，4-16个字符"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"input-group"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>密<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>码：<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>input class<span class="token operator">=</span><span class="token string">"form-control"</span>  id<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span> type<span class="token operator">=</span><span class="token string">"password"</span> style<span class="token operator">=</span><span class="token string">"height:40px"</span> value<span class="token operator">=</span><span class="token string">""</span>  placeholder<span class="token operator">=</span><span class="token string">"密码长度6-12位"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"input-group-btn"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>INPUT class<span class="token operator">=</span><span class="token string">"btn btn-default"</span> id<span class="token operator">=</span><span class="token string">"passwordeye"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"show/hide"</span>"<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"input-group"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>确认密码：<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>input class<span class="token operator">=</span><span class="token string">"form-control"</span>  id<span class="token operator">=</span><span class="token string">"password2"</span> name<span class="token operator">=</span><span class="token string">"password2"</span> type<span class="token operator">=</span><span class="token string">"password"</span> style<span class="token operator">=</span><span class="token string">"height:40px"</span> value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"input-group-btn"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>INPUT class<span class="token operator">=</span><span class="token string">"btn btn-default"</span> id<span class="token operator">=</span><span class="token string">"passwordeye2"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"show/hide"</span>"<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>         <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>INPUT name<span class="token operator">=</span><span class="token string">"registerButton"</span>  class<span class="token operator">=</span><span class="token string">"btn btn-primary"</span> type<span class="token operator">=</span><span class="token string">"submit"</span> id<span class="token operator">=</span><span class="token string">"Button"</span> value<span class="token operator">=</span><span class="token string">"注册"</span>  onclick<span class="token operator">=</span><span class="token string">"checkUserName()"</span><span class="token operator">></span>        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"login.html"</span><span class="token operator">></span><span class="token operator">&lt;</span>INPUT  class<span class="token operator">=</span><span class="token string">"btn btn-primary"</span> name<span class="token operator">=</span><span class="token string">"loginButton"</span> id<span class="token operator">=</span><span class="token string">"Button"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"登录"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"bottom"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"footer"</span> style<span class="token operator">=</span><span class="token string">"color:white;"</span><span class="token operator">></span>         Copyright <span class="token operator">&amp;</span>copy<span class="token punctuation">;</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">2019</span> All Rights Reserved<span class="token punctuation">.</span> 备案号：    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>对应的 register.c</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"cgic.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> SQL_SIZE 256 </span><span class="token keyword">int</span> <span class="token function">cgiMain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> username<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> email<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//回显信息到HTML网页cgiHeaderContentType("text/html");</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;html>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;p>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cgiFormString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> cgiFormSuccess<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"cgiFormString function username failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//exit(-1);</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"用户名:%s\n\n"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// password gateway server_ip dns subnet_mask dhcp error</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cgiFormString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> cgiFormSuccess<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"cgiFormString function password failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//exit(-1);</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"密码:%s\n\n"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    if(cgiFormString("email", email, sizeof(email)) != cgiFormSuccess)    {        fprintf(stderr, "cgiFormString function email failed");        //exit(-1);    }    printf("电子邮箱:%s\n\n",phone);    printf("&lt;br>\n\n");*/</span>    <span class="token comment" spellcheck="true">/***  将用户信息写入MySQL数据库中  ***/</span>     <span class="token comment" spellcheck="true">//数据存储到数据库</span>    MYSQL<span class="token operator">*</span> conn<span class="token punctuation">;</span>    bool isAutoCommit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 MySQL</span>    conn <span class="token operator">=</span> <span class="token function">mysql_init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> conn<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> user<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> passwd<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> database<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"register"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试与运行在主机上的MySQL数据库引擎建立连接</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token function">mysql_real_connect</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ip<span class="token punctuation">,</span>user<span class="token punctuation">,</span>passwd<span class="token punctuation">,</span>database<span class="token punctuation">,</span>port<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---errno:%d error:%s\n\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    isAutoCommit <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据mysql的autocommit参数设置来决定是否自动提交</span>    <span class="token function">mysql_autocommit</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>isAutoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设定数据库编码</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET NAMES 'utf8'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET CHARACTER SET utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET CHARACTER_SET_RESULT = utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span>SQL_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 置字节字符串cmd的前SQL_SIZE个字节为零且包括‘\0’</span>    <span class="token function">bzero</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> SQL_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建user表</span>    <span class="token comment" spellcheck="true">// strcpy(cmd, "CREATE TABLE user(username varchar(20) PRIMARY KEY,password varchar(20));");</span>    <span class="token comment" spellcheck="true">// 将sql语句写入cmd变量</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"INSERT INTO user values('%s', '%s');"</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n\n"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向与指定的连接标识符关联的服务器中的当前活动数据库发送一条查询</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;p>注册失败，请重新注册&lt;/p>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv=Refresh content=1;URL=../register.html>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//mysql_affected_rows(conn);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;p>注册成功&lt;/p>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;p>您的用户名和密码为：&lt;/p>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token string">"select * from user;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MYSQL_RES <span class="token operator">*</span>res<span class="token punctuation">;</span>    MYSQL_ROW row<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> num_fields <span class="token operator">=</span> <span class="token function">mysql_field_count</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num_fields <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    res <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> res<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num_fields<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;br>\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">mysql_free_result</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv=Refresh content=1;URL=../login.html>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>其余参考<a href="https://github.com/Ikaros-521/boa_cgi_html_mysql" target="_blank" rel="noopener">GitHub</a>或<a href="https://gitee.com/ikaros-521/boa_cgi_html_mysql" target="_blank" rel="noopener">码云</a></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> HTML </tag>
            
            <tag> CGI </tag>
            
            <tag> BOA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM体系结构——九鼎创展x210V3s</title>
      <link href="/blog/2019/10/27/arm-ti-xi-jie-gou-jiu-ding-chuang-zhan-x210v3s/"/>
      <url>/blog/2019/10/27/arm-ti-xi-jie-gou-jiu-ding-chuang-zhan-x210v3s/</url>
      
        <content type="html"><![CDATA[<p>ARM体系结构-在裸板下的开发、单片机<br>Linux系统移植-给开发板安装操作系统<br>Linux系统驱动编程-对内核进行扩展<br>    开发板<br>    SD卡<br>    电源线<br>    网线<br>    串口线<br>    蓝色USB线</p><h2 id="一、嵌入式介绍"><a href="#一、嵌入式介绍" class="headerlink" title="一、嵌入式介绍"></a>一、嵌入式介绍</h2><h3 id="1、什么是嵌入式系统"><a href="#1、什么是嵌入式系统" class="headerlink" title="1、什么是嵌入式系统"></a>1、什么是嵌入式系统</h3><pre><code>    嵌入到控件器的内部的软件，为特定的应用而设计的专用的计算机系统    以应用为中心，以计算机技术为基础，软硬件可裁剪，适应应用系统对功能、可靠性、成本、体积、功耗等严格要求的专用计算机系统。    学习嵌入式：        参与系统的裁剪        在此系统的基础开发应用</code></pre><h3 id="2、嵌入式系统的构成"><a href="#2、嵌入式系统的构成" class="headerlink" title="2、嵌入式系统的构成"></a>2、嵌入式系统的构成</h3><pre><code>    软件        应用程序        功能库（Qt、madplay、libc、pthread）        文件系统        内核+驱动        引导程序    硬件        底板（硬件接口，网卡、声卡、显卡、外设）        核心板（SOC（CPU+内设），SDRAM，Nand</code></pre><h3 id="3、嵌入式系统的演进方向"><a href="#3、嵌入式系统的演进方向" class="headerlink" title="3、嵌入式系统的演进方向"></a>3、嵌入式系统的演进方向</h3><pre><code>    1.以单芯片为核心，可以编程控制器存在的形式（单片机）        没有操作系统支持、软件以汇编为主，功能单## 一、处理效率低、存储器小、没有外部接口    2.以嵌入式CPU为基础、简单的操作系统为核心        CPU种类多、通用性强、系统开销小、效率高、具有一定的拓展性和兼容性、用户体验度不高、交互不友好。    3.以嵌入式操作系统为标志        兼容性好、适用于不同平台、具有高度模块化及拓展性、界面化、用户交互友好    4.万物互联        将传感器技术、高速网络技术、人工智能、嵌入式技术综合联合在一起实现小型化、智能化、网络化、可视化、低功耗、绿色环保        配合异构多核技术、云计算、大数据、人工智能、虚拟化技术</code></pre><h3 id="4、嵌入式的开发模式"><a href="#4、嵌入式的开发模式" class="headerlink" title="4、嵌入式的开发模式"></a>4、嵌入式的开发模式</h3><pre><code>    非嵌入式的开发：A类计算机编写源代码-&gt;编译得到可执行程序-&gt;发布给A类计算机执行。    嵌入式的开发：A类计算机编写源代码-&gt;编译得到可执行程序-&gt;发布给B类计算机执行。    为什么需要交叉编译：主要是嵌入式的CPU比较简单，本身无法安装开发工具，有的甚至没有操作系统，所谓的交叉编译就是用高性能的计算机为低性能的计算机开发软件。    交叉编译的特点：必须使用专用的交叉编译工具，由于编译出的程序无法再本机执行，因此需要把程序通过特殊方法加载到目标设备上执行（烧写）。</code></pre><h3 id="5、为什么需要SD卡等辅助设备"><a href="#5、为什么需要SD卡等辅助设备" class="headerlink" title="5、为什么需要SD卡等辅助设备"></a>5、为什么需要SD卡等辅助设备</h3><pre><code>    嵌入式设备所运行的软件（应用、库、文件系统、内核、驱动、引导程序）不会从本机上产生，它需要从其他机器上通过特殊复制SD卡上，需要嵌入式设备从SD卡启动，来运行、调试相关软件。    SD卡是嵌入式设备在没有安装好操作系统的情景下常用的一种调试方法。    网络接口是安装引导程序、操作系统后常用的一种调试方法，常用的网络调试工具有TFTP、FTP、NFS。    USB也建议进行调试，但不稳定而且对开发的计算机有特殊要求，基本不用。</code></pre><h2 id="二、ARM处理器介绍"><a href="#二、ARM处理器介绍" class="headerlink" title="二、ARM处理器介绍"></a>二、ARM处理器介绍</h2><h3 id="1、ARM的发展历史"><a href="#1、ARM的发展历史" class="headerlink" title="1、ARM的发展历史"></a>1、ARM的发展历史</h3><pre><code>    ARM的前身是艾康电脑，于1978年成立在英国剑桥。    在1980年左右，苹果电脑开始与艾康电脑合作开发新的ARM核心。    1995年推出全球第一款商用的RISC处理器。        精简指令集：只集成了一些基础运算的指令。        复杂指令集：它比精简指令集功能更强、指令更多，优点是使用汇编编程时更方便快捷，但随着高级语言的发展这个优势不复存在，反而缺点功耗高、效率低、耗电更明显，对于嵌入式设备说这些缺点是致命的。    1990年艾康电脑财务危机，接受苹果的投资分割出独立的子公司ARM（Advanced RISC Machine），ARM公司正式成立。    从1991年开始推出第一款嵌入式精简指令集处理器架构。    （时间不确定，仅供参考）    1993年，发布ARM7    1997年，发布ARM9    2001年，发布ARMv6    2002年，发布ARM11    2004年，发布ARMv7，同时分出三个系列是：Cortex-A Cortex-R Cortex-M    2005年，发布Cortex-A8    2007年，发布Cortex-A9    2010年，发布Cortex-A15    2011年，发布ARMv8    2012年，发布64位处理器</code></pre><h3 id="2、ARM的商业模式和生态系统"><a href="#2、ARM的商业模式和生态系统" class="headerlink" title="2、ARM的商业模式和生态系统"></a>2、ARM的商业模式和生态系统</h3><pre><code>    ARM之前的半导体行业，Intel、ADM、Motorola等，自己设计IC、自己生成芯片、自己销售。    而ARM只负责设计IC，出卖自己的设计IP，自己不生产芯片，而是把IP授权给其他半导体厂商，来收取授权费。    因此ARM不是一家半导体厂商，而是一家设计公司。    ARM的启示：        不要抱怨自己的劣势，劣势反而可能是机会。        要想成功，得先学会帮助别人、成全别人。        社会的成熟标志就是分工不断的细化。        ARM发展的很快，也很慢。</code></pre><h3 id="3、为什么选择三星"><a href="#3、为什么选择三星" class="headerlink" title="3、为什么选择三星"></a>3、为什么选择三星</h3><pre><code>    本身使用广泛，有良好的企业应用基础。    资料多、积累好、方便学习。    开发板和方案商多，软硬件平台好找。    体系很典型，适用于学习。</code></pre><h3 id="4、ARM的版本号"><a href="#4、ARM的版本号" class="headerlink" title="4、ARM的版本号"></a>4、ARM的版本号</h3><pre><code>    ARM型号命名问题        1.ARM7和ARMv7不是一回事        2.Cortex-A9比Cortex-A7更先推出        3.型号很混乱，没有规律    ARM的几种型号        内核版本号 ARMv7        Soc版本号 Cortex-A8        芯片型号 S5PV210        内核版本号和Soc版本号由ARM公司确定，芯片型号由半导体生产厂商确定。</code></pre><h2 id="三、开发板介绍"><a href="#三、开发板介绍" class="headerlink" title="三、开发板介绍"></a>三、开发板介绍</h2><pre><code>九鼎创展 x210V3s 目前已经停产，阅读硬件手册CPU：S5PV210 1GHz内存：512MB/1GB DDR2硬盘：4GB inand串口：两路 RS232 接口，默认andorid2.3,WINCE使用uart0作为调试串口，android4.0和linux使用uart2作为调试串口，靠近电源接口。SD：2个SD卡接口，在使用 SD 卡启动时，一定要插到右侧的卡槽，否则无法从 SD 卡启动。LED：四路LED+1电源信号灯复位按钮：关机，并没有重启的功能。硬件开机开关：长按开机，9V直流电源启动配置开关：拨到最上面是SD启动，最下面是USB，拨码开关靠近纽扣电池。触摸屏：电阻、电容屏都支持WIFI：外接USB无线网卡网卡：有线以太网 DM9000CEP</code></pre><h2 id="四、开发环境搭建"><a href="#四、开发环境搭建" class="headerlink" title="四、开发环境搭建"></a>四、开发环境搭建</h2><h3 id="1、安装串口驱动"><a href="#1、安装串口驱动" class="headerlink" title="1、安装串口驱动"></a>1、安装串口驱动</h3><pre><code>    右击我的电脑-&gt;管理-&gt;设备管理器-&gt;串口，查看COM编号</code></pre><h3 id="2、安装串口通信工具"><a href="#2、安装串口通信工具" class="headerlink" title="2、安装串口通信工具"></a>2、安装串口通信工具</h3><pre><code>    安装PuTTY-&gt;串口(COM编号，速度115200)-&gt;保存会话-&gt;双击会话。    长按开机按钮-&gt;显示字符即可。</code></pre><h3 id="3、安装SD卡烧写工具"><a href="#3、安装SD卡烧写工具" class="headerlink" title="3、安装SD卡烧写工具"></a>3、安装SD卡烧写工具</h3><pre><code>    以管理员身份运行x210_Fusing_Tool.exe，如果无法运行则安装vc2008运行库。    单击Browse按钮，选择要烧写的文件led_image.bin，单机Add按钮，单机START按钮，出现Fusing image done提示信息则表示烧成功。    注意：如果出现不可写的信息，问题1没有以管理员身份运行，问题2SD卡补上锁，否则就是SD卡损坏，请更换SD卡。</code></pre><h3 id="4、安装ARM交叉编译器"><a href="#4、安装ARM交叉编译器" class="headerlink" title="4、安装ARM交叉编译器"></a>4、安装ARM交叉编译器</h3><pre><code>    拷贝arm-2009q3.tar.bz2到共享目录，剪切到ubuntu主目录下，右击压缩包-&gt;解压到此处。    重命名为arm-linux-gnu,从终端进入arm-linux-gnu/bin，执行pwd命令，拷贝路径。    执行 sudo vi /etc/environment 打开环境变量配置文件，在PATH环境变量字符串的最前面添加路径，与后面的用':'分隔，然后保存退出。    在终端中执行 source /etc/environment    执行arm-none-linux-gnueabi-gcc -v 可以查看交叉编译器的版本信息。    注意：安装交叉编译器时以厂商提供的为准。为什么会用到汇编语言：    C语言等高级语言的执行是需要一个环境的，比如：设置栈顶的指针    初始化一些硬件环境，比如：关闭看门狗、初始化DDR    对于性能有严苛要求的算法，比如：音视频解码器</code></pre><h2 id="一、ARM的体系结构"><a href="#一、ARM的体系结构" class="headerlink" title="一、ARM的体系结构"></a>一、ARM的体系结构</h2><h3 id="1、ARM处理器有7种工作模式"><a href="#1、ARM处理器有7种工作模式" class="headerlink" title="1、ARM处理器有7种工作模式"></a>1、ARM处理器有7种工作模式</h3><pre><code>    用户模式 执行正常的用户程序    系统模式 操作系统专用    快速中断 调速数据传输    外部中断 用于处理中断    特权模式 操作系统专用的保护域    数据访问中止 虚拟存储    未定义指令 遇到不支持的指令时进入此模式    分类：        用户模式和特权模式        正常模式和异常模式</code></pre><h3 id="2、ARM处理器的寄存器"><a href="#2、ARM处理器的寄存器" class="headerlink" title="2、ARM处理器的寄存器"></a>2、ARM处理器的寄存器</h3><pre><code>    一共37个寄存器，正常模式下能访问17个，异常模式下能访问18个。    r0~r7 所有模式共用，也叫未分组寄存器，一旦模式切换就要立即备份。（但由于其通用性，在异常中断所引起的处理器模式切换时，其使用的是相同的物理寄存器，所以很容易遭到破坏。 ）    r8~r12 除快速中断外，其他模式共用    r1### 3、r14 正常模式共用，其他模式有自己私有的    r15 程序计数器，它记录着处理器要执行的下一条指令，给它赋值可以达到跳转的效果，所有模式共用    CPSR 当前程序状态寄存器，所有模式共用    SPSR 备份程序状态寄存器，正常模式没有此寄存器，其他模式有自己私有的</code></pre><h2 id="二、流水线"><a href="#二、流水线" class="headerlink" title="二、流水线"></a>二、流水线</h2><pre><code>通过合理安排硬件的分工来达到提高执行速度的效果，硬件本身的计算速度并没有提高。互锁和跳转会影响流水线的速度。</code></pre><h2 id="三、ARM的寻址方式"><a href="#三、ARM的寻址方式" class="headerlink" title="三、ARM的寻址方式"></a>三、ARM的寻址方式</h2><pre><code>立即寻址       ADD R0,R0,#1 &lt;=&gt; R0 += 1寄存器寻址     add r0,r0,r1 &lt;=&gt; r0 += r1寄存器间接寻址 ADD R0,R1,[R2] &lt;=&gt; R0 = R1 + *R2寄存器偏移寻址 add R0,R0,R2,LSL #3 &lt;=&gt; R0 = R0 + R2 &lt;&lt; 3基址变址寻址   ADD R0,R0,[R1,#4] &lt;=&gt; R0 = R0 + *(R1+4)多寄存器寻址    LDMIA R0,{R1,R2,R3,R4}        R1 = *(R0+0)        R2 = *(R0+4)        R3 = *(R0+8)        R4 = *(R0+12)    STMIA R0,{R3‐R5,R10}        *(R0+0) = R3        *(R0+4) = R4        *(R0+8) = R5        *(R0+12) = R10堆栈寻址    满堆栈：栈顶指针始终指向最后一个加入的元素    空堆栈：栈顶指针始终指向接下要用元素位置    递增：从低地址向高地址使用    递减：从高地址向高地址使用    因此堆栈有四各工作方式：        满增、满减、空增、空减</code></pre><h2 id="四、ARM指令集"><a href="#四、ARM指令集" class="headerlink" title="四、ARM指令集"></a>四、ARM指令集</h2><h3 id="1、ARM指令格式"><a href="#1、ARM指令格式" class="headerlink" title="1、ARM指令格式"></a>1、ARM指令格式</h3><pre><code>    &lt;opcode&gt; {&lt;cond&gt;} {S} &lt;Rd&gt;,&lt;Rn&gt;,&lt;operand&gt;     &lt;&gt;为必选项，{}为可选项    opcode 为操作码，如ADD表示算术加操作指令    {&lt;cond&gt;} 决定指令是否执行的条件    {S}决定指令执行是否影响CPSR寄存器的值为目的寄存器    rd 目标寄存器    rn 第一个操作数为寄存器    operand 第二个操作数    注意：使用条件码可以实现逻辑操作，节省跳转语句，提高代码的执行效率，如果不使用条件码，默认无条件执行。    常用的条件码：        EQ 相等        NE 不等</code></pre><h3 id="2、跳转指令（类似C语言中的goto）"><a href="#2、跳转指令（类似C语言中的goto）" class="headerlink" title="2、跳转指令（类似C语言中的goto）"></a>2、跳转指令（类似C语言中的goto）</h3><pre><code>    B 短距离跳转，32M范围内，速度快，使用方便    BL 长距离跳转，范围不限，它会自动将下一条指令保存到r14中，然后跳转到目标位置后执行，执行结束后，可以把r14中的数据赋值给PC，实现返回的效果。</code></pre><h3 id="3、数据处理指令"><a href="#3、数据处理指令" class="headerlink" title="3、数据处理指令"></a>3、数据处理指令</h3><pre><code>    ARM 汇编中不支持乘除等一些复杂操作，只能把它们分解成一些简单的操作。    主要操作：赋值、加、减、位移、与、或、异或</code></pre><h3 id="4、程序状态寄存器传输指令"><a href="#4、程序状态寄存器传输指令" class="headerlink" title="4、程序状态寄存器传输指令"></a>4、程序状态寄存器传输指令</h3><pre><code>    备份状态寄存器：MSR    恢复状态寄存器：MRS</code></pre><h3 id="5、Load、Store指令"><a href="#5、Load、Store指令" class="headerlink" title="5、Load、Store指令"></a>5、Load、Store指令</h3><pre><code>    主要操作：把数据从内存加载到寄存器、把寄存器中的数据加载到内存。    单个：    LDR 从内存到寄存器    STR 从寄存器到内存    批量：    LDM 从内存到寄存器    STM 从寄存器到内存    配合堆栈操作：    FD 满递减堆栈    ED 空递减堆栈    FA 满递增堆栈    EA 空递增堆栈    寄存器中地址的值修改方式：    IA 每次传送后地址加4    IB 每次传送前地址加4    DA 每次传送后地址减4    DB 每次传送前地址减4</code></pre><h3 id="6、异常中断产生指令"><a href="#6、异常中断产生指令" class="headerlink" title="6、异常中断产生指令"></a>6、异常中断产生指令</h3><pre><code>    SWI 向CPU发送一个中断编号，切换到系统模式，根据异常向量表，跳转到相应的位置处理异常。</code></pre><h2 id="五、Thumb指令"><a href="#五、Thumb指令" class="headerlink" title="五、Thumb指令"></a>五、Thumb指令</h2><pre><code>Thumb是ARM体系结构中一种16位的指令集,密度比较高的。Thumb指令体系并不完整，只支持通用功能，必要时仍需要使用ARM指令，如进入异常时。其指令的格式与使用方式与ARM指令集类似，而且使用并不频繁，Thumb指令集作一般了解。</code></pre><h2 id="六、ARM伪指令"><a href="#六、ARM伪指令" class="headerlink" title="六、ARM伪指令"></a>六、ARM伪指令</h2><pre><code>有一些特殊指令助记符，这些助记符与指令系统的助记符不同，没有相对应的操作码。通常称这些特殊指令助记符为伪指令，他们所完成的操作称为伪操作。伪指令在源程序中的作用是为完成汇编程序作各种准备工作的，这些伪指令仅在汇编过程中起作用，一旦汇编结束，伪指令的使命就完成。它们的作用类似于C语言中的宏。</code></pre><h2 id="七、GDB调试ARM汇编代码"><a href="#七、GDB调试ARM汇编代码" class="headerlink" title="七、GDB调试ARM汇编代码"></a>七、GDB调试ARM汇编代码</h2><h3 id="1、准备一段ARM汇编代码"><a href="#1、准备一段ARM汇编代码" class="headerlink" title="1、准备一段ARM汇编代码"></a>1、准备一段ARM汇编代码</h3><h3 id="2、编译成目标文件"><a href="#2、编译成目标文件" class="headerlink" title="2、编译成目标文件"></a>2、编译成目标文件</h3><pre><code>    arm-none-linux-gnueabi-as -g test.S -o test.o</code></pre><h3 id="3、编译成可执行文件"><a href="#3、编译成可执行文件" class="headerlink" title="3、编译成可执行文件"></a>3、编译成可执行文件</h3><pre><code>    arm-none-linux-gnueabi-ld test.o -o test</code></pre><h3 id="4、使用ARM模拟器运行"><a href="#4、使用ARM模拟器运行" class="headerlink" title="4、使用ARM模拟器运行"></a>4、使用ARM模拟器运行</h3><pre><code>    安装ARM模拟器：sudo apt-get autoremove qemu-user    在模拟器中执行：qemu-arm -g 1394 test        注意：数字用来在GDB中定位程序，不要关闭，新建一个终端。</code></pre><h3 id="5、使用GDB运行并与模拟器建立联系"><a href="#5、使用GDB运行并与模拟器建立联系" class="headerlink" title="5、使用GDB运行并与模拟器建立联系"></a>5、使用GDB运行并与模拟器建立联系</h3><pre><code>    在新的终端下执行：arm-none-linux-gnueabi-gdb test    在GDB中与模拟建立连接：target remote localhost:1394    注意：数字要一致    l 查看代码    n/s 用于单步执行    info r rx 查看寄存器中的值</code></pre><h2 id="八、S5PV210的启动流程"><a href="#八、S5PV210的启动流程" class="headerlink" title="八、S5PV210的启动流程"></a>八、S5PV210的启动流程</h2><h3 id="1、常用的硬件特性"><a href="#1、常用的硬件特性" class="headerlink" title="1、常用的硬件特性"></a>1、常用的硬件特性</h3><pre><code>    内存：        ROM与RAM：            ROM只读存储器，一旦写入后就不可以轻易更改，在强紫外线或高电压下才能修改，一般用于存储固定的程序如：BIOS程序。RAM随机存储器，可以读可写。        RAM分类：            SRAM：静态随机存储器，上电可以直接使用，过程中不需要刷新，速度快，但成本非常高。            DRAM：动态随机存储器，也就是常说的DDR，上电后必初始化不能直接使用，过程中需要不停的刷新，速度比SRAM要慢，但价格低。    外存：        NorFlash：容量小，价格高，优点是可以与CPU总线直接联接，上电后直接读取，可以作为启动介质。        NandFlash：容量大，价格低，缺点是不能总线式访问，也就是与与CPU直接通信，需要CPU先运行一些初始化程序，然后按照时序读写。</code></pre><h3 id="2、各种计算机的启动方式"><a href="#2、各种计算机的启动方式" class="headerlink" title="2、各种计算机的启动方式"></a>2、各种计算机的启动方式</h3><pre><code>    PC：很小容量的NorFlash(BIOS)+很大容量的硬盘(类似NandFlash)+很大容量的DRAM。    单片机：很小容量的NorFlash+很小容量的SRAM。    嵌入式：SoC内置很小容量的SARM+很大容量的NandFlash+很大容量的DRAM。    S5PV210：SoC内置很小容量的iROM+SoC内置很小容量的SARM+很大容量的NandFlash+很大容量的DRAM。    iROM烧写了一段程序用于控制整个系统的启动过程。</code></pre><h3 id="3、S5PV210的启动流程"><a href="#3、S5PV210的启动流程" class="headerlink" title="3、S5PV210的启动流程"></a>3、S5PV210的启动流程</h3><pre><code>    从S5PV210_iROM_ApplicationNote_Preliminary文档中可以看出整个启动流程分为5个步骤：    1.iROM阶段(BL0)    2.BL1阶段    3.BL2阶段    4.拷贝OS到DRAM    5.从DRAM中启动OS   S5PV210芯片中有64KB的iROM，里面烧写一些程序负责：        1.初始化系统时钟（最低频率），使能一些用于启动的设备。        2.根据拨码开关确定启动模式，选择从个外部NandFlash把一部分引导程序加载到SRAM(96KB)里，然后进入BL1阶段。        3.然后SRAM中的引导程序把初始化时钟（最合适频率），初始化DRAM，然后把剩下的引导程序拷贝到DRAM中，进入BL2阶段。        4.把所有的设备初始化完成，拷贝OS到DRAM中。        5.最后启动OS</code></pre><h2 id="一、iROM完成的工作"><a href="#一、iROM完成的工作" class="headerlink" title="一、iROM完成的工作"></a>一、iROM完成的工作</h2><pre><code>1、关闭看门狗2、初始化调整缓存3、初始化栈内存地址4、初始化堆内存地址5、初始化块设备拷贝函数6、设置PLL并且设备系统时钟7、拷贝BL1阶段的代码到SRAM中8、检查被拷贝程序的校验和9、检查是否安全模式10、跳转到BL1的起始代码处注意：iROM中已经有固化的代码，其实不需要再做一遍，但引导程序为了能够通用会把iROM中做的事情再做一遍。</code></pre><h2 id="二、BL1中需要完成的工作"><a href="#二、BL1中需要完成的工作" class="headerlink" title="二、BL1中需要完成的工作"></a>二、BL1中需要完成的工作</h2><h3 id="1、以引导操作系统为目的"><a href="#1、以引导操作系统为目的" class="headerlink" title="1、以引导操作系统为目的"></a>1、以引导操作系统为目的</h3><pre><code>1.电源锁定2.初始化DRAM3.设置内存映射表4.重新设置堆、栈的内存地址5.拷贝BL2到DRAM中6.跳转到BL2中运行</code></pre><h3 id="2、以控制硬件设置为目的"><a href="#2、以控制硬件设置为目的" class="headerlink" title="2、以控制硬件设置为目的"></a>2、以控制硬件设置为目的</h3><pre><code>1.电源锁定2.开始执行控制硬件的业务逻辑代码注意：BL1中的代码前16个字节为校验和</code></pre><h2 id="三、电源锁定"><a href="#三、电源锁定" class="headerlink" title="三、电源锁定"></a>三、电源锁定</h2><pre><code>地址： 0xE010_E81C值:b[0] = 1 b[8] = 1 b[9] =1ldr r0, =0xe010e81c unsigned int* p = 0xe010e81c;ldr r1, [r0] unsigned int val = *p;orr r1, r1, #0x300 val = val | 0x300;orr r1, r1, #0x1 val = val | 0x1;str r1, [r0] *p = val;注意：汇编语言中 . 代表当前位置，b . 就是死循环</code></pre><h2 id="四、计算校验和"><a href="#四、计算校验和" class="headerlink" title="四、计算校验和"></a>四、计算校验和</h2><pre><code>根据官方提供mkv210_image.c，重写一份添加校验和工具。</code></pre><h2 id="一、GPIO介绍"><a href="#一、GPIO介绍" class="headerlink" title="一、GPIO介绍"></a>一、GPIO介绍</h2><pre><code>GPIO（General-purpose input/output），通用型之输入输出的简称，其接脚可以供使用者由程控自由使用，PIN脚依现实考量可作为通用输入（GPI）或通用输出（GPO）或通用输入与输出。</code></pre><h3 id="1、优点（集成在CPU内部）"><a href="#1、优点（集成在CPU内部）" class="headerlink" title="1、优点（集成在CPU内部）"></a>1、优点（集成在CPU内部）</h3><pre><code>    低功耗    小封装    成本低    操控简单</code></pre><h3 id="2、GPIO的寄存器"><a href="#2、GPIO的寄存器" class="headerlink" title="2、GPIO的寄存器"></a>2、GPIO的寄存器</h3><pre><code>    GPIOxCON 控制寄存器，用于配置GPIO管脚的功能，每两个二进制位控制一个GPIO管脚，一个寄存器可以最多控制16管脚。        00 输入        01 输出        10 特殊功能        11 保留    GPIOxDAT 数据寄存器，它的用法取决于控制寄存器        GPIOxCON 输入            此时外部设备会对该管脚输入高低电流，从GPIOxDAT寄存器中读取数据（1高，0低）可以知道外部设备的状态，如：可以获取到按键是按下还是弹起。        GPIOxCON 输出            此时向GPIOxDAT寄存器写入，如果写入的是0，该管脚输入低电流，如果写入的是1，该管脚输出高电流，根据外部设备的原理图决定。    GPIOxUP 上/下拉电阻寄存器        用于控制电阻上拉、下拉。        如果电阻上拉，GPIO管脚处于高阻状态，相当于没有接芯片。</code></pre><h2 id="二、点亮LED"><a href="#二、点亮LED" class="headerlink" title="二、点亮LED"></a>二、点亮LED</h2><h3 id="1、查看电路原理图，找到对应的GPIO管脚：GPJ0"><a href="#1、查看电路原理图，找到对应的GPIO管脚：GPJ0" class="headerlink" title="1、查看电路原理图，找到对应的GPIO管脚：GPJ0"></a>1、查看电路原理图，找到对应的GPIO管脚：GPJ0</h3><h3 id="2、打开CPU数据手册，找到对应地址："><a href="#2、打开CPU数据手册，找到对应地址：" class="headerlink" title="2、打开CPU数据手册，找到对应地址："></a>2、打开CPU数据手册，找到对应地址：</h3><pre><code>    GPJ0CON 0xE0200240：        在不修改其它二进制位的前提下，把12~23设置为以下值        [12~15] 0001         [16~19] 0001        [20~23] 0001    GPJ0PUD 0xE0200248        在不修改其它二进制位的前提下,把6~11设置为以下值        [6~11] 000000    GPJ0DAT 0xE0200244        根据电路图得知，GPIO管脚处于低电流时，左边的高电流才会经过LED流向GPIO，LED才会亮。        在不修改其它二进制位的前提下,把3~5设置为以下值        [3~5] 000</code></pre><p>   练习1：点亮最后一个LED灯<br>   练习2：开启峰鸣器<br>        1、查看原理图 PWMTOUT2 ，根据核心板原理图得知 GPD0_2<br>        2、阅读CPU数据手册：<br>            GPD0CON 0xE020_00A0 [8<del>11]:0001<br>            GPD0DAT 0xE020_00A4 [6</del>7]:00<br>            GPD0UP 0xE020_00A8 [2]:1</p><h2 id="三、ARM汇编与C代码混编"><a href="#三、ARM汇编与C代码混编" class="headerlink" title="三、ARM汇编与C代码混编"></a>三、ARM汇编与C代码混编</h2><pre><code>在裸机下使用C语言编程需要确定各内存段的位置，堆内存、栈内存在BL0中已经设置过了，因此还需要确定代码段、数据段、静态数据段，可以通过链接脚本来指定各内存段的位置及排列。</code></pre><h3 id="1、什么是链接地址"><a href="#1、什么是链接地址" class="headerlink" title="1、什么是链接地址"></a>1、什么是链接地址</h3><pre><code>    链接地址批的是希望程序执行时所在的地址，编译时通过-Ttext指定。</code></pre><h3 id="2、什么是运行地址"><a href="#2、什么是运行地址" class="headerlink" title="2、什么是运行地址"></a>2、什么是运行地址</h3><pre><code>    是程序在运行时，实际所处的位置。    如果运行地址和链接地址不匹配，代码在进行绝对跳转时就会出现错乱。</code></pre><h3 id="3、链接脚本中究竟要做什么"><a href="#3、链接脚本中究竟要做什么" class="headerlink" title="3、链接脚本中究竟要做什么"></a>3、链接脚本中究竟要做什么</h3><pre><code>    链接脚本是用来指挥链接器工作的，它是一个规则文件。    链接器会根据链接脚本中的规则来排列目标文件的代码段，谁排在第一个，谁的第一个函数就是入口函数。    链接脚本关键内存是：段名+地址</code></pre><h3 id="4、链接脚本的内容"><a href="#4、链接脚本的内容" class="headerlink" title="4、链接脚本的内容"></a>4、链接脚本的内容</h3><pre><code>    SECTIONS{} 它是整个链接脚本的全部    .代表当前地址    =表示赋值</code></pre><pre><code>        SECTIONS        {            . = 0xd0020010;            .text : {                start.o                *(.text)            }            .data : {                *(.data)            }            .bss : {                *(.bss)            }        }</code></pre><pre><code>5、链接脚本的使用</code></pre><h2 id="一、串口通信基本原理"><a href="#一、串口通信基本原理" class="headerlink" title="一、串口通信基本原理"></a>一、串口通信基本原理</h2><pre><code>串口是一种非常简单的通信方式，它是位发送接收数据，虽然它比并行通信要慢，但是它能实现远距离的通信，最长可达1200米。由于通信简单、稳定容易实现一般用作嵌入式开发中的调试方式，也用作PC与嵌入式设备的指令发送。</code></pre><h3 id="1、串口通信的重要参数"><a href="#1、串口通信的重要参数" class="headerlink" title="1、串口通信的重要参数"></a>1、串口通信的重要参数</h3><pre><code>    波特率：每秒的位数，表示每秒传输的比特数，比如：115200，表示每秒发送115200bit，它要与通信距离成反比，距离越远，波特率要越低，常用的波特率：115200，9600。    数据位：表示通信中实际每帧中数据的位数，一般常设置### 7、8位，如果要传输标准的ASCII字符只需要7位即可，如果是扩展的ASCII字符需要8位。    奇偶校验位：用于检查数据在传输过程是否出错，比如有：偶校验、奇校验、标记、空格方式，也可以不校验。    奇偶校验并不能完全杜绝数据出错，但可以大大提高数据的可靠性。    停止位：用于标记数据帧的结束，一般取1位或两位，不光是用于标记数据帧的结束，还为计算机与设备之间提供了时钟校验的时间，但停止位会占用数据空间，也会导致速度下降。    数据流控制：在串口通过过程中，由于计算机和设备之间速度不匹配或受其它因素影响，可能会造成数据丢失。比如：计算机缓冲区满的情况下，继续接收数据，新发过来的数据就无法处理，造成数据丢失，这时就可以控制数据流的速度，确保数据不会丢失。通用异步接收器UART：    通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UART。它将要传输的资料在串行通信与并行通信之间加以转换。作为把并行输入信号转成串行输出信号的芯片，UART通常被集成于其他通讯接口的连结上。    每一个UART都包含四个主要部分：        波特率发生器、控制单元、发送器、接收器</code></pre><h3 id="2、UART数据传输模式"><a href="#2、UART数据传输模式" class="headerlink" title="2、UART数据传输模式"></a>2、UART数据传输模式</h3><pre><code>    轮询模式：比较简单，就是一不停的询问状态寄存器，是否有新的数据，如果有则读取，或者询问状态寄存器，上一波数据是否发送完成，如果完成则继续发送后续数据。    中断模式：CPU该干嘛干嘛，当有数据来时，产生中断，CPU会暂停手里的工作，先接收数据，再返回继续工作。    DMA模式：通常用于数据的转移和复制，正常情况下CPU从源地址复制数据到寄存器，再从寄存器复制数据到目标地址，这个操作由CPU来执行，但这样CPU就不再干其它事情了，可以设置UART的DMA模式，交给DMA来自动执行，这样CPU就不会被占用了。    红外线模式：采用红外线进行通过时的特殊时序。    回环模式：是一种用来测试数据完整性的械，发出的数据再接收回来，如果与发出的不符，则数据丢失。    FIFO模式：是一种数据先进先出，用于速度不匹配情况的工作模式。</code></pre><h3 id="3、数据的发送与接收"><a href="#3、数据的发送与接收" class="headerlink" title="3、数据的发送与接收"></a>3、数据的发送与接收</h3><pre><code>    UART发送和接收数据帧是可编程的，格式：5~8位数据位+1位可选的奇偶校验位+1~2停止位，通过设寄存器进行控制。    有专门用来发送、接收数据的寄存器，和标志数据的状态寄存器。</code></pre><h3 id="4、波特率"><a href="#4、波特率" class="headerlink" title="4、波特率"></a>4、波特率</h3><pre><code>    波特率由波特率发生器产生，其实就是个时钟分频器。</code></pre><h2 id="二、S5PV210的UART功能寄存器"><a href="#二、S5PV210的UART功能寄存器" class="headerlink" title="二、S5PV210的UART功能寄存器"></a>二、S5PV210的UART功能寄存器</h2><pre><code>查看S5PV210芯片手册ULCONn 线程控制寄存器，主要作是设置各个UART串口通信接口的数据帧格式以及通信模式。    0xE2900800    正常模式或红外线模式    奇偶校校验    停止位    数据位UCONn UART控制寄存器    DMA模式设置    时钟选择    中断模式设置    回环模式设置UTRSTATn 收发状态寄存器，用来实时指示缓冲区寄存器的状态，通过检查它能得知是否能发送和接收。UTXHn 发送缓冲区寄存器，需要发送的数据定入该寄存器即可，UART会自动发送。URXHn 接收缓冲区寄存器，读取后会自动继续接收后续数据。UBRDIVn/UDIVSLOTn 波特率分频寄存器/波特率分频槽寄存器 用于设置UART的波特率。</code></pre><p>  //  作业：实现一个简历shell程序<br>        能够解析命令，执行相应的操作。</p><h2 id="一、中断的基本概念"><a href="#一、中断的基本概念" class="headerlink" title="一、中断的基本概念"></a>一、中断的基本概念</h2><h3 id="1、中断的基本概念和处理过程"><a href="#1、中断的基本概念和处理过程" class="headerlink" title="1、中断的基本概念和处理过程"></a>1、中断的基本概念和处理过程</h3><pre><code>    当计算机正在执行正常的正常，如果出现异常情况，计算机停止工作，保存当前程序运行所必备的重要参数和状态信息，转而去处理异常，处理结束后再返回到当前程序继续执行，这种处理异常情况的方式叫中断。    通常处理异常情况是轮询（就是不停的检查），实现一段程序，不断的查询相应情况是否发生，如果发生再进行处理，这种处理异常的缺点就是无法执行其他任务，如果要解决的问题比较复杂，这种极端情况就会产生。    针对以上问题ARM设计出中断处理系统，中断独立于主程序之外，在主程序中并没有等待事件可响应函数。    中断处理过程：        1、事件发生后，相应的中断源会产生中断请求。        2、CPU接收到中断求后，将停止下在运行的主程序，产生一个断点。        3、CPU转而执行响应中断，转而执行中断服务程序。        4、中断处理程序执行完成后，加到主程序的断点，继续运行主程序。    注意：在产生断点时，要保护现场，即把当前正在执行的下一条指针以及运算过程中产生的临时数据保存下来（压入到栈内存），在中断处理结束后再进行恢复现场（从栈内存再读取出来），这能才能保证主程序不会被中断处理程序破坏。    具备中断处理能力的芯片有哪优点：        1、实现实时处理：利用中断技术，CPU可以实时响应来自内部和外部的中断请求。        2、实现分时操作：CPU可以让多个功能部件和外设同时工作，当外设向CPU发出请求时，CPU才为提供服务，这样利用中断技术，CPU可以服务多个外部设备。        3、紧急故障处理：当系统在运行过程中出现紧急情况，如果电量低、温差大，可以通过中断及时向CPU发出中断请求，做紧急故障处理。        4、待机状态唤醒：绝大多数嵌入式设备都需要具备低功耗和休眠的功能，从休眠状态唤醒到正常工作状态也需要中断技术。</code></pre><h3 id="2、中断源"><a href="#2、中断源" class="headerlink" title="2、中断源"></a>2、中断源</h3><pre><code>    是指能够向CPU发送中断信号的部件和设备，一个系统中往往有多个中断源，每个中断源都是为特定事件所设计的，在ARM的CPU中分为内部中断源和外部中断源。    CPU内部集成许多功能模块，如：定时器、串行通信接口、数模转换器，它们的工作往往不需要CPU的参与，而是达到某个状态或遇到特定值的时候，才需要通过中断让CPU介入处理，这些中断源位置CPU的内部，所以叫内部中断源，便于CPU高效的管理资源。    外部设备也可以作为中断源，它们可以通过高低电平或电平之间的跳变产生中断信号，这些中断源位于CPU的外部也叫外部中断源，方便CPU与外部设备进行通信。</code></pre><h3 id="3、中断信号"><a href="#3、中断信号" class="headerlink" title="3、中断信号"></a>3、中断信号</h3><pre><code>    1.边缘触发型（脉冲信号上升或下降时触发）    2.电平触发型（高电平或低电平触发）    3.状态变化触发型（电平变化触发）</code></pre><h3 id="4、中断向量"><a href="#4、中断向量" class="headerlink" title="4、中断向量"></a>4、中断向量</h3><pre><code>    当中断产生后被CPU检测（巧妙的电路设计）到，就会跳转到一个固定的地址去执行，这个固定的地址就是中断的入口，也叫中断向量。    对于CPU的若干个中断源而言，每个中断源都各自的中断向量，而这些中断向量一般存储在一段连续的地址空间段，称为中断向量区（0xD003_7400）。    由于一个中断源只能占用几个字节或一条指令的长度，因此不能在中断向量区直接处理中断，而是设置一个指令跳转到中断服务程序，而中断服务程序存储在其它位置。</code></pre><h2 id="二、S5PV210的中断系统"><a href="#二、S5PV210的中断系统" class="headerlink" title="二、S5PV210的中断系统"></a>二、S5PV210的中断系统</h2><pre><code>见用户手册</code></pre><h2 id="三、中断实例"><a href="#三、中断实例" class="headerlink" title="三、中断实例"></a>三、中断实例</h2><h3 id="1、中断系统设置"><a href="#1、中断系统设置" class="headerlink" title="1、中断系统设置"></a>1、中断系统设置</h3><pre><code>    1.禁用所有中断 VICINTENCLEAR    2.选择响应的中断类型为外部中断 VICINTSELECT    3.清除中断处理函数的地址 VICADDRESS    4.绑定中断源与中断处理函数 VICADDRESS    5.使能中断 VICINTENABLE</code></pre><h3 id="2、中断设备设置"><a href="#2、中断设备设置" class="headerlink" title="2、中断设备设置"></a>2、中断设备设置</h3><pre><code>    1.设置工作模式为中断模式    2.设置中断触发模式    3.清除中断掩码    4.清除中断挂起### 3、当有中断产生时代码的运行流程    1.暂停主程序    2.根据异常向量表中设计的函数指针，跳转到异常响应函数位置（IRQ_handler）。    3.IRQ异常响应函数，保护现场，然后跳转到直接的中断处理函数irq_handler。    4.在irq_handler函数中调用intc_getvicirqstatus确定哪组VIC产生了中断，然后从对应组的VIC0ADDR,VIC1ADDR,VIC2ADDR,VIC3ADDR寄存器中拷贝出函数指针，这些函数指针是CPU自动帮我们从VICxVECTADDR+NUM寄存器中拷贝出的，然后调用中断处理函数。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM </tag>
            
            <tag> x210V3s </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql中文乱码问题解决 _ C程序插入仍是乱码解决 _ 卸载重装教学</title>
      <link href="/blog/2019/10/21/mysql-zhong-wen-luan-ma-wen-ti-jie-jue-c-cheng-xu-cha-ru-reng-shi-luan-ma-jie-jue-xie-zai-chong-zhuang-jiao-xue/"/>
      <url>/blog/2019/10/21/mysql-zhong-wen-luan-ma-wen-ti-jie-jue-c-cheng-xu-cha-ru-reng-shi-luan-ma-jie-jue-xie-zai-chong-zhuang-jiao-xue/</url>
      
        <content type="html"><![CDATA[<p>操作系统：Ubuntu12.04 LTS</p><p>温馨提示，在修改配置文件时务必备份，以防不测。</p><p>终端输入 <code>sudo vi /etc/mysql/my.cnf</code>  </p><p>在[mysqld]下添加<br>character-set-server=utf8<br>collation-server=utf8_general_ci</p><p>按Esc键退出编译模式<br>:wq  (保存并退出)</p><p>终端输入，重启mysql</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> mysql restart</code></pre><p>进入mysql</p><pre class=" language-bash"><code class="language-bash">mysql -uroot -p</code></pre><p>查看数据库编码</p><pre class=" language-bash"><code class="language-bash">show variables like <span class="token string">"%char%"</span><span class="token punctuation">;</span></code></pre><p>我的如下</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> show variables like <span class="token string">"%char%"</span><span class="token punctuation">;</span>+--------------------------+----------------------------+<span class="token operator">|</span> Variable_name            <span class="token operator">|</span> Value                      <span class="token operator">|</span>+--------------------------+----------------------------+<span class="token operator">|</span> character_set_client     <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_connection <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_database   <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> binary                     <span class="token operator">|</span><span class="token operator">|</span> character_set_results    <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_server     <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> /usr/share/mysql/charsets/ <span class="token operator">|</span>+--------------------------+----------------------------+8 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>use数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> person<span class="token punctuation">;</span></code></pre><p>重新创建表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> person<span class="token punctuation">(</span>ID <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> company <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profession <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qq <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> telephone <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>插入数据看看</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> person <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'我我'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'啊的'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查询数据</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> person<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+--------+------+------+----------------------+----------------------+-----------+------------------+-------------+</span><span class="token operator">|</span> ID                 <span class="token operator">|</span> name   <span class="token operator">|</span> age  <span class="token operator">|</span> sex  <span class="token operator">|</span> company              <span class="token operator">|</span> profession           <span class="token operator">|</span> qq        <span class="token operator">|</span> email            <span class="token operator">|</span> telephone   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------+--------+------+------+----------------------+----------------------+-----------+------------------+-------------+</span><span class="token operator">|</span> <span class="token number">1</span>                  <span class="token operator">|</span> 我我   <span class="token operator">|</span> <span class="token number">1</span>    <span class="token operator">|</span> <span class="token number">1</span>    <span class="token operator">|</span> <span class="token number">1</span>                    <span class="token operator">|</span> 啊的                 <span class="token operator">|</span> <span class="token number">1</span>         <span class="token operator">|</span> <span class="token number">1</span>                <span class="token operator">|</span> <span class="token number">1</span>           <span class="token operator">|</span></code></pre><p>恩，中文乱码已经解决。</p><hr><p><strong>C程序插入mysql数据库仍然显示乱码？</strong></p><p>#include &lt;mysql/mysql.h&gt;<br>源代码中加入以下代码</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 设定数据库编码</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET NAMES 'utf8'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET CHARACTER SET utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET CHARACTER_SET_RESULT = utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>源码参考</p><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">//数据存储到数据库</span>    MYSQL<span class="token operator">*</span> conn<span class="token punctuation">;</span>    bool isAutoCommit<span class="token punctuation">;</span>    conn <span class="token operator">=</span> <span class="token function">mysql_init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> conn<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> ip<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> user<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> passwd<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> database<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token function">mysql_real_connect</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ip<span class="token punctuation">,</span>user<span class="token punctuation">,</span>passwd<span class="token punctuation">,</span>database<span class="token punctuation">,</span>port<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---errno:%d error:%s\n\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    isAutoCommit <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token function">mysql_autocommit</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>isAutoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设定数据库编码</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET NAMES 'utf8'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET CHARACTER SET utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token string">"SET CHARACTER_SET_RESULT = utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span>SQL_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 置字节字符串cmd的前SQL_SIZE个字节为零且包括‘\0’</span>    <span class="token function">bzero</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> SQL_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建person表</span>    <span class="token comment" spellcheck="true">// strcpy(cmd, "CREATE TABLE person(ID varchar(24) PRIMARY KEY,name text,age text, sex text, company text, profession text, qq text, email text, telephone text);");</span>    <span class="token comment" spellcheck="true">// 将sql语句写入cmd变量</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"INSERT INTO person values('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s');"</span><span class="token punctuation">,</span>idnumber<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>company<span class="token punctuation">,</span>profession<span class="token punctuation">,</span>qq<span class="token punctuation">,</span>email<span class="token punctuation">,</span>telephone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n\n"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"errno:%d error:%s\n\n"</span><span class="token punctuation">,</span><span class="token function">mysql_errno</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//mysql_affected_rows(conn);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"增加成功\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><hr><p>如果你玩脱了，下面是<strong>卸载重装教学</strong></p><p>卸载</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> purge mysql-*<span class="token function">sudo</span> <span class="token function">rm</span> -rf /etc/mysql/ /var/lib/mysql<span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove<span class="token function">sudo</span> <span class="token function">apt-get</span> autoclean</code></pre><p>重装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server<span class="token function">sudo</span> apt <span class="token function">install</span> mysql-client<span class="token function">sudo</span> apt <span class="token function">install</span> libmysqlclient-dev</code></pre><p>检验是否安装mysql成功</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">netstat</span> -tap <span class="token operator">|</span> <span class="token function">grep</span> mysql</code></pre><p>进入mysql</p><pre class=" language-bash"><code class="language-bash">mysql -uroot -p</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下嵌入式Web服务器BOA和CGI编程开发</title>
      <link href="/blog/2019/10/17/linux-xia-qian-ru-shi-web-fu-wu-qi-boa-he-cgi-bian-cheng-kai-fa/"/>
      <url>/blog/2019/10/17/linux-xia-qian-ru-shi-web-fu-wu-qi-boa-he-cgi-bian-cheng-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><p><strong>操作系统</strong>：Ubuntu12.04 LTS<br><strong>boa下载地址</strong>（但是我找不到…）：<a href="http://www.boa.org/" target="_blank" rel="noopener">http://www.boa.org/</a><br>我是其他网站找到的资源，但是忘了网址了，所以我直接上云盘资源<br>链接: <a href="https://pan.baidu.com/s/1_SpR9MDcmSB8jpDm76fw6A" target="_blank" rel="noopener">https://pan.baidu.com/s/1_SpR9MDcmSB8jpDm76fw6A</a> 提取码: hb1e<br>可以参考：<a href="https://www.cnblogs.com/jasonxiang/archive/2012/10/17/ubuntu_boa.html" target="_blank" rel="noopener">Ubuntu下boa服务器的配置与搭建</a><br> <strong>cgi</strong>：直接终端安装 sudo apt-get install apache2<br> 可以参考： <a href="https://blog.csdn.net/heibaiyijing/article/details/8538413" target="_blank" rel="noopener">ubuntu 下搭建cgi环境</a></p><h2 id="二、相关配置（部分）"><a href="#二、相关配置（部分）" class="headerlink" title="二、相关配置（部分）"></a>二、相关配置（部分）</h2><p><strong>boa我的配置</strong>：/etc/boa$ sudo vi boa.conf</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下面几个都是关键点，基本就错这几个点上</span><span class="token comment" spellcheck="true"># cumentRoot /var/www</span><span class="token comment" spellcheck="true">#将cgi保存的实际位置和网站地址做个对应</span><span class="token comment" spellcheck="true"># ScriptAlias /cgi-bin/ /var/www/cgi-bin/</span><span class="token comment" spellcheck="true">#cgi脚本运行时能看到的$PATH（可选）</span><span class="token comment" spellcheck="true"># CGIPath /bin:/usr/bin:/usr/local/bin</span><span class="token comment" spellcheck="true">#如果想在任何位置都能运行cgi，要添加这个（可选）</span>AddType application/x-httpd-cgi cgi<span class="token comment" spellcheck="true"># Boa v0.94 configuration file</span><span class="token comment" spellcheck="true"># File format has not changed from 0.93</span><span class="token comment" spellcheck="true"># File format has changed little from 0.92</span><span class="token comment" spellcheck="true"># version changes are noted in the comments</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The Boa configuration file is parsed with a lex/yacc or flex/bison</span><span class="token comment" spellcheck="true"># generated parser.  If it reports an error, the line number will be</span><span class="token comment" spellcheck="true"># provided; it should be easy to spot.  The syntax of each of these</span><span class="token comment" spellcheck="true"># rules is very simple, and they can occur in any order.  Where possible</span><span class="token comment" spellcheck="true"># these directives mimic those of NCSA httpd 1.3; I saw no reason to </span><span class="token comment" spellcheck="true"># introduce gratuitous differences.</span><span class="token comment" spellcheck="true"># $Id: boa.conf,v 1.25 2002/03/22 04:33:09 jnelson Exp $</span><span class="token comment" spellcheck="true"># The "ServerRoot" is not in this configuration file.  It can be compiled</span><span class="token comment" spellcheck="true"># into the server (see defines.h) or specified on the command line with</span><span class="token comment" spellcheck="true"># the -c option, for example:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># boa -c /usr/local/boa</span><span class="token comment" spellcheck="true"># Port: The port Boa runs on.  The default port for http servers is 80.</span><span class="token comment" spellcheck="true"># If it is less than 1024, the server must be started as root.</span><span class="token comment" spellcheck="true"># 端口老是被占用，所以我改掉了</span>Port 88<span class="token comment" spellcheck="true"># Listen: the Internet address to bind(2) to.  If you leave it out,</span><span class="token comment" spellcheck="true"># it takes the behavior before 0.93.17.2, which is to bind to all</span><span class="token comment" spellcheck="true"># addresses (INADDR_ANY).  You only get one "Listen" directive,</span><span class="token comment" spellcheck="true"># if you want service on multiple IP addresses, you have three choices:</span><span class="token comment" spellcheck="true">#    1. Run boa without a "Listen" directive</span><span class="token comment" spellcheck="true">#       a. All addresses are treated the same; makes sense if the addresses</span><span class="token comment" spellcheck="true">#          are localhost, ppp, and eth0.</span><span class="token comment" spellcheck="true">#       b. Use the VirtualHost directive below to point requests to different</span><span class="token comment" spellcheck="true">#          files.  Should be good for a very large number of addresses (web</span><span class="token comment" spellcheck="true">#          hosting clients).</span><span class="token comment" spellcheck="true">#    2. Run one copy of boa per IP address, each has its own configuration</span><span class="token comment" spellcheck="true">#       with a "Listen" directive.  No big deal up to a few tens of addresses.</span><span class="token comment" spellcheck="true">#       Nice separation between clients.</span><span class="token comment" spellcheck="true"># The name you provide gets run through inet_aton(3), so you have to use dotted</span><span class="token comment" spellcheck="true"># quad notation.  This configuration is too important to trust some DNS.</span><span class="token comment" spellcheck="true">#Listen 192.68.0.5</span><span class="token comment" spellcheck="true">#  User: The name or UID the server should run as.</span><span class="token comment" spellcheck="true"># Group: The group name or GID the server should run as.</span>User 0 Group 0 <span class="token comment" spellcheck="true"># ServerAdmin: The email address where server problems should be sent.</span><span class="token comment" spellcheck="true"># Note: this is not currently used, except as an environment variable</span><span class="token comment" spellcheck="true"># for CGIs.</span><span class="token comment" spellcheck="true">#ServerAdmin root@localhost</span><span class="token comment" spellcheck="true"># ErrorLog: The location of the error log file. If this does not start</span><span class="token comment" spellcheck="true"># with /, it is considered relative to the server root.</span><span class="token comment" spellcheck="true"># Set to /dev/null if you don't want errors logged.</span><span class="token comment" spellcheck="true"># If unset, defaults to /dev/stderr</span>ErrorLog /var/log/boa/error_log<span class="token comment" spellcheck="true"># Please NOTE: Sending the logs to a pipe ('|'), as shown below,</span><span class="token comment" spellcheck="true">#  is somewhat experimental and might fail under heavy load.</span><span class="token comment" spellcheck="true"># "Usual libc implementations of printf will stall the whole</span><span class="token comment" spellcheck="true">#  process if the receiving end of a pipe stops reading."</span><span class="token comment" spellcheck="true">#ErrorLog "|/usr/sbin/cronolog --symlink=/var/log/boa/error_log /var/log/boa/error-%Y%m%d.log"</span><span class="token comment" spellcheck="true"># AccessLog: The location of the access log file. If this does not</span><span class="token comment" spellcheck="true"># start with /, it is considered relative to the server root.</span><span class="token comment" spellcheck="true"># Comment out or set to /dev/null (less effective) to disable </span><span class="token comment" spellcheck="true"># Access logging.</span><span class="token comment" spellcheck="true"># AccessLog /var/log/boa/access_log</span><span class="token comment" spellcheck="true"># Please NOTE: Sending the logs to a pipe ('|'), as shown below,</span><span class="token comment" spellcheck="true">#  is somewhat experimental and might fail under heavy load.</span><span class="token comment" spellcheck="true"># "Usual libc implementations of printf will stall the whole</span><span class="token comment" spellcheck="true">#  process if the receiving end of a pipe stops reading."</span><span class="token comment" spellcheck="true">#AccessLog  "|/usr/sbin/cronolog --symlink=/var/log/boa/access_log /var/log/boa/access-%Y%m%d.log"</span><span class="token comment" spellcheck="true"># UseLocaltime: Logical switch.  Uncomment to use localtime </span><span class="token comment" spellcheck="true"># instead of UTC time</span><span class="token comment" spellcheck="true">#UseLocaltime</span><span class="token comment" spellcheck="true"># VerboseCGILogs: this is just a logical switch.</span><span class="token comment" spellcheck="true">#  It simply notes the start and stop times of cgis in the error log</span><span class="token comment" spellcheck="true"># Comment out to disable.</span><span class="token comment" spellcheck="true">#VerboseCGILogs</span><span class="token comment" spellcheck="true"># ServerName: the name of this server that should be sent back to </span><span class="token comment" spellcheck="true"># clients if different than that returned by gethostname + gethostbyname </span>ServerName www.your.org.here<span class="token comment" spellcheck="true"># VirtualHost: a logical switch.</span><span class="token comment" spellcheck="true"># Comment out to disable.</span><span class="token comment" spellcheck="true"># Given DocumentRoot /var/www, requests on interface 'A' or IP 'IP-A'</span><span class="token comment" spellcheck="true"># become /var/www/IP-A.</span><span class="token comment" spellcheck="true"># Example: http://localhost/ becomes /var/www/127.0.0.1</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Not used until version 0.93.17.2.  This "feature" also breaks commonlog</span><span class="token comment" spellcheck="true"># output rules, it prepends the interface number to each access_log line.</span><span class="token comment" spellcheck="true"># You are expected to fix that problem with a postprocessing script.</span><span class="token comment" spellcheck="true">#VirtualHost </span><span class="token comment" spellcheck="true"># DocumentRoot: The root directory of the HTML documents.</span><span class="token comment" spellcheck="true"># Comment out to disable server non user files.</span>DocumentRoot /var/www<span class="token comment" spellcheck="true"># UserDir: The name of the directory which is appended onto a user's home</span><span class="token comment" spellcheck="true"># directory if a ~user request is recieved.</span>UserDir public_html<span class="token comment" spellcheck="true"># DirectoryIndex: Name of the file to use as a pre-written HTML</span><span class="token comment" spellcheck="true"># directory index.  Please MAKE AND USE THESE FILES.  On the</span><span class="token comment" spellcheck="true"># fly creation of directory indexes can be _slow_.</span><span class="token comment" spellcheck="true"># Comment out to always use DirectoryMaker</span>DirectoryIndex index.html<span class="token comment" spellcheck="true"># DirectoryMaker: Name of program used to create a directory listing.</span><span class="token comment" spellcheck="true"># Comment out to disable directory listings.  If both this and</span><span class="token comment" spellcheck="true"># DirectoryIndex are commented out, accessing a directory will give</span><span class="token comment" spellcheck="true"># an error (though accessing files in the directory are still ok).</span>DirectoryMaker /usr/lib/boa/boa_indexer<span class="token comment" spellcheck="true"># DirectoryCache: If DirectoryIndex doesn't exist, and DirectoryMaker</span><span class="token comment" spellcheck="true"># has been commented out, the the on-the-fly indexing of Boa can be used</span><span class="token comment" spellcheck="true"># to generate indexes of directories. Be warned that the output is </span><span class="token comment" spellcheck="true"># extremely minimal and can cause delays when slow disks are used.</span><span class="token comment" spellcheck="true"># Note: The DirectoryCache must be writable by the same user/group that </span><span class="token comment" spellcheck="true"># Boa runs as.</span><span class="token comment" spellcheck="true"># DirectoryCache /var/spool/boa/dircache</span><span class="token comment" spellcheck="true"># KeepAliveMax: Number of KeepAlive requests to allow per connection</span><span class="token comment" spellcheck="true"># Comment out, or set to 0 to disable keepalive processing</span>KeepAliveMax 1000<span class="token comment" spellcheck="true"># KeepAliveTimeout: seconds to wait before keepalive connection times out</span>KeepAliveTimeout 10<span class="token comment" spellcheck="true"># MimeTypes: This is the file that is used to generate mime type pairs</span><span class="token comment" spellcheck="true"># and Content-Type fields for boa.</span><span class="token comment" spellcheck="true"># Set to /dev/null if you do not want to load a mime types file.</span><span class="token comment" spellcheck="true"># Do *not* comment out (better use AddType!)</span>MimeTypes /etc/mime.types<span class="token comment" spellcheck="true"># DefaultType: MIME type used if the file extension is unknown, or there</span><span class="token comment" spellcheck="true"># is no file extension.</span>DefaultType text/plain<span class="token comment" spellcheck="true"># CGIPath: The value of the $PATH environment variable given to CGI progs.</span>CGIPath /bin:/usr/bin:/usr/local/bin<span class="token comment" spellcheck="true"># SinglePostLimit: The maximum allowable number of bytes in </span><span class="token comment" spellcheck="true"># a single POST.  Default is normally 1MB.</span><span class="token comment" spellcheck="true"># AddType: adds types without editing mime.types</span><span class="token comment" spellcheck="true"># Example: AddType type extension [extension ...]</span><span class="token comment" spellcheck="true"># Uncomment the next line if you want .cgi files to execute from anywhere</span><span class="token comment" spellcheck="true">#AddType application/x-httpd-cgi cgi</span><span class="token comment" spellcheck="true"># Redirect, Alias, and ScriptAlias all have the same semantics -- they</span><span class="token comment" spellcheck="true"># match the beginning of a request and take appropriate action.  Use</span><span class="token comment" spellcheck="true"># Redirect for other servers, Alias for the same server, and ScriptAlias</span><span class="token comment" spellcheck="true"># to enable directories for script execution.</span><span class="token comment" spellcheck="true"># Redirect allows you to tell clients about documents which used to exist in</span><span class="token comment" spellcheck="true"># your server's namespace, but do not anymore. This allows you to tell the</span><span class="token comment" spellcheck="true"># clients where to look for the relocated document.</span><span class="token comment" spellcheck="true"># Example: Redirect /bar http://elsewhere/feh/bar</span><span class="token comment" spellcheck="true"># Aliases: Aliases one path to another.</span><span class="token comment" spellcheck="true"># Example: Alias /path1/bar /path2/foo</span>Alias /doc /usr/doc<span class="token comment" spellcheck="true"># ScriptAlias: Maps a virtual path to a directory for serving scripts</span><span class="token comment" spellcheck="true"># Example: ScriptAlias /htbin/ /www/htbin/</span>ScriptAlias /cgi-bin/ /var/www/cgi-bin/</code></pre><p> <strong>cgi我的配置</strong>：sudo vi /etc/apache2/sites-enabled/000-default</p><pre class=" language-bash"><code class="language-bash">   ServerName 127.0.0.1                                                           <span class="token operator">&lt;</span>VirtualHost *:80<span class="token operator">></span>       ServerAdmin webmaster@localhost       DocumentRoot /var/www       <span class="token operator">&lt;</span>Directory /<span class="token operator">></span>           Options FollowSymLinks           AllowOverride None       <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>      <span class="token operator">&lt;</span>Directory /var/www/<span class="token operator">></span>          Options Indexes FollowSymLinks MultiViews          AllowOverride None          Order allow,deny          allow from all      <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>      ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/      <span class="token operator">&lt;</span>Directory <span class="token string">"/usr/lib/cgi-bin"</span><span class="token operator">></span>          AllowOverride None          Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch          Order allow,deny                                                              Allow from all      <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>      ErrorLog <span class="token variable">${APACHE_LOG_DIR}</span>/error.log      <span class="token comment" spellcheck="true"># Possible values include: debug, info, notice, warn, error, crit,</span>      <span class="token comment" spellcheck="true"># alert, emerg.</span>      LogLevel warn      CustomLog <span class="token variable">${APACHE_LOG_DIR}</span>/access.log combined      Alias /doc/ <span class="token string">"/usr/share/doc/"</span>      <span class="token operator">&lt;</span>Directory <span class="token string">"/usr/share/doc/"</span><span class="token operator">></span>          Options Indexes MultiViews FollowSymLinks          AllowOverride None          Order deny,allow          Deny from all          Allow from 127.0.0.0/255.0.0.0 ::1/128      <span class="token operator">&lt;</span>/Directory<span class="token operator">></span>  <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">></span>  </code></pre><h2 id="三、调试运行"><a href="#三、调试运行" class="headerlink" title="三、调试运行"></a>三、调试运行</h2><p> 都配好后运行 sudo ./boa<br> 访问 <a href="http://127.0.0.1:端口号" target="_blank" rel="noopener">http://127.0.0.1:端口号</a><br> 我的就是 <a href="http://127.0.0.1:88" target="_blank" rel="noopener">http://127.0.0.1:88</a><br> gcc -o test.cgi test.c 编译生成 test.cgi<br> 把cgi文件拷贝到 cgi-bin 下<br> 网址就是 <a href="http://localhost:88/cgi-bin/test.cgi" target="_blank" rel="noopener">http://localhost:88/cgi-bin/test.cgi</a><br><img src="https://img-blog.csdnimg.cn/20191017173313468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20191017173501368.png" alt=" "></p><h2 id="四、测试源码参考"><a href="#四、测试源码参考" class="headerlink" title="四、测试源码参考"></a>四、测试源码参考</h2><hr><p>下面提供几个测试代码，转自其他大佬，不过我找不到网址了。<br><strong>1、</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">long</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content-type:text/html\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;HTML>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;HEAD>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;TITLE>multi&lt;/TITLE>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;/HEAD>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;BODY>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;H2 ALIGN=\"center\">multi control&lt;/H2>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;FORM METHOD=\"GET\" ACTION=\"test1.cgi\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;P>Direction:&lt;INPUT TYPE=\"text\" NAME=\"m\" VALUE=\"\" size=\"18\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;P>Step Number:&lt;INPUT TYPE=\"text\" NAME=\"n\" VALUE=\"\" size=\"17\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;P ALIGN=\"left\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;INPUT TYPE=\"SUBMIT\"  VALUE=\"Submit\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;INPUT TYPE=\"RESET\"    VALUE=\"Reset\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;/P>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;/FORM>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;/BODY>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;/HTML>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token operator">=</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"QUERY_STRING"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;P>get no datas and it's wrong."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sscanf</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">"m=%ld&amp;n=%ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;P>the input must be numbers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;P>%ld and %ld multi= %ld"</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20191017173823233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="效果"><br><strong>2、</strong><br>/var/www 下的pass.html</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>用户登陆验证<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"form1"</span> action<span class="token operator">=</span><span class="token string">"/cgi-bin/pass.cgi"</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">></span><span class="token operator">&lt;</span>table align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"center"</span> colspan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span>       <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>用户名<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"Username"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span>       <span class="token operator">&lt;</span>td align<span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>密  码<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"Password"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"登  录"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>       <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"reset"</span> value<span class="token operator">=</span><span class="token string">"取  消"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>/var/www/cgi-bin 下的pass.c</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*=====================================================================cgi例子=====================================================================*/</span><span class="token comment" spellcheck="true">//pass.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getcgidata</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> requestmethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">;</span>       <span class="token keyword">char</span> <span class="token operator">*</span>req_method<span class="token punctuation">;</span>       <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">char</span> pass<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//     printf("Content-type: text/plain; charset=iso-8859-1\n\n");</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Content-type: text/html\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The following is query reuslt:&lt;br>&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       req_method <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"REQUEST_METHOD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       input <span class="token operator">=</span> <span class="token function">getcgidata</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> req_method<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 我们获取的input字符串可能像如下的形式</span>       <span class="token comment" spellcheck="true">// Username="admin"&amp;Password="aaaaa"</span>       <span class="token comment" spellcheck="true">// 其中"Username="和"&amp;Password="都是固定的</span>       <span class="token comment" spellcheck="true">// 而"admin"和"aaaaa"都是变化的，也是我们要获取的</span>       <span class="token comment" spellcheck="true">// 前面9个字符是UserName=</span>       <span class="token comment" spellcheck="true">// 在"UserName="和"&amp;"之间的是我们要取出来的用户名</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>       <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'&amp;'</span> <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                     name<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>                                name<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 前面9个字符 + "&amp;Password="10个字符 + Username的字符数</span>       <span class="token comment" spellcheck="true">// 是我们不要的，故省略掉，不拷贝</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">19</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>       <span class="token punctuation">{</span>              pass<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       pass<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your Username is %s&lt;br>Your Password is %s&lt;br> \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getcgidata</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> requestmethod<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">char</span><span class="token operator">*</span> input<span class="token punctuation">;</span>       <span class="token keyword">int</span> len<span class="token punctuation">;</span>       <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>requestmethod<span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              input <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"QUERY_STRING"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> input<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>requestmethod<span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>              len <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"CONTENT_LENGTH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              input <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                     input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span> input<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                     input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size<span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                            input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> input<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     <span class="token operator">--</span>len<span class="token punctuation">;</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                            i<span class="token operator">++</span><span class="token punctuation">;</span>                            input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> input<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     i<span class="token operator">++</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果图：<br><img src="https://img-blog.csdnimg.cn/20191017174133818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="pass.html"><br>输入数据点击“登录”<br><img src="https://img-blog.csdnimg.cn/20191017174214965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="pass.cgi"><br>自动跳转到 /cgi-bin/pass.cgi ,获取到数据并打印</p><h2 id="五、常见错误"><a href="#五、常见错误" class="headerlink" title="五、常见错误"></a>五、常见错误</h2><p> 你的配置会影响网址，502什么错误也是配置或权限有问题导致的。<br>如：<br><strong>502 Bad Gateway<br>The CGI was not CGI/1.1 compliant.<br>cgi_header: unable to find LFLF</strong><br>1.可能是网址打错了(路径是否和配置文件对应)<br>2.配置有问题<br>3.权限没给足 chmod 777 test.cgi<br>4.代码本身有问题（先测测 cgi-test.cgi）</p><p><strong>提示“保存文件”</strong><br><img src="https://img-blog.csdnimg.cn/20191021090617463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "><br>是直接运行的网页，地址不对，改成 <a href="http://localhost:886/config.html" target="_blank" rel="noopener">http://localhost:886/config.html</a> 即可。</p><h2 id="六、扩展（CCGI，SQLite）"><a href="#六、扩展（CCGI，SQLite）" class="headerlink" title="六、扩展（CCGI，SQLite）"></a>六、扩展（CCGI，SQLite）</h2><p><strong>CGIC</strong>的主站点： <a href="http://www.boutell.com/cgic/" target="_blank" rel="noopener">http://www.boutell.com/cgic/</a><br><strong>SQLite</strong>官网：<a href="http://www.sqlite.org/" target="_blank" rel="noopener">http://www.sqlite.org/</a><br>配置参考大佬博客：<a href="https://blog.csdn.net/a642960662/article/category/6818637" target="_blank" rel="noopener">项目实战</a><br>我在调试中遇到的问题也在大佬的博客下面做了 <strong>评论</strong> ，如果大家碰到问题可以参考一下。<br><strong>补充</strong>：编译时会出错，使用 </p><pre class=" language-bash"><code class="language-bash">gcc -o config.cgi config.c sqlite3.c cgic.c -lsqlite3 -lpthread -ldl</code></pre><p><img src="https://img-blog.csdnimg.cn/20191018150602684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="涉及文件"><br><img src="https://img-blog.csdnimg.cn/2019101815065393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="html效果"><br><img src="https://img-blog.csdnimg.cn/20191018150729649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="cgi页面"><br>数据已写入数据库，可使用以下命令</p><pre class=" language-sql"><code class="language-sql">sqlite3 person<span class="token number">.db</span><span class="token punctuation">.</span><span class="token keyword">table</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> person<span class="token punctuation">;</span></code></pre><p>使用 <strong>mysql</strong>数据库，会出现中文乱码问题，参考<br><a href="https://blog.csdn.net/Ikaros_521/article/details/102664117" target="_blank" rel="noopener">mysql中文乱码问题解决 / C程序插入仍是乱码解决</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
            <tag> HTML </tag>
            
            <tag> CGI </tag>
            
            <tag> BOA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多路复用IO</title>
      <link href="/blog/2019/09/21/duo-lu-fu-yong-io/"/>
      <url>/blog/2019/09/21/duo-lu-fu-yong-io/</url>
      
        <content type="html"><![CDATA[<h2 id="一、IO模型介绍"><a href="#一、IO模型介绍" class="headerlink" title="一、IO模型介绍"></a>一、IO模型介绍</h2><pre><code>    1、阻塞IO，常用的scanf、printf、read、write、cout、cin    2、非阻塞IO，recv、send和Qt中read、write     3、多路复用IO       4、信号驱动IO        5、异步IO</code></pre><h2 id="二、多路复用IO"><a href="#二、多路复用IO" class="headerlink" title="二、多路复用IO"></a>二、多路复用IO</h2><pre><code>在不创建新的进程和线程的情况下监控多个文件描述符，多应用于网络编程时一个服务端程序为多个客户端程序提供服务，多用于在业务逻辑简单，客户端需要的服务时间短，响应时间无太高要求的场景。</code></pre><h2 id="三、使用select函数实现多路复用IO"><a href="#三、使用select函数实现多路复用IO" class="headerlink" title="三、使用select函数实现多路复用IO"></a>三、使用select函数实现多路复用IO</h2><pre><code>int select(int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout);功能：监控多个文件描述符的 读、写、异常 操作nfds：最大文件描述符+1readfds：监控读操作文件描述符集合writefds：监控写操作文件描述符集合exceptfds：监控异常操作文件描述符集合timeout：设置超时时间返回值：监控到文件描述符的个数,超时返回0，出错返回-1void FD_CLR(int fd, fd_set *set);功能：从集合吕删除文件描述符int FD_ISSET(int fd, fd_set *set);功能：测试集合中是否有文件描述符存在void FD_SET(int fd, fd_set *set);功能：向集合中添加文件描述符void FD_ZERO(fd_set *set);功能：清空文件描述符集合select设计不合理的地方：    1、所有被监视的文件描述符都需要检查（效率不高）。    2、每次调用select都需要向它传递新的监视对象信息 select的优点是：    程序的兼容性高  int pselect(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, const struct timespec *timeout, const sigset_t *sigmask);功能：与select的功能大致类似区别：    1、select函数用的timeout参数，是一个timeval的结构体（包含秒和微秒），然而pselect用的是一个timespec结构体（包含秒和纳秒）    2、select函数可能会为了指示还剩多长时间而更新timeout参数，然而pselect不会改变timeout参数    3、select函数没有sigmask参数，当pselect的sigmask参数为null时，两者行为时一致的。有sigmask的时候，pselect相当于如下的select()函数，在进入select()函数之前手动将信号的掩码改变，并保存之前的掩码值；select()函数执行之后，再恢复为之前的信号掩码值。</code></pre><h2 id="四、使用poll函数实现多路复用IO"><a href="#四、使用poll函数实现多路复用IO" class="headerlink" title="四、使用poll函数实现多路复用IO"></a>四、使用poll函数实现多路复用IO</h2><pre><code>int poll(struct pollfd *fds, nfds_t nfds, int timeout);fds：所有被监控的文件描述符结构体数组nfds：数组的长度timeout：超时时间，毫秒单位struct pollfd{    int fd;     //被监控文件描述符    short events; // 等待的需要监控事件    short revents; // 实际发生了的事件，也就是返回结果};events:    POLLIN      普通或优先级带数据可读    POLLPRI     高优先级数据可读       POLLOUT     普通数据可写    POLLRDHUP   对方socket关闭    POLLERR     发生错误    POLLHUP     发生挂起    POLLNVAL    描述字不是一个打开的文件poll特点：    1.文件描述符没有最大限制 -数据结构：链表    2.每次调用都需要将fd集合从用户态拷贝到内核态     3.内核需要遍历所有fd，效率低</code></pre><h2 id="五、使用epoll函数实现多路复IO"><a href="#五、使用epoll函数实现多路复IO" class="headerlink" title="五、使用epoll函数实现多路复IO"></a>五、使用epoll函数实现多路复IO</h2><pre><code>int epoll_create(int size);功能：创建用于保存被监控文件描述符的空间int epoll_ctl(int epfd, int op, int fd, struct  epoll_event *event);  功能：向文件中添加、删除，文件描述符int epoll_wait(int epfd, struct epoll_event *events,  int maxevents, int timeout); 功能：监控文件描述符1.文件描述符没有最大限制 --数据结构：红黑树2.只需拷贝一次fd到内核态 3.内核只需判断就绪链表是否为空，不需要遍历所有fd，效率高，并把就绪fd拷贝到用户空间</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多路复用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础知识(四)</title>
      <link href="/blog/2019/09/19/c-ji-chu-zhi-shi-si/"/>
      <url>/blog/2019/09/19/c-ji-chu-zhi-shi-si/</url>
      
        <content type="html"><![CDATA[<p>面向过程编程：<br>    关注是问题解决的过程步骤，算法</p><p>面向对象编程：<br>    关注的是谁能解决问题（类），需要什么样的数据（成员变量），具备什么样的技能（成员函数）才能解决问题。<br>    抽象：找出一个能够解决问题的“对象”（观察研究对象），找出解决所必须的数据（属性）、功能（成员函数）。<br>    封装：把抽象的结果，归结为一个类（数据类型），然后实例化出类对象，设置对象的属性，调用对象的功能达到解决问题的目的。<br>    继承：在解决问题前，先寻找之前的类能不能解决问题，或解决部分问题，如果可以则把旧的类继承后再次拓展，来缩短解决问题的时间，降低<br>解决问题的难度。<br>    多态：对象的多种形态，外部看到一个对象发出指令，对象会根据自身情况做出独特的反应。</p><h2 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h2><h3 id="1、通过分析对象的属性和行为设计出一个类。"><a href="#1、通过分析对象的属性和行为设计出一个类。" class="headerlink" title="1、通过分析对象的属性和行为设计出一个类。"></a>1、通过分析对象的属性和行为设计出一个类。</h3><h3 id="2、类就是数据类型"><a href="#2、类就是数据类型" class="headerlink" title="2、类就是数据类型"></a>2、类就是数据类型</h3><pre><code>    简单类型：只能表示一个属性（变量），C/C++内建数据类型    数组类型：可以表示多个属性（变量），类型必须相同。    结构类型：可以表示多个属性（变量），但缺少行为（函数）。    类类型：即能表示属性，也能表示行为，一直复合数据类型。</code></pre><h3 id="3、对象就是类这种数据类型创建出的实例，相当于结构变量。"><a href="#3、对象就是类这种数据类型创建出的实例，相当于结构变量。" class="headerlink" title="3、对象就是类这种数据类型创建出的实例，相当于结构变量。"></a>3、对象就是类这种数据类型创建出的实例，相当于结构变量。</h3><pre><code>class Student{    属性(成员变量);    行为（成员函数）;};Student stu;</code></pre><h2 id="二、类的定义与实例化"><a href="#二、类的定义与实例化" class="headerlink" title="二、类的定义与实例化"></a>二、类的定义与实例化</h2><h3 id="1、类的一般形式"><a href="#1、类的一般形式" class="headerlink" title="1、类的一般形式"></a>1、类的一般形式</h3><pre><code>class 类名 : 继承方式 父类{public/private/protected: // 访问控制限制符    成员变量;    // 构造函数    类名(形参表)    {    }    // 析构函数    ~类名(void)    {    }};</code></pre><h3 id="2、类的访问控制限定符"><a href="#2、类的访问控制限定符" class="headerlink" title="2、类的访问控制限定符"></a>2、类的访问控制限定符</h3><pre><code>public：公有成员，在任何位置都可以访问private：私有成员，只能在类（自己）的成员函数中访问protected：受保护成员，只能在类（自己）和子类中访问注意：类中的成员变量、成员函数默认是 private，结构中的成员和成员函数默认是 public。注意：C++中类和结构的区别只有成员函数和成员变量的默认访问权限不同。</code></pre><h3 id="3、构造函数"><a href="#3、构造函数" class="headerlink" title="3、构造函数"></a>3、构造函数</h3><pre><code>    1）什么是构造函数：类的同名函数就是构造函数，没有返回值。    2）什么时候调用，谁调用，调用几次？        创建类对象时会被自动调用（每创建一个类对象，就会调用一次），对象整个生命周期中一定会被调用一次，只能被调用一次。    3）负责干什么        成员变量的初始化，分配相关资源，设置对象的初始状态。    class 类名 : 继承方式 父类    {        // 构造函数     类名(形参表)        {        }    };</code></pre><h3 id="4、类型的创建过程"><a href="#4、类型的创建过程" class="headerlink" title="4、类型的创建过程"></a>4、类型的创建过程</h3><pre><code>    1.分配类型所需要空间，无论栈还是堆。    2.传递实参调用构造函数，完成如下任务：        1）根据继承表依次调用父类的构造函数        2）根据成员变量的顺序依次调用成员变量的构造函数。        3）执行构造函数体中的代码。注意：执行构造函数的代码是整个构造函数的最后一步。要保证构造函数代码所需要的一切资源和先决条件在该代码执行前已经准备充分，并得到正确的初始化。</code></pre><h3 id="5、对象的创建方法"><a href="#5、对象的创建方法" class="headerlink" title="5、对象的创建方法"></a>5、对象的创建方法</h3><pre><code>    1.在栈上创建：类名 对象；// 不需要括号        类名 对象(实参);    2.在堆上创建：类名* 对象指针 = new 类名；        类名* 对象指针 = new 类名(实参)；    3.创建多个对象：        类名 对象 = {类名(实参)，类名(实参)，类名(实参)};        类名* 对象指针 = new 类名[n]{类名(实参),类名(实参)};    注意：通过malloc创建的类对象不能调用构造函数。    注意：通过new[]创建的对象，一定要通过delete[]释放。</code></pre><h3 id="6、类的声明、实现、调用"><a href="#6、类的声明、实现、调用" class="headerlink" title="6、类的声明、实现、调用"></a>6、类的声明、实现、调用</h3><pre><code>    1.在头文件中声明    class 类名 : 继承方式 父类    {        成员变量;    public: // 访问控制限制符        // 构造函数        类名(形参表);        // 析构函数        ~类名(void);        // 其他成员函数        返回值 函数名(参数列表);    };    2.源文件实现类的相关函数    返回值 类名::函数名（参数列表）    {    }    3.调用时只需要导入头文件，然后与类函数所在的源文件一起编译即可。    注意：如果一个类内容不多，可以考虑在头文件中完全实现。        也可以只在头文件中实现一些简单的成员函数。    注意：类中自动生成的函数，在源文件中实现时，也需要在头文件中声明。class和struct的区别？    class的默认继承和访问权限是private，struct的默认继承和访问权限是public。class能做模板的参数，struct不行。</code></pre><h2 id="三、构造函数与初始化列表"><a href="#三、构造函数与初始化列表" class="headerlink" title="三、构造函数与初始化列表"></a>三、构造函数与初始化列表</h2><h3 id="1、构造函数可以被重载（同一个名字的函数有多个不同版本）"><a href="#1、构造函数可以被重载（同一个名字的函数有多个不同版本）" class="headerlink" title="1、构造函数可以被重载（同一个名字的函数有多个不同版本）"></a>1、构造函数可以被重载（同一个名字的函数有多个不同版本）</h3><h3 id="2、缺省构造是编译器自动生成的一个什么都不做的构造函数（唯一的作用就是避免编译错误）。"><a href="#2、缺省构造是编译器自动生成的一个什么都不做的构造函数（唯一的作用就是避免编译错误）。" class="headerlink" title="2、缺省构造是编译器自动生成的一个什么都不做的构造函数（唯一的作用就是避免编译错误）。"></a>2、缺省构造是编译器自动生成的一个什么都不做的构造函数（唯一的作用就是避免编译错误）。</h3><pre><code>注意：当类实现一个有参构造时，缺省构造就不会再自动生成，如果有需要必须显示地写出来。</code></pre><h3 id="3、无参构造未必无参，当给有参构造的所有参数设置默认形参，调用这种构造函数就不需要传参。"><a href="#3、无参构造未必无参，当给有参构造的所有参数设置默认形参，调用这种构造函数就不需要传参。" class="headerlink" title="3、无参构造未必无参，当给有参构造的所有参数设置默认形参，调用这种构造函数就不需要传参。"></a>3、无参构造未必无参，当给有参构造的所有参数设置默认形参，调用这种构造函数就不需要传参。</h3><pre><code>注意：所谓的“编译器生成的某某函数”其实不是真正语法意义上的函数，而是功能意义上的函数，编译器作为可执行指令的生成者，它会直接生成具有某项功能的二进制指令，不需要借助高级语言语义上的函数完成此任务。注意：如果一个类是其他类的成员变量，那么一定要保证它有一个无参构造，当B的构造函数执行时会执行成员变量的无参构造，而此时类B是无法给类A成员变量提供参数的。</code></pre><h3 id="4、单参构造与类型转换"><a href="#4、单参构造与类型转换" class="headerlink" title="4、单参构造与类型转换"></a>4、单参构造与类型转换</h3><pre><code>    如果构造函数的参数只有一个，那么Test t = n语句就不会出错，它会自动调用单参构造来达到类型转换的效果。    如果想禁止这种类型转换需要在单参构造前加 explicit</code></pre><h3 id="5、初始化列表"><a href="#5、初始化列表" class="headerlink" title="5、初始化列表"></a>5、初始化列表</h3><pre><code>    为类成员进行初始化用的。    构造函数(参数):成员1(参数1),成员2(参数2)...    const int num;    Test(int n):num(n)    {    }    通过初始化列表可以给类成员变量传递参数，以此调用类成员的有参构造。    初始化列表也可以给 const 成员、引用成员进行初始化。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;class A{public:    int num;    A(int _num)    {        num = _num;        cout&lt;&lt;"我A的有参构造"&lt;&lt;endl;    }};class Test{public:    string str;    const int num;    int&amp; xiu;    A a;    Test(int num,const char* str,int&amp; x):num(num),str(str),a(num),xiu(x)    {        cout&lt;&lt;"---"&lt;&lt;endl;    }};int main(){    int x = 100;    Test t(10,"aa",x);    //Test t = {10};    //t.num = 100;    cout&lt;&lt; t.num &lt;&lt; endl;    cout&lt;&lt;t.xiu&lt;&lt;endl;    x = 1000;    cout&lt;&lt;t.xiu&lt;&lt;endl;}</code></pre><pre><code>    成员的初始化顺序与初始化列表没有关系，而是在类中的定义顺序有关。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;class A{public:    A(int n)    {        cout&lt;&lt;"A"&lt;&lt;endl;    }};class B{public:    B(int n)    {        cout&lt;&lt;"B"&lt;&lt;endl;    }};class C{public:    C(int n)    {        cout&lt;&lt;"C"&lt;&lt;endl;    }};class Test{public:    A a;    C c;    B b;    //A a;    Test(int c1,int a1,int b1):c(c1),a(a1),b(b1)    {    }};int main(){//    A a1;//    B b1;//    C c1;    Test t(1,2,3);}</code></pre><pre><code>    注意：初始化列表运行类成员变量还没有定义成功。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宣讲会个人体会</title>
      <link href="/blog/2019/09/14/xuan-jiang-hui-ge-ren-ti-hui/"/>
      <url>/blog/2019/09/14/xuan-jiang-hui-ge-ren-ti-hui/</url>
      
        <content type="html"><![CDATA[<h2 id="杭电CVTE宣讲会"><a href="#杭电CVTE宣讲会" class="headerlink" title="杭电CVTE宣讲会"></a>杭电CVTE宣讲会</h2><p>第一次去参加宣讲会，主要分为3大块，公司介绍自己，你提问公司，公司提问你。<br>宣讲会有福利，这次的宣讲会提供了绿卡(免笔试，直接面试，算是个加分吧。通过线上推广集赞和线下现场抢答来获取)。换句话说就是宣讲会表现好是有很大好处的。<br>个人对这家公司介绍后的总结就是福利待遇特别好，养小养老还养你，上班时间不固定(可早可晚)，支持创业。总体感觉很好，过多的个人看法就不提了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 心得/体会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下互斥与死锁</title>
      <link href="/blog/2019/09/09/linux-xia-hu-chi-yu-si-suo/"/>
      <url>/blog/2019/09/09/linux-xia-hu-chi-yu-si-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、同步、竞争、互斥"><a href="#一、同步、竞争、互斥" class="headerlink" title="一、同步、竞争、互斥"></a>一、同步、竞争、互斥</h2><pre><code>当多个线程同时访问其共享的资源时，需要相互协调，以防止出现数据不一致、不完整的问题，能达到这种状态叫线程同步。而有些资源在同一时刻只有一个线程访问，对于这种资源的访问需要竞争。当资源获取到后，能够防止资源被其他线程抢占（再次获取）的技术叫互斥。</code></pre><h2 id="二、互斥量（锁）"><a href="#二、互斥量（锁）" class="headerlink" title="二、互斥量（锁）"></a>二、互斥量（锁）</h2><pre><code>pthread_mutex_t mutex = PTHREAD_MUTEX_INITALIZER;int pthread_mutex_init (pthread_mutex_t *__mutex, __const pthread_mutexattr_t *__mutexattr)功能：初始化互斥量,使用第二互斥量来初始化第一个互斥量，如果第二个为空，则使用默认参数初始化互斥量,也可以使用宏来初始化。int pthread_mutex_destroy (pthread_mutex_t *__mutex)功能：销毁互斥量注意：互斥量是一个结构体，里面有成员是指针，指向了堆内存数据，需要显式初始化函数以及销毁函数。如果使用堆内存存储互斥量，需要在调用了销毁函数后，再进行free。int pthread_mutex_lock (pthread_mutex_t *__mutex)功能：锁定互斥量，当互斥量是锁定状态，此函数则阻塞（直到互斥量在其他线程中解锁，调用者线程加锁成功才返回）。注意：互斥量一旦加锁，只有它自己能解。int pthread_mutex_trylock (pthread_mutex_t *__mutex)功能：尝试锁定互斥量，能锁就锁，不能锁就返回。int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex, __const struct timespec *__restrict __abstime)功能：在指定时间内锁定一个互斥量(由于系统原因导致不可知锁的状态),而一旦获取锁的状态后立即做出抉择。struct timespec{    __time_t tv_sec;    long int tv_nsec;}int pthread_mutex_unlock (pthread_mutex_t *__mutex)功能：解锁测试：#include &lt;stdio.h&gt;#include &lt;pthread.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;pthread_mutex_t key = PTHREAD_MUTEX_INITIALIZER;pthread_mutex_t mouse = PTHREAD_MUTEX_INITIALIZER;void* ming(void* arg){    pthread_mutex_lock(&amp;key);    usleep(100);    pthread_mutex_lock(&amp;mouse);    printf("键盘和鼠标都拿到了，可以开心的打游戏了\n");    sleep(5);    pthread_mutex_unlock(&amp;mouse);    pthread_mutex_unlock(&amp;key);}void* huang(void* arg){    pthread_mutex_lock(&amp;key);    usleep(100);    pthread_mutex_lock(&amp;mouse);    printf("键盘和鼠标都拿到了，可以开心的做ppt了\n");    sleep(5);    pthread_mutex_unlock(&amp;mouse);    pthread_mutex_unlock(&amp;key);}int main(){    pthread_t pid1;    pthread_create(&amp;pid1,NULL,ming,NULL);    pthread_t pid2;    pthread_create(&amp;pid2,NULL,huang,NULL);    pthread_join(pid1,NULL);    pthread_join(pid2,NULL);}</code></pre><h2 id="三、死锁"><a href="#三、死锁" class="headerlink" title="三、死锁"></a>三、死锁</h2><pre><code>多个线程进行等待对方的资源，在得到所有资源继续运行前，都不会释放自己的资源，这样造成的循环等待现象，称为死锁。构成死锁的四大必要条件：    1、资源互斥    2、占有，还想占有（请求与保持）    3、资源不可剥夺    4、环路等待（循环等待）防止死锁的方法：    构成死锁的四个条件只要破坏其中一个就构不成死锁，死锁一旦形成就无法消除，因此最后的方法就是避免产生死锁。    1、破坏互斥条件，让资源能够共享，但缺点是不通过，因为有些资源不能共享，如打印机。    2、破坏请求并保持，采用预先分配的方法，在进行运行前一次申请好它所需要的所有资源，但缺点是浪费资源。    3、破坏不可剥夺的条件，对已经占用资源的线程发送取消请求，但是实现比较复杂，而且还会破坏业务逻辑。    4、破坏循环等待条件，为每个资源进行编号，采用顺序的资源分配方法，规定每个线程必须按照递增的顺序请求资源，缺点是编号必须相对稳定，增加新资源时会比较麻烦，而且有些特殊的业务逻辑不能完全按照指定的顺序分配资源。避免产生死锁的算法（银行家算法）：    1、申请资源的额度不能超过银行现有资源的总和。    2、分批向银行，但是货款额度不能超过一开始最大需求量总和。    3、银行如果不能满足客户的需要，必须及时给出答复    4、客户必须在规定的时间内还款。如何检测死锁：    1、画出资源分配图，并简化，模拟资源分析的过程。    2、监控线程过程的栈内存使用情况。    3、设计看门狗机制（TCP心跳包）</code></pre><h2 id="四、信号量"><a href="#四、信号量" class="headerlink" title="四、信号量"></a>四、信号量</h2><pre><code>线程的信号量与进程的信号量的机制是一样的，但使用方法不同，用于控制、管理线程间的共享资源。#include &lt;semaphore.h&gt;int sem_init(sem_t *sem, int pshared, unsigned int value);功能：初始化信号量（创建信号量）sem:信号量ID，输出pshared：一般为0（线程之间）进程中使用的。非零表示进程间使用，但Linux不支持。value：信号量的初始化int sem_wait(sem_t *sem);功能：信号量减1，不够减则阻塞（为0时）。int sem_trywait(sem_t *sem);功能：信号量减1，不够减则立即返回-1int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);功能：信号量减1，不够减则阻塞，直到abs_timeout超时返回-1。struct timespec{    __time_t tv_sec;    long int tv_nsec;}int sem_post(sem_t *sem);功能：信号量+1int sem_destroy(sem_t *sem);功能：销毁信号量int sem_getvalue(sem_t *sem, int *sval);功能：获取信号量的值</code></pre><h2 id="五、生产者与消费者模型"><a href="#五、生产者与消费者模型" class="headerlink" title="五、生产者与消费者模型"></a>五、生产者与消费者模型</h2><pre><code>测试代码：#include &lt;stdio.h&gt;#include &lt;pthread.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/time.h&gt;#define HOUSE_MAX 40// 栈结构char house[HOUSE_MAX] = {};// 栈顶下标int top = 0;// 互斥量（确保只有一个线程访问栈顶）pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;// 满仓条件变量（满仓时生产线程睡入）pthread_cond_t full = PTHREAD_COND_INITIALIZER;// 空仓条件变量（空仓时消费线程睡入）pthread_cond_t null = PTHREAD_COND_INITIALIZER;// 显示仓库void show_house(char* who,char* op,char ch){    printf("%s:",who);    for(int i=0; i&lt;=top; i++)    {        printf("%c",house[i]);    }    printf("%s%c\n",op,ch);}// 生产者线程void* product(void* arg){    char* who = (char*)arg;    for(;;)    {        char ch = 'A' + rand()%26;        pthread_mutex_lock(&amp;mutex);        // 醒来后要再次检查是否满仓        while(HOUSE_MAX &lt;= top)        {            printf("%s:满仓\n",who);            pthread_cond_wait(&amp;full,&amp;mutex);        }        show_house(who,"&lt;-",ch);        // 入仓数据        house[top++] = ch;        // 模拟现实情况        usleep(100000);        // 解锁        pthread_mutex_unlock(&amp;mutex);        // 已经确保仓库不空，通知消费        pthread_cond_signal(&amp;null);    }    return NULL;}// 消费者线程void* consume(void* arg){    char* who = (char*)arg;    for(;;)    {        // 加锁        pthread_mutex_lock(&amp;mutex);        // 检查仓库是否空的        while(0 == top)        {            printf("%s:空仓\n",who);            pthread_cond_wait(&amp;null,&amp;mutex);        }        // 消费数据        char ch = house[--top];        show_house(who,"-&gt;",ch);        usleep(100000);        pthread_mutex_unlock(&amp;mutex);        pthread_cond_signal(&amp;full);    }}int main(){    srand(time(NULL));    pthread_t pid[6] = {};    pthread_create(&amp;pid[0],NULL,product,"生产1");    pthread_create(&amp;pid[1],NULL,product,"生产2");    pthread_create(&amp;pid[2],NULL,product,"生产3");    pthread_create(&amp;pid[3],NULL,consume,"消费1");    pthread_create(&amp;pid[4],NULL,consume,"消费2");    pthread_create(&amp;pid[5],NULL,consume,"消费3");    for(int i=0; i&lt;6; i++)    {        pthread_join(pid[i],NULL);    }}</code></pre><h2 id="六、条件变量"><a href="#六、条件变量" class="headerlink" title="六、条件变量"></a>六、条件变量</h2><pre><code>条件变量可以让线程在满足特定的条件下暂停（睡眠），需要与互斥量配合使用。pthread_cond_t cond = PTHREAD_COND_INITIALIZER;int pthread_cond_init (pthread_cond_t *__restrict __cond, __const pthread_condattr_t *__restrict __cond_attr);功能：初始化条件变量cond:待初始化的条件变量cond_attr:条件变量的属性int pthread_cond_destroy (pthread_cond_t *__cond);功能：销毁条件变量int pthread_cond_wait (pthread_cond_t *__restrict __cond, pthread_mutex_t *__restrict __mutex);功能：让调用者线程进入睡眠，并解锁一个互斥量cond：线程睡入的条件变量mutex：线程睡眠前的要解锁的互斥量（是不是锁定状态没有关系）int pthread_cond_signal (pthread_cond_t *__cond);功能：唤醒条件变量中的线程（一个还是多个？）注意：线程醒的前提条件是互斥量必须是解锁状态的，线程醒前会再次加锁，如果不能加锁就不会醒来。int pthread_cond_timedwait (pthread_cond_t *__restrict __cond, pthread_mutex_t *__restrict __mutex, __const struct timespec *__restrict __abstime);功能：让调用者线程进入睡眠，并解锁一个互斥量注意：不是超时测试：#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;pthread.h&gt;// 定义并初始化条件变量pthread_cond_t cond = PTHREAD_COND_INITIALIZER;pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;void* run(void* arg){    printf("我将进入睡眠...\n");    pthread_cond_wait(&amp;cond,&amp;mutex);    printf("我醒了...\n");}int main(){    pthread_t pid;    pthread_create(&amp;pid,NULL,run,NULL);    sleep(3);    pthread_cond_signal(&amp;cond);    pthread_join(pid,NULL);}</code></pre><h2 id="七、哲学家就餐问题"><a href="#七、哲学家就餐问题" class="headerlink" title="七、哲学家就餐问题"></a>七、哲学家就餐问题</h2><pre><code>百度百科参考资料：Linux下的user/include中的pthread.h文件</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 同步 </tag>
            
            <tag> 互斥 </tag>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下线程的相关知识</title>
      <link href="/blog/2019/09/09/linux-xia-xian-cheng-de-xiang-guan-zhi-shi/"/>
      <url>/blog/2019/09/09/linux-xia-xian-cheng-de-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、线程基本概念"><a href="#一、线程基本概念" class="headerlink" title="一、线程基本概念"></a>一、线程基本概念</h2><pre><code>1、线程就是进程中的执行路线，即进程内部的控制序列，或者说是进程的子任务（进程就是正在运行的程序，它是一个资源单位）2、线程就是轻量级的，没有自己独立的内存资源，使用的是进程的代码段、数据段、bss段、堆（注意：没有栈）、环境变量表、命令行参数、文件描述符、信号处理函数、工作目录、用户ID、组ID等资源。3、线程拥有自己独立的栈，也就是有自己独立的局部变量。4、一个进程中可以同时拥有多个线程，即同时被系统调度的多条执行路线，但至少有一个主进程。</code></pre><h2 id="二、线程基本特点"><a href="#二、线程基本特点" class="headerlink" title="二、线程基本特点"></a>二、线程基本特点</h2><pre><code>1、线程是进程的实体，可以作为系统独立的调试和分派基本单位。2、线程有不同的状态，系统提供了多种线程控制的原语（控制方法），比如：创建线程、销毁线程。3、线程不拥有自己的资源（唯一拥有的就是自己的栈空间），只拥有从属于进程的全部资源，所有资源分配都是面向进程的。4、一个进程中可以有多个线程同时执行，它们可以执行相同的代码,也可以执行不同的代码。5、同一进程内的线程都在同一个地址空间下活动（0~4G），相对于多进程，多线程的系统开销小，任务切换快。6、多进程协同工作时需要通信，而多线程间的数据交换不需要依赖类似的IPC的特殊通信机制，简单而高效。7、每个线程拥有自己独立的线程ID、寄存器信息、函数栈等。8、线程之间也存在优先级。***注意：线程与进程的区别？</code></pre><h2 id="三、POSIX线程"><a href="#三、POSIX线程" class="headerlink" title="三、POSIX线程"></a>三、POSIX线程</h2><pre><code>1、早期的UNIX操作系统中没有线程的，而是各计算机厂商提供了自己私有的线程库，不易移植。2、在1995年左右，定义了统一的线程编程接口，POSIX线程，即pthread。3、pthread包含一个头文件pthread.h，一个共享库libpthread.so4、功能：    线程管理：创建/销毁、分离/联合、设置/获取属性    线程同步（互斥）：互斥量（互斥锁），条件变量，信号量</code></pre><h2 id="四、线程函数"><a href="#四、线程函数" class="headerlink" title="四、线程函数"></a>四、线程函数</h2><pre><code>1、线程创建int pthread_create(pthread_t *thread, const pthread_attr_t *attr,  void *(*start_routine) (void *), void *arg);功能：创建线程thread：获取线程IDattr：创建线程所需要的属性设置，如果为NULL按照默认方式创建线程。start routine：线程的入口函数arg：给线程入口函数传递的参数练习1：把TCP的S端的多进程改成多线程2、等待线程结束int pthread_join(pthread_t thread, void **retval);功能：等待线程结束获取线程入口函数的返回值，线程结束时该函数才返回。thread：线程IDretval：指针变量的地址，用于获取线程入口函数的返回值。注意：线程入口函数在返回数据时，不能返回指向私有栈空间的指针，如果获取到的是指向堆的指针，等待者要负责把该空间释放。注意：当主线程结束，子线程会全部结束。3、获取线程IDpthread_t pthread_self(void);功能：返回当前线程的ID4、比较两个线程IDint pthread_equal(pthread_t t1,pthread_t t2);功能：如果两个线程ID是同一个线程，则返回0，否则返回-1。注意：pthread_t不一定是 unsigned long类型，有些系统中它是结构体类型，所以无法使用==比较。5、线程终止void pthread_exit(void *retval);功能：调用者线程结束（从入口函数return）retval：会返回给pthread_join函数的第二个参数。注意：如果是进程的最后一个线程，当调用pthread_exit时进程也就结束了。6、线程分离非分离:线程可以被创建者调用pthread_join等待（回收资源）。分享状态：线程不需要创建者等待，结束后自动释放资源。int pthread_detach(pthread_t thread);功能：使用调用线程与线程ID为thread线程成为分离状态。7、线程取消int pthread_cancel(pthread_t thread);功能：向指定的线程发送取消操作注意：但对方不一定响应int pthread_setcancelstate(int state, int *oldstate);功能：设置调用者线程是否响应取消操作state：    PTHREAD_CANCEL_ENABLE 允许响应    PTHREAD_CANCEL_DISABLE 禁止响应oldstate：获取旧的取消状态8、线程属性typedef union{    char __size[__SIZEOF_PTHREAD_ATTR_T];    long int __align;}pthread_attr_t;猜测：不让手动修改各项线程的各大项属性，而使用pthread_attr_set/get系列函数来操作。int pthread_attr_init(pthread_attr_t *attr);功能：初始化线程属性int pthread_attr_destroy(pthread_attr_t *attr);功能：销毁线程属性int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);功能：设置线程属性中分离标志detachstate：    PTHREAD_CREATE_DETACHED 分离    PTHREAD_CREATE_JOINABLE 不分离int pthread_attr_getdetachstate(pthread_attr_t *attr, int *detachstate);功能：获取线程属性中分离标志int pthread_attr_setscope(pthread_attr_t *attr, int scope);功能：设置线程属性中线程的竞争范围PTHREAD_SCOPE_SYSTEMPTHREAD_SCOPE_PROCESSint pthread_attr_getscope(pthread_attr_t *attr, int *scope);功能：获取线程属性中线程的竞争范围int pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched);功能：设置线程属性中线程的调度策略来源    PTHREAD_INHERIT_SCHED 继承创建者    PTHREAD_EXPLICIT_SCHED 单独设置int pthread_attr_getinheritsched(pthread_attr_t *attr, int *inheritsched);int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);功能：设置线程属性中线程的调度策略SCHED_FIFO 先进先出策略SCHED_RR 轮转策略SCHED_OTHER 缺省int pthread_attr_getschedpolicy(pthread_attr_t *attr, int *policy);功能：获取线程属性中线程的调度策略int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);功能：设置线程属性中线程的调度参数（优先级别）param：最高级别0int pthread_attr_getschedparam(pthread_attr_t *attr, struct sched_param *param);int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);功能：设置线程属性中栈尾的警戒区大小int pthread_attr_getguardsize(pthread_attr_t *attr, size_t *guardsize);功能：获取线程属性中栈尾的警戒区大小int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr);功能：设置线程属性中线程的栈底地址int pthread_attr_getstackaddr(pthread_attr_t *attr, void **stackaddr);功能：获取线程属性中线程的栈底地址int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);功能：设置线程属性中线程的栈空间字节数int pthread_attr_getstacksize(pthread_attr_t *attr, size_t *stacksize);功能：获取线程属性中线程的栈空间字节数使用方法：    1、定义线程属性结构体    pthread_attr_t attr;    2、初始化线程属性结构体    pthread_attr_init(&amp;attr);    3、使用pthread_attr_set系列函数对结构体变量进行设置。    4、在创建线程时（pthread_create函数的第二个参数）中使用线程属性结构变量创建线程。    int pthread_getattr_np(pthread_t thread, pthread_attr_t *attr);    功能：获取指定线程的属性    int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr, size_t stacksize);    int pthread_attr_getstack(pthread_attr_t *attr, void **stackaddr, size_t *stacksize);</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下系统调用和文件操作</title>
      <link href="/blog/2019/09/09/linux-xia-xi-tong-diao-yong-he-wen-jian-cao-zuo/"/>
      <url>/blog/2019/09/09/linux-xia-xi-tong-diao-yong-he-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、系统调用"><a href="#一、系统调用" class="headerlink" title="一、系统调用"></a>一、系统调用</h2><pre><code>   UNIX/Linux系统绝大部分功能都是通过系统调用实现，比如：open/close...UNIX/Linux把系统调用都封装成了C函数的形式，但他们不是标准C的一部分。标准库中的函数绝大部分时间都工作在用户态，但部分时间也需要切换到内核（进行了系统调用），比如：malloc/free/fread/fwirte/malloc/free。我们自己所编写的代码也可以直接调用系统接口进入内核态（进行系统调用），比如brk/sbrk/mmap/munmap   系统调用的功能代码存在于内核中，接口定义在C库中，该接口通过系统中断实现调用，而不是普通函数进行跳转。注意：从用户态切换到内核态或从内核态返回到用户态都会消耗时间。time a.outreal    0m0.137s    总执行时间 = 用户态 + 内核态 + 切换消耗的时间user    0m0.092s    用户态执行时间sys     0m0.040s    内核态执行时间strace 程序 可以跟踪系统调用</code></pre><h2 id="二、一切皆文件"><a href="#二、一切皆文件" class="headerlink" title="二、一切皆文件"></a>二、一切皆文件</h2><pre><code>在UNIX/Linux系统下，几乎所有资源都是以文件形式提供的，所以在UNIX/Linux系统下一切皆文件，操作系统把它的服务、功能、设备抽象成简单的文件，提供一套简单统一的接口，这样程序就可以像访问磁盘上的文件一样访问串口、终端、打印机、网络等功能。大多数情况下只需要 open/read/write/ioctl/close 就可以实现对各种设备的输入、输出、设置、控制等。UNIX/Linux下几乎任何对象都可以当作特殊类型的文件，可以以文件的形式访问。目录文件    里面记录的是一些文件信息，相关条目。设备文件    在系统的/dev目录下存储了所有的设置文件    stderr      stdin    stdout普通文件        链接文件    管道文件    socket文件</code></pre><h2 id="三、文件相关系统调用"><a href="#三、文件相关系统调用" class="headerlink" title="三、文件相关系统调用"></a>三、文件相关系统调用</h2><pre><code>open        打开或创建文件 create      创建文件close       关闭文件read        读文件write       写文件lseek       设置文件读写位置unlink      删除链接remove      删除文件</code></pre><h2 id="四、文件描述符"><a href="#四、文件描述符" class="headerlink" title="四、文件描述符"></a>四、文件描述符</h2><pre><code>文件描述符是一个非负整数，表示一个打开的文件，由系统调用open/create/socket返回值。为什么使用文件描述符而不像标准库那样使用文件指针？因为记录文件相关信息的结构存储在内核中，为了不暴露内存的地址，因此文件结构指针不能直接给用户操作，内核中记录一张表，其中一列是文件描述符，对应一列文件结构指针，文件描述符就相当于获取文件结构指针的下标。内核中已经有三个已经打开的文件描述符,它们的宏定义在：    stdin  0    STDIN_FILENO    stdout 1    STDOUT_FILENO    stderr 2    STDERR_FILENO0,1,2 都代表的是终端dup 复制文件描述符dup2 复制指定的文件描述符</code></pre><h2 id="五、open-creat-close"><a href="#五、open-creat-close" class="headerlink" title="五、open/creat/close"></a>五、open/creat/close</h2><pre><code>#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;int open(const char *pathname, int flags);功能：打开文件pathname：文件的路径flags：打开的权限    O_RDONLY, 只读    O_WRONLY, 只写    O_RDWR,   读写    O_NOCTTY, 当打开的是终端设备文件，不要把该文件当作主控终端。     O_TRUNC,  清空    O_APPEND, 追加返回值：文件描述符int open(const char *pathname, int flags, mode_t mode);flags：打开的权限    O_CREAT,  文件不存在则创建    O_EXCL,   如果文件存在，则创建失败mode：设置文件的权限    S_IRWXU  00700 user (file owner) has  read,  write  and  execute permission    S_IRUSR  00400 user has read permission    S_IWUSR  00200 user has write permission    S_IXUSR  00100 user has execute permission    S_IRWXG  00070 group has read, write and execute permission    S_IRGRP  00040 group has read permission    S_IWGRP  00020 group has write permission    S_IXGRP  00010 group has execute permission    S_IRWXO  00007 others have read, write and execute permission    S_IROTH  00004 others have read permission    S_IWOTH  00002 others have write permission    S_IXOTH  00001 others have execute permissionint close(int fd);功能：关闭打开的文件</code></pre><h2 id="六、read-write"><a href="#六、read-write" class="headerlink" title="六、read/write"></a>六、read/write</h2><pre><code>#include &lt;unistd.h&gt;ssize_t read(int fd, void *buf, size_t count);功能：从文件中读取数据到内存fd：文件描述符，open函数的返回值buf：数据的存储位置count：读取的字节数返回值：成功读取到的字节数ssize_t write(int fd,const void *buf, size_t count);功能：把数据写入到文件fd：文件描述符，open函数的返回值buf：要写入的数据内存首地址count：要写入的字节数返回值：成功写入的字节数注意：如果把结构体以文本形式写入到文件，需要先把结构体转换成字符串</code></pre><h2 id="七、lseek"><a href="#七、lseek" class="headerlink" title="七、lseek"></a>七、lseek</h2><pre><code>off_t lseek(int fd, off_t o_fset, int whence);功能：设置文件位置指针o_fset:偏移值whence：    SEEK_SET    SEEK_CUR    SEEK_END返回值：文件指针的位置练习1：实现一个Linux系统下计算文件大小的函数，使用系统调用完成。练习2：实现带覆盖检查的cp命令。</code></pre><h2 id="八、dup-dup2"><a href="#八、dup-dup2" class="headerlink" title="八、dup/dup2"></a>八、dup/dup2</h2><pre><code>int dup(int oldfd);功能：复制文件描述符，操作系统会从末的文件描述符中选择一个返回。oldfd:被复制的文件描述符int dup2(int oldfd, int newfd);功能：复制指定的文件描述符，如果newfd已经被使用，则先关闭，再复制。</code></pre><h2 id="九、标准IO与系统IO比较"><a href="#九、标准IO与系统IO比较" class="headerlink" title="九、标准IO与系统IO比较"></a>九、标准IO与系统IO比较</h2><pre><code>练习3：分别使用标准IO（文件读写open）比较系统IO（fopen等）随机写入1000000个整数到文件，比较哪一种更快，为什么？因为标准IO使用了缓冲技术，当数据写入时并没有立即把数据交给内核，而是先存放在缓冲区中，当缓冲区满时，会一次性把缓冲区中的数据交给内核写到文件中，这样就减少了内核态与用户态的切换次数。而系统IO每写一次数据就要进入一次内核态，这样就浪费了大量时间进行内核态与用户态的切换，因此用时更长如果为系统IO，设置更大的缓冲区，它会比标准IO更快</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统调用 </tag>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下库、静态库、共享库</title>
      <link href="/blog/2019/09/09/linux-xia-ku-jing-tai-ku-gong-xiang-ku/"/>
      <url>/blog/2019/09/09/linux-xia-ku-jing-tai-ku-gong-xiang-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="五、库"><a href="#五、库" class="headerlink" title="五、库"></a>五、库</h2><p>库就是目标文件的集合，我们把不需要升级更新维护的代码打包合并在一起方便使用，也可以对源文件进行保密。</p><p>静态库在使用时是把被调用的代码复制到调用模块中,然后再执行程序时，静态库就不需要了。</p><p>静态库的执行速度快，但占用空间大，当库中的内容发生变化时，需要重新编译出新的程序，因此不能轻易修改库中的内容，</p><p>而共享库只是在调用模块中嵌入调用代码的在库的相对位置的地址,当执行程序时，共享库会把程序一起加载到内存中，</p><p>当执行到调用共享库中代码的指令时跳转到共享中执行，执行完毕后再跳转回来。</p><p>占用空间小，方便更新（共享库发生变化后，程序不需要再次编译），相对于静态库执行效率略低。</p><p>静态库的扩展名为.a，共享库（动态库）的扩展名为.so</p><p>当静态库和动态库同时存在，优先调用动态库，调用静态库需要在编译时加-static</p><h2 id="六、静态库："><a href="#六、静态库：" class="headerlink" title="六、静态库："></a>六、静态库：</h2><h3 id="1、创建静态库"><a href="#1、创建静态库" class="headerlink" title="1、创建静态库"></a>1、创建静态库</h3><pre><code>编写源代码：vi .c/.h编译源代码：gcc -c xxx.c -&gt; xxx.o打开生成静态库：ar -r libxxx.a x1.o x2.o ...ar命令的一些参数：-r 把目标文件添加到静态库中，已经存在的更新-q 将目标文件追加到静态库的末尾-d 从静态库中删除目标文件-t 显示静态库中有哪些目标文件-x 把静态库拆分成目标文件</code></pre><h3 id="2、调用静态库"><a href="#2、调用静态库" class="headerlink" title="2、调用静态库"></a>2、调用静态库</h3><pre><code>直接调用：调用者要和库在同一路径下gcc main.c libxxx.a设置环境：设置方法与C_INCLUDE_PATH类似1、打开vim ~/.bashrc 文件2、在文件末尾，添加一行export LIBRARY_PATH=$LIBRARY_PATH:库文件的路径3、重新加载配置文件 source ~/.bashrc4、编译时要指定库名gcc main.c -lmath设置编译参数：-L路径gcc main.c -L路径 -lmath</code></pre><h3 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h3><p>在编译时已经把被调函数的二进制复制到可执行文件中了，在执行时不在需要静态库文件。</p><h2 id="七、共享库"><a href="#七、共享库" class="headerlink" title="七、共享库"></a>七、共享库</h2><h3 id="1、创建共享库"><a href="#1、创建共享库" class="headerlink" title="1、创建共享库"></a>1、创建共享库</h3><pre><code>编写源代码: vi .c/.h编译出位置无关目标文件：gcc -c -fpic xxx.c -&gt; xxx.o链接生成共享库：gcc -shared x1.o x2.o ... -o libxxx.so</code></pre><h3 id="2、调用共享库"><a href="#2、调用共享库" class="headerlink" title="2、调用共享库"></a>2、调用共享库</h3><p>直接调用：调用者要和库在同一路径下</p><pre><code>gcc main.c libxxx.so设置环境：设置方法与C_INCLUDE_PATH类似1、打开vim ~/.bashrc 文件2、在文件末尾，添加一行export LIBRARY_PATH=$LIBRARY_PATH:库文件的路径3、重新加载配置文件 source ~/.bashrc4、编译时要指定库名gcc main.c -lmath设置编译参数：-L路径gcc main.c -L路径 -lmath</code></pre><h3 id="3、运行-1"><a href="#3、运行-1" class="headerlink" title="3、运行"></a>3、运行</h3><p>在使用共享库时，调用者只是记录了被调代码在库的位置，因此在执行时需要共享库同时被加载。</p><p>操作系统会根据LD_LIBRARY_PATH环境变量的设置来加载共享库</p><h2 id="八、动态加载共享库"><a href="#八、动态加载共享库" class="headerlink" title="八、动态加载共享库"></a>八、动态加载共享库</h2><pre><code>#include &lt;dlfcn.h&gt;</code></pre><h3 id="1、加载共享库"><a href="#1、加载共享库" class="headerlink" title="1、加载共享库"></a>1、加载共享库</h3><pre><code>void *dlopen(const char *filename, int flag);filename：共享库的库名，或路径flag:    RTLD_LAZY 使用时才加载    RTLD_NOW 立即加载返回值：共享库的句柄（类似文件指针）</code></pre><h3 id="2、获取标识符地址并使用"><a href="#2、获取标识符地址并使用" class="headerlink" title="2、获取标识符地址并使用"></a>2、获取标识符地址并使用</h3><pre><code>void *dlsym(void *handle, const char *symbol);handle：共享库的句柄symbol：标识符的名字返回值：标识符在共享库中的位置（地址，可以解引用，或跳转过去）。</code></pre><h3 id="3、卸载共享库"><a href="#3、卸载共享库" class="headerlink" title="3、卸载共享库"></a>3、卸载共享库</h3><pre><code>int dlclose(void *handle);handle：共享库的句柄返回值：成功返回0，失败返回-1</code></pre><h3 id="4、获取错误信息"><a href="#4、获取错误信息" class="headerlink" title="4、获取错误信息"></a>4、获取错误信息</h3><pre><code>char *dlerror(void);返回值：会把在使用共享库的过程中出现的错误，以字符串形式返回</code></pre><h2 id="九、辅助工具"><a href="#九、辅助工具" class="headerlink" title="九、辅助工具"></a>九、辅助工具</h2><pre><code>nm：查看目标文件、可执行文件、静态库、共享库的中的符号列表ldd：查看可执行程序所依赖的共享库有哪些strip：减肥，去除掉目标文件、可执行文件、静态库和共享库中的符号列表、调试信息。objdump 显示二进制模块的反汇编信息</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 库 </tag>
            
            <tag> 静态库 </tag>
            
            <tag> 共享库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下GNU编译器</title>
      <link href="/blog/2019/09/09/linux-xia-gnu-bian-yi-qi/"/>
      <url>/blog/2019/09/09/linux-xia-gnu-bian-yi-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="GNU编译器"><a href="#GNU编译器" class="headerlink" title="GNU编译器"></a>GNU编译器</h2><p><img src="https://img-blog.csdnimg.cn/20190804160321940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_10,color_FFFFFF,t_50" alt="在这里插入图片描述"></p><pre><code>1、支持众多编程语言、平台2、构建过程（C代码是如何变成可执行文件的）。    第一步，预处理. 这一步处理 头文件、条件编译指令和宏定义。    第二步，编译. 将第一步产生的文件连同其他源文件一起编译成汇编代码。    第三步，汇编。将第二步产生的汇编源码转换为 object file.    第四步，链接. 将第三步产生的一些object file 链接成一个可执行的文件。    预处理：把程序员所编译的C代码翻译成标准的C代码    汇编：把预处理后的C代码翻译成汇编代码    编译：把会标代码翻译成二进制指令    链接：把若干个目标文件合并成一个可执行文件3、gcc -v 查看版本4、文件后缀    .h   头文件    .gch 头文件的编译结果，一般不要保留。    .c   源文件    .i   预处理文件    .s   汇编文件    .o   目标文件    .a   静态库文件    .so  共享库文件5、参数    -E  预处理    -S  汇编    -c  编译（只生成目标文件）    -o  指定编译结果的名字    -Wall   产生尽可能多的警告    -Werror 把警告当作错误处理    -x  指定编译的语言    -g  生成调试信息    -On 优化等级    -D  编译时定义宏    -l  链接里加库    -I  指定头文件的查找路径，配置环境变量        1、打开 vim ~/.bashrc        2、在文件末尾，添加一行 export C_INCLUDE_PATH=$C_INCLUDE_PATH:NEW_PATH        3、重新加载配置文件 source ~/.bashrc        注意：如果要删除环境变量需要在~/.bashrc文件中删除环境变量后，退出终端重新打开。        考题1：#include &lt;&gt; / #include "" 区别？        考题2：头文件中可以编写哪些内容？        考题3：头文件的作用？            1、说明对应的.c文件的内容有哪些（声明函数、全局变量）。            2、定义结构、联合、枚举、宏            3、类型重定义            虽然函数可以隐式声明，但并不一定准确，而且非常有可能造成严重错误。6、预处理指令    #include    文件包含，区别""和&lt;&gt;的区别    #define     定义宏常量或宏函数        #       把标识符转换成字符串        ##      合并标识符    #undef      删除宏    #line       指定当前行的行号    #if            条件编译    #ifndef        常用于头文件卫士    #ifdef            #elif    #endif    #error      在编译期间产生错误    #warning    在编译期间产生警告    #pragma        #pragma GCC dependency "文件"  用于监控文件，防止所依赖的文件，修改后而不知道        #pragma GCC poison 标识符      用于禁用某些标识符        #pragma pack(n)                设置结构、联合的补齐和对齐字节数            n的值必须比默认的要小            对齐边界必须是2的较小次方</code></pre><p><img src="https://img-blog.csdnimg.cn/20190804160756901.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019080416081380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_10,color_FFFFFF,t_50" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190804160835724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_10,color_FFFFFF,t_50" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190804160917830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_10,color_FFFFFF,t_50" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190804160947726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>思考：<br>    头文件的作用是什么？<br>    编译时头文件找不到怎么办？</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> GNU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信TCP/UDP</title>
      <link href="/blog/2019/09/09/wang-luo-tong-xin-tcp-udp/"/>
      <url>/blog/2019/09/09/wang-luo-tong-xin-tcp-udp/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网络通信的基本概念"><a href="#一、网络通信的基本概念" class="headerlink" title="一、网络通信的基本概念"></a>一、网络通信的基本概念</h2><pre><code>1、TCP和UDP的区别    TCP（Transmission Control Protocol）：传输控制协议，面向连接的服务（类似打电话），安全、可靠（三次握手、响应+重传、四次挥手），速度相对较慢，一般应用在对安全性、完整性有严格要求的场景：文件传输（ftp）、SMTP、HTTP        三次握手：            A要知道，A能到B,B能到A            B要也要知道，A能到B，B能到A                         A 你听得到吗 -&gt;       B(此时B知道了A能到B)        （A能到B且B能到A）A &lt;- 我能听到，你叫   B                         A 我也能听到-&gt;        B（此时B知道了B也能到A）        四次挥手：            目的是保证关闭前发送完所有未发送的数据包（应用层已经交给底层了，但底层还没有完全发送出去）。            A 发送关闭请求 -&gt; B            A &lt;- 发送请求相应 B                B检查 是否有未发送完成的数据                &lt;- 可以关闭   B            A 发送关闭消息-&gt;  B    UDP（User Datagram Protocol）：用户数据报文协议，面向无连接的服务（发短信）0，不保证安全、可靠，但大多数情况下是可靠的，相对较快，流媒体（在线视频、音频）。2、消息流    应用层-&gt;表示层-&gt;会话层-&gt;网络层-&gt;传输层-&gt;数据链路层-&gt;物理层-&gt;数据链路层-&gt;传输层-&gt;网络层    -&gt;会话层-&gt;表示层-&gt;应用层3、消息包当socket收到一个要发送的数据时，会先把数据进行拆分成bit流，然后再组成（防丢失）数据包（可能会丢包）。</code></pre><h2 id="二、套接字"><a href="#二、套接字" class="headerlink" title="二、套接字"></a>二、套接字</h2><pre><code>socket是一种接口机制，可以让程序无论使用什么端口、协议、都可以从socket进出数据，它负责了进程与协议之间的连接。1、编程模型    点对点（p2p）：一对一通信    客户机/服务器（C/S）：一对多通信2、函数    int socket(int domain, int type, int protocol);    功能：创建socket描述符，可以把socket当作文件来看待，发送数据就是写文件，接收数据就是读文件。    domain:地址类型        AF_UNIX/AF_LOCAL/AF_FILE    本地通信（进程间通信）        AF_INET                     基本32IP地址通信，IPv4 Internet protocols        AF_INET6                    基本128IP地址通信，IPv6，IPv6 Internet protocols    type:通信协议        SOCK_STREAM     数据流协议，TCP        SOCK_DGRAM      数据报协议，UDP    protocol：特别通信协议，给0即可。    返回值：socket描述符，类似文件描述符3、通信地址    注意：函数接口定义的是sockaddr，而实际提供的是sockaddr_un或sockaddr_in    struct socketaddr{        sa_family_t sa_family;        char sa_data[14];    }    struct sockaddr_un {        __SOCKADDR_COMMON(sun_); /* AF_UNIX */地址类型 参看domain参数         char sun_path[108]; /* pathname */socket文件的路径    };    struct sockaddr_in{        __SOCKADDR_COMMON(sin_);        in_port_t sin_port;     // 端口号 大端字节序 参看联合        struct in_addr sin_addr // ip地址 大端4字节整数    }    struct in_addr{        in_addr_t s_addr; //     }4、绑定    socket描述符与物理通信载体（网卡或socket文件）绑定在一起。    int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);    sockfd：socket描述符：socket函数的返回值    addr：通信地址结构体，实际给的是sockaddr_un或sockaddr_in，需要强制类型转换。    addrlen：通信地址结构体类型的字节数，使用sizeof计算。5、连接    int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);    sockfd：socket描述符    addr：通信目标地址    addrlen：通信地址结构体类型的字节数，使用sizeof计算。    返回值：在不同的编程模型下返回值意义不同，在本地通信        返回加0，失败返回-1。6、数据接收与发送：read/write    ssize_t recv(int sockfd, void *buf, size_t len, int flags);    ssize_t send(int sockfd, const void *buf, size_t len, int flags);    recv／send与read/write功能一样，flags多了是否阻塞的功能（0阻塞，1不阻塞）。7、关闭套接字：close    如果是网络通信，端口号并不会立即回收，大概会占用3分钟左右。8、字节序转换#include &lt;arpa/inet.h&gt;    uint32_t htonl(uint32_t hostlong);    功能：把32位本机字节序转换成32位的网络字节序    uint16_t htons(uint16_t hostshort);    功能：把16位本机字节序转换成16位的网络字节序    uint32_t ntohl(uint32_t netlong);    功能：把32位网络字节序转换成32位的本机字节序    uint16_t ntohs(uint16_t netshort);    功能：把16位网络字节序转换成16位的本机字节序9、ip地址转换#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;    int inet_aton(const char *cp, struct in_addr *inp);    功能：把点分十进制的ip地址（字符串）转换成32位无符号整数，使用指针获取。    in_addr_t inet_addr(const char *cp);    功能：把点分十进制的ip地址（字符串）转换成32位无符号整数，使用返回值直接返回。    char *inet_ntoa(struct in_addr in);    功能：32位无符号整数表示的ip地址，转换成点分十进制的ip地址（字符串）。10、本地通信编程模型    进程A                      进程B    创建套接字（AF_LOCAL）      创建套接字（AF_LOCAL）     准备地址（sockaddr_un）     准备地址（sockaddr_un）    绑定（自己的socket/地址）    连接（connect，连接进程A的地址）    接收数据                    发送数据    关闭套接字</code></pre><h2 id="三、基于TCP协议的C-S模型"><a href="#三、基于TCP协议的C-S模型" class="headerlink" title="三、基于TCP协议的C/S模型"></a>三、基于TCP协议的C/S模型</h2><pre><code>int listen(int sockfd, int backlog);    功能：设置等待连接的最大数量    sockfd:被监听的socket描述符    backlog:等待连接的最大数量（排队的数量）int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);    功能：等待连接sockfd连接    addr：获取连接的地址    addrlen：设置连接地址结构体的长度    返回值：专门用于通信的描述符编程模型：    Server                                  Client    创建socket套接字                         创建socket套接字    准备地址（sockaddr_in,本机地址）          准备地址（服务器地址）    绑定（bind）                             。。。    监听（listen）                           。。。    等待连接（accept、fork）                 连接（connect）    接收请求(read/recv)                      发送请求（write/send）    响应请求(write/send)                     接收响应（read/recv)                        关闭(close)                              关闭（close）</code></pre><h2 id="四、基于UDP协议的C-S模型"><a href="#四、基于UDP协议的C-S模型" class="headerlink" title="四、基于UDP协议的C/S模型"></a>四、基于UDP协议的C/S模型</h2><pre><code>ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,  const struct sockaddr *dest_addr, socklen_t addrlen);功能：UDP协议专用的数据发送函数    sockfd：套接字描述符    buf：待发送的缓冲区首地址    len：待发送的数据字节数    flags：0阻塞，1不阻塞    dest_addr：目标计算机地址（发送）    addrlen：地址结构体的字节数    返回值：成功发送的字节数ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);功能：UDP协议专用的数据接收函数    sockfd：套接字描述符    buf：数据存储位置     len：最大接收字节数    flags：0阻塞，1不阻塞    src_addr：获取发送者的地址    addrlen：设置地址结构体的字节数    返回值：成功接收的字节数。编程模型：Server                                  Client创建套接字（socket）                     创建套接字（socket）   准备地址（本机地址sockaddr_in）           准备地址（目标机地址sockaddr_in）绑定（bind（sockfd+addr））              。。。接收请求（recvfrom）                     发送请求（sendto）响应请求（sendto）                       接收响应（recvfrom）关闭套接字（close）                      关闭套接字（close）注意：从服务器到客户端返回的路线是UDP协议自己设计的。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> 网络通信 </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++操作符重载相关知识</title>
      <link href="/blog/2019/09/05/c-cao-zuo-fu-chong-zai-xiang-guan-zhi-shi/"/>
      <url>/blog/2019/09/05/c-cao-zuo-fu-chong-zai-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、操作符函数重载"><a href="#一、操作符函数重载" class="headerlink" title="一、操作符函数重载"></a>一、操作符函数重载</h2><pre><code>什么是操作符函数：在C++中针对类类型的对象的运算符，由于它们肯定不支持真正的运算操作，因此编译器会将它们翻译成函数，这种就叫做操作符函数（运算符函数）。编译器把运算翻译成运算符函数，可以针对自定义的类类型设计它独有的运算功能。其实各种运算符已经具备一些功能，再次实现它的就是叫作运算符重载。双目运算符：    a+b    成员函数        a.operator+(b);    全局函数        operator+(a,b);单目运算符：    !a    成员函数        a.operator!(void);    全局函数        operator!(a);</code></pre><h2 id="二、双目操作符函数重载"><a href="#二、双目操作符函数重载" class="headerlink" title="二、双目操作符函数重载"></a>二、双目操作符函数重载</h2><pre><code>成员函数：const 类对象 operator#(const 类&amp; that) const{    return 类(参数#参数);}注意：双目录运算符的运算结果是个右值，返回值应该加 const ，然后为了const对象能够调用，参数应写const，函数也应该具备const属性。全局函数：const 类 operator#(const 类&amp; a,const 类&amp; b){}注意：全局函数不是成员函数，可能会需要访问到类的私有成员，解决这种问题可以把函数声明为类的友元函数（友元不是成员）。友元：在类的外部想访问类的私有成员（public/protected/private）时，需要把所在的函数声明为友元，但是友元只是朋友，因此它只有访问权，没有实际的拥有权（其根本原因是它没有this指针）。友元声明：把函数的声明写一份到类中，然后在声明前加上friend 关键字。使用友元即可把操作符函数定义为全局的，也可以确保类的封装性。注意：友元函数与成员函数不会构成重载关系，因此它们不在同一个作用域内。</code></pre><h2 id="三、赋值类型的双目操作符"><a href="#三、赋值类型的双目操作符" class="headerlink" title="三、赋值类型的双目操作符"></a>三、赋值类型的双目操作符</h2><pre><code>成员    类 operator#(void)    {    }全局    类 operator#(const 类&amp; that)    {    }1、获取单参构造成赋值运算的调用方式。String str = "xxx"; // 会调用单参构造，而不调用赋值运算符str = "hhh";2、左操作数据不能具有const属性    1.成员函数不能是常函数    2.全局函数第一个参数不能有const属性3、返回值应该都（成员/全局）具备const属性</code></pre><h2 id="四、单目操作符函数重载"><a href="#四、单目操作符函数重载" class="headerlink" title="四、单目操作符函数重载"></a>四、单目操作符函数重载</h2><pre><code>-,~,!,&amp;,*,-&gt;,++,--成员    const 类 operator#(void) const    {    }全局    const 类 operator#(const 类&amp; that)    {    }前++/--    类&amp; operator#(void)    {    }    类&amp; operator#(类&amp; that)    {    }后++/--(哑元)    const 类&amp; operator#(int)    {    }    const 类&amp; operator#(类&amp; that,int)    {    }</code></pre><h2 id="五、输入输出操作符重载"><a href="#五、输入输出操作符重载" class="headerlink" title="五、输入输出操作符重载"></a>五、输入输出操作符重载</h2><pre><code>cout 是 ostream 类型的对象，cin 是 istream 类型的对象。如果&lt;&lt;/&gt;&gt;运算实现为成员函数，那么调用者应该是ostream/istream,而我们无权增加标准库的代码，因此输入/输出运算符只能定义为全局函数。ostream&amp; operator&lt;&lt;(ostream&amp; os,const 类&amp; n){}istream&amp; operator&gt;&gt;(istream&amp; os,类&amp; n){}</code></pre><h2 id="六、特殊操作符的重载（笔试面试比较重要）"><a href="#六、特殊操作符的重载（笔试面试比较重要）" class="headerlink" title="六、特殊操作符的重载（笔试面试比较重要）"></a>六、特殊操作符的重载（笔试面试比较重要）</h2><pre><code>1、下标操作符 []，常用于在容器类型中以下标方式获取元素。类型&amp; operator[](int i){}2、函数操作符()，一个类如果重载函数操作符，那么它的对象就可以像函数一样使用，参数的个数、返回值类型，可以不确定，它是唯一一个可以参数有缺省参数的操作符。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;stdlib.h&gt;using namespace std;class Array{    int* arr;    size_t len;public:    Array(size_t len):len(len)    {        arr = new int[len];    }    void operator()(void)    {        cout&lt;&lt;"emmm"&lt;&lt;endl;    }    int&amp; operator[](int i)    {        if(i &lt; 0 || i &gt;= len)        {            cout&lt;&lt;"下标错误"&lt;&lt;endl;            exit(0);        }        return arr[i];    }};int main(){    Array arr(100);    for(int i=0; i&lt;10; i++)    {        arr[i] = i;        cout&lt;&lt; arr[i] &lt;&lt; endl;    }    arr();}</code></pre><pre><code>3、解引用操作符*，成员访问操作符-&gt;    如果一个类重载了*和-&gt;，那么它的对象就可以像指针一样使用。    所谓的智能指针就是一种类对象，它支持解引用和成员访问操作符。4、智能指针    常规指针的缺点：        当一个常规指针离开它的作用域时，只有该指针所占用的空间会被释放，而它指向的内存空间能否被释放就不一定了，在一些特殊情况（人为、业务逻辑特殊）free或delete没有执行，就会形成内存泄漏。    智能指针的优点：        智能指针是一个封装了常规指针的类类型对象，当它离开作用域时，它的析构函数会自动执行，它的析构函数会负责释放常规指针所指向的动态内存（以正确方式创建的智能指针，它的析构函数才会正确执行）。    智能指针和常规指针的相同点：都支持*和-&gt;运算。    智能指针和常规指针的不同点：        任何时候，一个对象只能使用一个智能指针来指向，而常规指针可以指向多次。        只能指针的赋值操作需要经过拷贝构造和赋值构造特殊处理（深拷贝）。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;class Int{public:    int val;    Int(int val=0):val(val){ }    void set_val(int val)    {        this-&gt;val = val;    }    int get_val(void)    {        return val;    }    Int&amp; operator=(const int val)    {        this-&gt;val = val;        return *this;    }    ~Int(void)    {        cout&lt;&lt;"我是Int的析构函数"&lt;&lt;endl;    }    friend ostream&amp; operator&gt;&gt;(ostream&amp; os,Int&amp; n);};ostream&amp; operator&lt;&lt;(ostream&amp; os,Int&amp; n){    return os&lt;&lt;n.val;}class IntPointer{    Int* ptr;public:    IntPointer(Int* ptr):ptr(ptr){ }    Int&amp; operator*(void)    {        return *ptr;    }    ~IntPointer(void)    {        delete ptr;    }};int main(){    Int* num =new Int(100);    IntPointer p = num;    *p = 20;    cout&lt;&lt;*p &lt;&lt;endl;    *p = 10;    cout&lt;&lt;*p &lt;&lt;endl;}</code></pre><pre><code>auto_ptr:标准库中封装好的智能指针，实现了常规指针的基本功能，头文件 #include &lt;memory&gt;    用法：auto_ptr&lt;指向的类型&gt; 指针变量名(对象的地址)    auto_ptr的局限性：        不能跨作用域使用，一旦离开作用域指针变量会释放它指向的对象也会释放。        不能放入标准容器。        不能指向对象数组。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;memory&gt;using namespace std;class A{public:    A(void)    {        cout&lt;&lt;"构造"&lt;&lt;endl;    }    ~A(void)    {        cout&lt;&lt;"析构"&lt;&lt;endl;    }    void show(void)    {        cout&lt;&lt;"A's show"&lt;&lt;endl;    }};int main(){    auto_ptr&lt;A&gt; ptr(new A);    (*ptr).show();}</code></pre><pre><code>5、new/delete/new[]/delete[]运算符重载    1.C++缺省的堆内存管理器速度较慢，重载new/delete底层使用malloc/free可以提高运行速度。    2.new在失败会产生异常，而每次使用new时为了安全都应该进行异常捕获，而重载new操作符只需要在操作符函数中进行一次错误处理即可。    3.在一些占字节数比较小的类，频繁使用new，可能会产生大量的内存碎片，而重载new操作符后，可以适当的扩大每次申请的字节数，减少内存碎片产生的机率。    4.重载 new/delete 可以记录堆内存使用的信息    5.重载 delete 可以检查到释放内存失败时的信息，检查到内存泄漏。</code></pre><h2 id="七、重载操作符的限制"><a href="#七、重载操作符的限制" class="headerlink" title="七、重载操作符的限制"></a>七、重载操作符的限制</h2><pre><code>1、不能重载的操作符    域限定符 ::    直接成员访问操作符 .    三目操作符 ?:    字节长度操作符 sizeof    类型信息操作符 typeid2、重载操作符不能修改操作符的优先级3、无法重载所有基本类型的操作符运算4、不能修改操作符的参数个数5、不能发明新的操作符</code></pre><h2 id="关于操作符重载的建议："><a href="#关于操作符重载的建议：" class="headerlink" title="关于操作符重载的建议："></a>关于操作符重载的建议：</h2><pre><code>1、在重载操作符时要根据操作符实际的功能和意义来确定具体参数，返回值，是否具有const属性，返回值是否是引用或者临时对象。2、重载操作符要符合情理（要有意义），要以实际用途为前提。3、重载操作符的意义是为了让对象的操作更简单、方便，提高代码的可读性，而不是为了炫技。4、重载操作符要与默认的操作符的功能、运算规则一致，不要出现反人类的操作。#define ture 0#define false 1</code></pre><p>相关测试代码：</p><pre><code>#include &lt;iostream&gt;using namespace std;class Point{    int x;    int y;public:    Point(int _x=0,int _y=0)    {        x = _x;        y = _y;    }/*    void show(void) const    {        cout&lt;&lt; "(x:" &lt;&lt;x &lt;&lt;",y:" &lt;&lt;y&lt;&lt; ")"&lt;&lt;endl;    }*/    friend const Point operator+(const Point&amp; a,const Point&amp; b);    friend const Point operator-(const Point&amp; a,const Point&amp; b);    friend const Point operator*(const Point&amp; a,int b);    friend const Point operator*(int a,const Point&amp; b);    const Point operator/(const int that) const    {        return Point(x/that,y/that);    }/*    const Point operator+(const Point&amp; that) const    {        return Point(that.x+x,that.y+y);    }*/    const Point&amp; operator+=(const Point&amp; that)    {        x += that.x;        y += that.y;        cout&lt;&lt;"___";        return *this;    }    Point operator-(void)    {        return Point(-x,-y);    }    // 前++    Point&amp; operator++(void)    {        x++;        y++;        return *this;    }    // 后++ (哑元)/*    Point operator++(int)    {        Point temp(x,y);        x++;        y++;        return temp;    }*/    friend Point operator++(Point&amp; that,int);//友元    Point operator--(int)    {        Point temp(x,y);        x--;        y--;        return temp;    }    friend ostream&amp; operator&lt;&lt;(ostream&amp; os,const Point&amp; p);    friend istream&amp; operator&gt;&gt;(istream&amp; is,Point&amp; p);};ostream&amp; operator&lt;&lt;(ostream&amp; os,const Point&amp; p){    return os &lt;&lt;p.x&lt;&lt;","&lt;&lt;p.y;}istream&amp; operator&gt;&gt;(istream&amp; is,Point&amp; p){    cout &lt;&lt; "请输入x的值:";    is &gt;&gt; p.x;    cout&lt;&lt;"请输入y的值：";    is &gt;&gt; p.y;    return is;}Point operator++(Point&amp; that,int){    Point temp(that.x,that.y);    that.x++;    that.y++;    return temp;}const Point operator+(const Point&amp; a,const Point&amp; b){    return Point(a.x+b.x,a.y+b.y);}const Point operator-(const Point&amp; a,const Point&amp; b){    return Point(a.x-b.x,a.y-b.y);}const Point operator*(const Point&amp; a,int b){    return Point(a.x*b,a.y*b);}const Point operator*(int a,const Point&amp; b){    return Point(a*b.x,a*b.y);}int main(){    Point p(3,9);    Point p1(1,3);    Point p2 = p1+p+p1;    cout&lt;&lt;"+:";    cout&lt;&lt;p2&lt;&lt;endl;    Point p4(6,6);    cin&gt;&gt;p4;    cout&lt;&lt;p4&lt;&lt;endl;//    p2.show();    p2 = p2-p1;    cout&lt;&lt;"-:";    cout&lt;&lt;p2&lt;&lt;endl;//    p2.show();    p2 = p1*3;    cout&lt;&lt;"*:";    cout&lt;&lt;p2&lt;&lt;endl;//    p2.show();    p2 = 3*p1;//    p2.show();    cout&lt;&lt;p2&lt;&lt;endl;    cout&lt;&lt;(-p1)&lt;&lt;endl;//    (-p1).show();    p2 = p1;//    p2.show();//    (++p1).show();    cout&lt;&lt;(++p1)&lt;&lt;endl;//    (p2++).show();    cout&lt;&lt;"p2:"&lt;&lt;(p2++)&lt;&lt;endl;    cout&lt;&lt;"p2:"&lt;&lt;p2&lt;&lt;endl;//    p2.show();    cout&lt;&lt;"p2:"&lt;&lt;(p2--)&lt;&lt;endl;    cout&lt;&lt;"p2:"&lt;&lt;p2&lt;&lt;endl;//    (p2--).show();//    p2.show();    p2 = p2/3;//    p2.show();    cout&lt;&lt;"p2:"&lt;&lt;p2&lt;&lt;endl;}</code></pre><p>如有错误，望指出，谢谢~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML相关知识</title>
      <link href="/blog/2019/09/04/uml-xiang-guan-zhi-shi/"/>
      <url>/blog/2019/09/04/uml-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、UML概述"><a href="#一、UML概述" class="headerlink" title="一、UML概述"></a>一、UML概述</h2><pre><code>1、什么是UML    统一建模语言（Unified Modeling Language）。用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的开发方法。UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。    项目开发的说明书（设计图）。2、UML是做什么的    帮助建立软件开发过程和各种模型    主要目的是为了让开发者之间进行有效的交流。        开发者与设计者之间的交流        开发者与开发者之间的交流        开发者与管理者之间的交流    适合大型项目和大型团队的开发3、UML的应用领域    UML的目标是以面向对象的方式来描述任何类型的系统，常用于建立软件的模型。4、我对UML的看法    不建议用UML生成代码。    没有完美的UML图，够用就行，图是死的，人是活的。    UML主要功能是为了更好的让开发团队与用户之间进行沟通交流。    先结对学习UML目的以应用、看懂为主(有利于后期工作)，以画图为辅。    但需要长期学习，为后期成为系统分析师、架构师、产品经理、项目经理打下基础。</code></pre><h2 id="二、Rational-Rose四种视图与UML的8中图形关系"><a href="#二、Rational-Rose四种视图与UML的8中图形关系" class="headerlink" title="二、Rational Rose四种视图与UML的8中图形关系"></a>二、Rational Rose四种视图与UML的8中图形关系</h2><pre><code>    Rose启动后自动创建四种视图：        用例视图： Use Case View            帮助理解和使用系统，这种图展示了系统的参与者和用例是怎么相互作用的，包括了系统中的所有角色。            用例图：Use Case Digram            时序图：Sequence Digram            协作图：Collaboration Digram            活动图：Activity Digram            这种视图的主要使用都是用户、分析人员、项目管理人员。        逻辑视图： Logical View            逻辑视图关注的是系统如何实现用例中提出的功能，它提供系统的详细图形，描述了组件间如何关联。            类图：Call Digram            状态图：Statechart Dirgam            这种视图的主要使用者是开发人员，开发人员包括：程序员、需求分析师、测试工程师、项目经理。        构件视图： Component View            这种视图关注的是代码模板间的关系，通过组件视图可以知道哪些代码是组件，哪些是代码库，哪些是运行组件，会默认有一个Component图表。            这种视图的主要使用者是负责控制代码、编译、部署应用程序的人员。        部署视图： Deployment View            这种视图关注的是系统的实际部署，进程和设备间的实际连接。            这种视图的使用者是用户和软件的发布人员。</code></pre><h2 id="三、用例图：详细表示所有的用例需求，不考虑细节"><a href="#三、用例图：详细表示所有的用例需求，不考虑细节" class="headerlink" title="三、用例图：详细表示所有的用例需求，不考虑细节"></a>三、用例图：详细表示所有的用例需求，不考虑细节</h2><pre><code> 1、用例图的作用        主要用它来描述需求，画图时要从用户的角度出发，主要用于与用户之间的交流。    2、用例图的要点        正确反应用户的需求        每个用例的内部实现        细节不是本阶段要考虑的问题    3、用例图包括        参与者        用例        用例之间的关系    4、如何确定参与者        谁使用系统        谁负责启动、关闭系统        谁查询数据        谁提供数据        谁安装、升级系统    5、什么是用例        是系统的使用过程，一个用例就是一个功能需求。</code></pre><h2 id="四、类图：主要表示类与类之间的关系，不用详细考虑类的属性和方法"><a href="#四、类图：主要表示类与类之间的关系，不用详细考虑类的属性和方法" class="headerlink" title="四、类图：主要表示类与类之间的关系，不用详细考虑类的属性和方法"></a>四、类图：主要表示类与类之间的关系，不用详细考虑类的属性和方法</h2><pre><code>    1、类图的主要作用        主要用来描述类的内部结构和类与类之间的关系。        类图中不显示暂时性的消息，是面向对象剑魔时的主要组成部分。    2、类图主要包括        名称：类名        属性：类的成员变量            访问权限            变量名            类型        操作：类的成员函数            访问权限            函数名            参数名            参数类型            返回值类型        职责：说明此类具体负责的任务，解决什么问题    3、类之间的关系        继承关系：空心箭头实线来表示继承关系，子类指向父类            一个类Test继承Base类的属性和行为，并可以增加自己的属性和行为。        实现关系：空心箭头虚线来表示继承关系，子类指向父类            一个类Test继承一个抽象类，父类中的函数定义为纯虚函数，子类继承后覆盖所有纯虚函数。        依赖关系：箭头和虚线来表示依赖关系，依赖者指向被依赖者            一个类A中使用到类B（类A中的函数的参数或返回值类型是类B），这种关系是一种偶然、临时的，是一种非常弱的关系。        关联关系：箭头和实线来表示关联关系，依赖者指向被依赖者            是一种强依赖关系，类A的属性（成员变量）是类B。        聚合关系：实心菱形和箭头实线来表示聚合关系，菱形指向整体，箭头指向部分。            聚合关系是一种关联关系的特例，它体现的是整体与部分。            整体与部分之间是可分离，它们可以具有各自的生命周期。            从代码层面来讲与关联是一致的。        组合关系：实心菱形和箭头实线来表示组合关系，菱形指向整体，箭头指向部分。            组合关系也是一种聚合关系的特例，这种关系比聚合更强，也称为强聚合，同样也体现出整体与部分，但此时的整体与部分是不可分隔的。            从代码层面来讲与关联是一致的。        从代码实现层面只有继承、包含、依赖。    用例图和类表示对象之间消息的发送顺序，值考虑正确情况。</code></pre><h2 id="五、时序图：主要表示对象之间消息的发送顺序，只考虑正确情况。"><a href="#五、时序图：主要表示对象之间消息的发送顺序，只考虑正确情况。" class="headerlink" title="五、时序图：主要表示对象之间消息的发送顺序，只考虑正确情况。"></a>五、时序图：主要表示对象之间消息的发送顺序，只考虑正确情况。</h2><pre><code>用来表示对象之间的关系，同时强调对象之间的交互。时序图向用户表示时间随着时间的推移，清晰的可视化轨迹。时序图用来表示项目中的某个操作中如何进行的，具体的步骤是什么。</code></pre><h2 id="六、状态图"><a href="#六、状态图" class="headerlink" title="六、状态图"></a>六、状态图</h2><pre><code>用来表示对象的状态变化，用于帮助开发人员理解系统中对象的行为。主要有状态，生命周期，条件，状态转换，事件和动作。</code></pre><h2 id="七、活动图"><a href="#七、活动图" class="headerlink" title="七、活动图"></a>七、活动图</h2><pre><code>活动图的本质就是流程图，它描述了系统的活动、判断点和分支。侧重于操作而不是对象，重点表示逻辑变化。一个动作的流程图一般包括起点、终点、操作。泳道：用于多种角色参与一个过程，一个活动只能属于一个泳道。</code></pre><h2 id="八、协作图"><a href="#八、协作图" class="headerlink" title="八、协作图"></a>八、协作图</h2><pre><code>主要用来描述对象之间的交互关系，强调参与交互的各对象的组织。需要按照组织对控制流程进行建模时选择画协作图。协作图与时序图的区别：    时序图描述了交互过程中的时间顺序，但没有表达对象之间的关系。    协作图描述了对象间的关系但时间顺序必须从时序图中获得。合格的协作图和时序图主义相同，可互换，而不丢失信息。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的项目的相关问题</title>
      <link href="/blog/2019/09/04/wo-de-xiang-mu-de-xiang-guan-wen-ti/"/>
      <url>/blog/2019/09/04/wo-de-xiang-mu-de-xiang-guan-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>由于个人编程是，使用的自己的getch.h头文件，导致可能部分项目无法成功通过编译。<br>Linux系统，需要将getch.h添加到user/include下<br>Windows系统，需要将getch.h头文件换为conio.h</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 相关问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的虚函数表、强制类型转换、I/O流等</title>
      <link href="/blog/2019/09/03/c-zhong-de-xu-han-shu-biao-qiang-zhi-lei-xing-zhuan-huan-i-o-liu-deng/"/>
      <url>/blog/2019/09/03/c-zhong-de-xu-han-shu-biao-qiang-zhi-lei-xing-zhuan-huan-i-o-liu-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、虚函数表"><a href="#一、虚函数表" class="headerlink" title="一、虚函数表"></a>一、虚函数表</h2><pre><code>什么是虚函数表，在C++的类中，一旦成员函数中有虚函数，这个类中就会多一个虚函数表指针，这个指针指向一个虚函数表，表里面记录了这个类中所有的虚函数，当这个类被继承，它的子类中也会有一个虚函数表（不管子类中有没有虚函数），如果子类的成员函数中有函数签名与父类的虚函数一样，就会用子类中的函数体寒它在虚函数表中的位置，这样就达到了覆盖的效果。当通过类指针或引用调用函数时，会根据对象中实际的虚函数表记录来调用函数，这样就达到了多态的效果。</code></pre><h2 id="二、虚析构"><a href="#二、虚析构" class="headerlink" title="二、虚析构"></a>二、虚析构</h2><pre><code>当使用delete释放一个父类指针时，不管实际指向的对象是子类还是父类都只会调用父类的析构函数（多态肯定会出现的问题）。如果子类的析构函数有需要负责释放的内存，就会造成内存泄漏。为了解决这个问题，可以把父类的析构函数设置为虚函数，析构函数进行覆盖时不会比较函数名。当父类的析构函数为虚函数时，通过父类指针或引用释放子类对象时，会自动调用子类的析构函数，子类的析构函数执行完成后也会调用父类的析构函数。注意：析构函数可以是虚函数，但构造函数不行</code></pre><h2 id="三、强制类型转换"><a href="#三、强制类型转换" class="headerlink" title="三、强制类型转换"></a>三、强制类型转换</h2><pre><code>注意：C++中为了兼容C语言，(目标类型)源类型 依然可以继续使用，但C语言的强制类型转换安全性差，因此建议使用C++中的强制类型转换。注意：C++之父认为如果代码设计的完善，根本不需要用到强制类型转换，而C++的强制类型转换之所以设计的很复杂，是为了让程序员多关注代码本身的设计，尽量少使用。C++中的强制类型转换保证没有很大安全隐患。static_cast&lt;目标类型&gt;(源类型)   编译器会对源类型和目标类型做兼容性检查，不通过则报错。dynamic_cast&lt;目标类型&gt;(源类型)  编译器会对源类型和目标类是否同为指针或引用，并且存在多态型的继承关系。const_cast&lt;目标类型&gt;(源类型)    编译器会对源类型和目标类检查，是否同为指针或引用，除了常属性外其他必须完全相同，否则报错。reinterpret_cast&lt;目标类型&gt;(源类型)  编译器会对源类型和目标类是否为指针或整数进行检查，也就是说把整数转换成指针或把指针转换为整数。</code></pre><p>拓展：<br>    静态编译：指针或引用的目标是确定的，在编译时期就确定了所有的类型检查、函数调用。<br>    动态编译：指针或引用的目标是不确定的（多态），只有在函数调用的时候才确定具体是哪一个子类。</p><h2 id="四、I-O流"><a href="#四、I-O流" class="headerlink" title="四、I/O流"></a>四、I/O流</h2><pre><code>I/O流的打开模式：    ios::in     以读权限打开文件，不存在则失败，存在不清空    ios::out    以写权限打开文件，不存在则创建，存在则清空    ios::app    打开文件用于追加，不存在则创建，存在不清空    ios::binary 以二进制模式进行读写    ios::ate    打开时定位到文件末尾    ios::trunc  打开文件时清空fstream/ifstream/ofstream 类用于进行文件操作。    构造函数或成员函数 open 用于打开文件    good成员函数检查流是否可用    eof成员函数用于输入流是否结束操作符 &gt;&gt;  用于从文件中读取数据到变量 操作符 &lt;&lt;  用于输出数据到文件IO流有一系列格式化控制函数，类似：左对齐、右对齐、宽度、填充、小数点位数。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;fstream&gt;using namespace std;int main(){    fstream fsi("test.txt",ios::in);    //fs.open("test.txt",ios::in);    if(!fsi.good())    {        cout &lt;&lt;"打开失败"&lt;&lt;endl;    }    else    {        cout &lt;&lt;"打开成功"&lt;&lt;endl;    }    string str,s1,s2,s3;    int num = 0;/*    fsi &gt;&gt; str;    //读到空格或换行就停止    fsi &gt;&gt; num &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3;    cout&lt;&lt;str&lt;&lt;"-"&lt;&lt;num&lt;&lt;"-"&lt;&lt;s1&lt;&lt;"-"&lt;&lt;s2&lt;&lt;"-"&lt;&lt;s3&lt;&lt;endl;*/    string arr[10];    int i = 0;    while(1)    {        fsi &gt;&gt; arr[i];        if(arr[i].size() == 0)        {            break;        }        i++;    }    for(int j=0; j&lt;i; j++)    {        cout &lt;&lt; arr[j] &lt;&lt;"-";    }    fstream fso("test.txt",ios::out);    fso &lt;&lt; "hehe" &lt;&lt; " " &lt;&lt; 100 &lt;&lt;" " &lt;&lt;"adsadsad"&lt;&lt;endl;}</code></pre><pre><code>二进制读写：read/write    read (char_type *__s,streamsize __n)    write (char_type *__s,streamsize __n)gcount成员函数可以获取上次流的二进制读写操作的字节数。随机读写：    seekp (off_type,ios_base::seekdir)    功能：设置文件的位置指针。    off_type：偏移值        正值向右，负值向左    seekdir：基础位置        ios::beg    文件开头        ios::cur    当前位置        ios::end    文件末尾</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;fstream&gt;using namespace std;int main(){    fstream fs("test.txt",ios::in);    if(!fs.good())    {        cout &lt;&lt; "文件打开失败" &lt;&lt; endl;        return -1;    }    // 调整文件的位置指针到末尾    fs.seekp(0,ios::end);    cout &lt;&lt; "文件的字节数：" &lt;&lt; fs.tellp() &lt;&lt; endl;    fs.close();}</code></pre><pre><code>练习：使用C++标准IO，实现带覆盖检查的cp命令。    ./cp src dest</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;fstream&gt;using namespace std;int main(int argc,char* argv[])// 写的有点问题0.0{    if(argc != 3)    {        cout &lt;&lt; "命令错误" &lt;&lt; endl;    }    // 读写    fstream fi(argv[1],ios::in);    fstream fo(argv[2],ios::out);    if(!fi.good())    {        cout &lt;&lt; "源文件不存在" &lt;&lt; endl;    }    cout &lt;&lt; "是否要覆盖目标文件,y/n" &lt;&lt; endl;    while(1)    {        string a;        cin &gt;&gt; a;        if(a == "y")        {            break;        }        else if(a == "n")        {            return 0;        }        else        {            cout &lt;&lt; "指令错误" &lt;&lt; endl;            continue;        }    }    while(1)    {        string str;        fi &gt;&gt; str;        if(str.size() == 0)        {            break;        }        fo &lt;&lt; str &lt;&lt;" "; // 文件末尾多个空格，需要删除，并且没有换行功能    }}</code></pre><h2 id="五、类型信息-typeid"><a href="#五、类型信息-typeid" class="headerlink" title="五、类型信息 typeid"></a>五、类型信息 typeid</h2><pre><code>用于获取数据的类型信息。name成员函数，可以获取类型的名字，内建类型名字使用缩写。同时还支持 == != 用来比较是否是同一种类型。如果用于判断父子类的指针或引用，它不能准确判断出实际的对象类型。但可以判断出具有多态继承关系的父子类的指针或引用，它的实际对象。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;typeinfo&gt;using namespace std;class Base{public:    virtual ~Base(void)    {    }};class Test:public Base{};int main(){    Base b;    Test t;    cout &lt;&lt; typeid(b).name() &lt;&lt; endl;    cout &lt;&lt; (typeid(t) == typeid(b)) &lt;&lt; endl;    cout &lt;&lt; endl;    Base* p = new Test;    cout &lt;&lt; (typeid(*p) == typeid(Test)) &lt;&lt; endl;    cout &lt;&lt; (typeid(p) == typeid(Test*)) &lt;&lt; endl;}</code></pre><pre><code>扩展：    sudo find / -name filename    sudo find / | grep "std"    grep 'Base' *               当前目录查找包含此字符的文件    grep -r 'Base' *            当前目录及所有子级目录，查找包含此字符的文件    grep -r 'Base' * dir        指定目录下及所有子级目录，查找包含此字符的文件</code></pre><h2 id="六、异常处理"><a href="#六、异常处理" class="headerlink" title="六、异常处理"></a>六、异常处理</h2><pre><code>抛异常    throw 数据    抛异常对象    抛基本类型    注意：不能抛出局部对象的指针或引用（构造函数和析构函数不能抛出异常）。    注意：如果异常没有被捕获处理，程序就会停止。捕获异常try{    可以抛出异常的代码}catch(类型 变量名) // 根据数据类型进行捕获{    处理异常，如果无法处理可以继续抛出异常}注意：捕获异常的顺序是自上而下的，而不是最精准的匹配，针对子类异常捕获时要放在父类的前面。函数的异常声明：    返回值类型 函数名(参数列表)throw(类型1,类型2,...)    注意：如果不写异常声明表示什么类型的异常都可能抛出。    注意：如果写了异常声明表示只抛出某些类型的异常，一旦超出异常声明的范围，程序会直接停止，无法捕获。    注意：throw() 表示什么类型都不会抛出设计异常类：</code></pre><pre><code>      class Error      {          int errno;          char errmsg[255];      public:          Error(int errno = -1,const char* msg = "未知错误")          {              this-&gt;errno = errno;              strcpy(errmsg,msg);          }          int getError(void)          {              return errno;          }          const char* getErrmsg(void)          {              return errmsg;          }      }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中STL相关知识</title>
      <link href="/blog/2019/08/31/c-zhong-stl-xiang-guan-zhi-shi/"/>
      <url>/blog/2019/08/31/c-zhong-stl-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>STL介绍</strong><br>    STL标准模板库，由惠普实验室提供，里面集成了常用的数据结构类模板和算法函数模板等。<br>    容器：用来存储各种类型数据的数据结构。<br>    迭代器：类似于专门用来指向容器成员的指针，用来遍历、操作、管理容器中的成员，可以大大提高容器的访问速度。<br>    算法：STL实现了常见的排序、查找算法。</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20190827150134261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="List：双端链表容器"><a href="#List：双端链表容器" class="headerlink" title="List：双端链表容器"></a>List：双端链表容器</h2><pre><code>iterator：用来指向容器中的元素    begin() 获取指向第一个元素的迭代器    end() 获取指向最后一个元素的下一个位置相关使用参考：https://blog.csdn.net/Ikaros_521/article/details/100091859</code></pre><p><img src="https://img-blog.csdnimg.cn/20190827150153998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="vector：向量容器，俗称数组"><a href="#vector：向量容器，俗称数组" class="headerlink" title="vector：向量容器，俗称数组"></a>vector：向量容器，俗称数组</h2><pre><code>    #include &lt;iostream&gt;    #include &lt;vector&gt;    using namespace std;    void show(vector&lt;int&gt;&amp; arr)    {        for(int i=0; i&lt;arr.size(); i++)        {            cout &lt;&lt; arr[i] &lt;&lt; " ";        }        cout &lt;&lt; endl;    }    int main()    {        // 创建向量，设置容量并初始化        vector&lt;int&gt; arr(12,0);        show(arr);        // 向量支持[]运算符，所以被称为数组        for(int i=0; i&lt;10; i++)        {            arr[i] = i;        }        show(arr);        vector&lt;int&gt; arr1(10,0);            // 支持比较运算符        cout &lt;&lt; (arr[0]==arr1[0]) &lt;&lt; endl;        // at成员函数,相当于[]操作        for(int i=0; i&lt;arr.size(); i++)        {            cout &lt;&lt; arr.at(i) &lt;&lt; " ";        }        cout &lt;&lt; endl;        // 获取向量的容量         cout &lt;&lt; arr.capacity() &lt;&lt; endl;    }</code></pre><p><img src="https://img-blog.csdnimg.cn/20190827150209482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  <img src="https://img-blog.csdnimg.cn/2019082715022572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="stack、queue：栈和队列"><a href="#stack、queue：栈和队列" class="headerlink" title="stack、queue：栈和队列"></a>stack、queue：栈和队列</h2><p>   <img src="https://img-blog.csdnimg.cn/20190827150318915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="double-ended-queues：双端队列，用法与向量基本一致，但可以在头和尾快速插入和删除元素"><a href="#double-ended-queues：双端队列，用法与向量基本一致，但可以在头和尾快速插入和删除元素" class="headerlink" title="double-ended queues：双端队列，用法与向量基本一致，但可以在头和尾快速插入和删除元素"></a>double-ended queues：双端队列，用法与向量基本一致，但可以在头和尾快速插入和删除元素</h2><pre><code>    #include &lt;iostream&gt;    #include &lt;deque&gt;    using namespace std;    int main()    {        deque&lt;int&gt; d(10,0);        for(int i=0; i&lt;d.size(); i++)        {            d[i] = i;        }        for(int i=0; i&lt;d.size(); i++)        {            cout &lt;&lt; d[i] &lt;&lt; " ";        }        cout &lt;&lt; endl;    }</code></pre><p><img src="https://img-blog.csdnimg.cn/20190827150335763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="set：集合容器，集合中的数据会自动排序，不能重复（赋重复值也没用）。"><a href="#set：集合容器，集合中的数据会自动排序，不能重复（赋重复值也没用）。" class="headerlink" title="set：集合容器，集合中的数据会自动排序，不能重复（赋重复值也没用）。"></a>set：集合容器，集合中的数据会自动排序，不能重复（赋重复值也没用）。</h2><pre><code>    #include &lt;iostream&gt;    #include &lt;set&gt;    using namespace std;    int main()    {        int arr[5] = {4,3,2,2,5};        set&lt;int&gt; s;        // 在集合中插入元素        s.insert(arr,arr+5);        set&lt;int&gt;::iterator it;        for(it=s.begin(); it!=s.end(); it++)        {            cout &lt;&lt; *it &lt;&lt; " ";        }        // 返回某个值元素的个数        cout &lt;&lt; endl &lt;&lt; s.count(2) &lt;&lt;" "&lt;&lt;s.count(1)&lt;&lt; endl;        // 返回指向大于（或等于）某值的第一个元素的迭代器        cout &lt;&lt; *s.lower_bound(1) &lt;&lt; endl;    }</code></pre><p><img src="https://img-blog.csdnimg.cn/20190827150349668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="map：是一种关联容器，在其他编程语言中叫字典，C-中叫映射，以key-value键值对的方式进行存储，key的值不能重复。"><a href="#map：是一种关联容器，在其他编程语言中叫字典，C-中叫映射，以key-value键值对的方式进行存储，key的值不能重复。" class="headerlink" title="map：是一种关联容器，在其他编程语言中叫字典，C++中叫映射，以key/value键值对的方式进行存储，key的值不能重复。"></a>map：是一种关联容器，在其他编程语言中叫字典，C++中叫映射，以key/value键值对的方式进行存储，key的值不能重复。</h2><pre><code>    #include &lt;iostream&gt;    #include &lt;map&gt;    using namespace std;    int main()    {        map&lt;int,string&gt; m;        // 插入元素        m.insert(make_pair(10010,"hehe"));        m.insert(make_pair(10011,"haaa"));        m.insert(make_pair(10012,"xixi"));        m.insert(make_pair(10013,"ohho"));        m.insert(make_pair(10013,"ohho"));        cout &lt;&lt; m.size() &lt;&lt; endl;        cout &lt;&lt; (*m.find(10011)).second &lt;&lt; endl;        map&lt;int,string&gt;::iterator it;        for(it=m.begin(); it!=m.end(); it++)        {            cout&lt;&lt; (*it).first &lt;&lt; " " &lt;&lt; (*it).second &lt;&lt; endl;        }    }</code></pre><p><img src="https://img-blog.csdnimg.cn/20190827150410951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="multimap：多重映射，它与map很像，区别是它的key的值可以重复。"><a href="#multimap：多重映射，它与map很像，区别是它的key的值可以重复。" class="headerlink" title="multimap：多重映射，它与map很像，区别是它的key的值可以重复。"></a>multimap：多重映射，它与map很像，区别是它的key的值可以重复。</h2><pre><code>    #include &lt;iostream&gt;    #include &lt;map&gt;    using namespace std;    int main()    {        multimap&lt;int,string&gt; mm;        // 插入元素        mm.insert(make_pair(10010,"ha1"));        mm.insert(make_pair(10012,"ha2"));        mm.insert(make_pair(10010,"ha3"));        mm.insert(make_pair(10013,"ha4"));        mm.insert(make_pair(10010,"ha5"));        cout &lt;&lt; mm.size() &lt;&lt; endl;        multimap&lt;int,string&gt;::iterator it;        // 查找一个元素        it = mm.find(10010);        // 返回指定元素出现的次数        for(int i=0; i&lt;mm.count(10010); i++)        {            cout &lt;&lt; (*it).second &lt;&lt; endl;            it++;        }    }</code></pre><p><img src="https://img-blog.csdnimg.cn/20190827150451820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="multiset：多重集合，它与set很像，区别是它的值可以重复。"><a href="#multiset：多重集合，它与set很像，区别是它的值可以重复。" class="headerlink" title="multiset：多重集合，它与set很像，区别是它的值可以重复。"></a>multiset：多重集合，它与set很像，区别是它的值可以重复。</h2><pre><code>    #include &lt;iostream&gt;    #include &lt;set&gt;    using namespace std;    int main()    {        int arr[10] = {1,3,5,3,2,5,7,6,3,9};        multiset&lt;int&gt; ms(arr,arr+10);        cout &lt;&lt; ms.size() &lt;&lt; endl;        cout &lt;&lt; ms.count(3) &lt;&lt; endl;        multiset&lt;int&gt;::iterator it;        for(it=ms.begin(); it!=ms.end(); it++)        {            cout &lt;&lt; (*it) &lt;&lt; " ";        }    }</code></pre><p><img src="https://img-blog.csdnimg.cn/20190827150513935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="priority-queue：优先队列，它会根据元素的比较结果进行排序。"><a href="#priority-queue：优先队列，它会根据元素的比较结果进行排序。" class="headerlink" title="priority_queue：优先队列，它会根据元素的比较结果进行排序。"></a>priority_queue：优先队列，它会根据元素的比较结果进行排序。</h2><pre><code>#include &lt;iostream&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#include &lt;queue&gt;using namespace std;int com(int&amp; a,int&amp; b){    if(a &gt; b)        return 1;    else if(a &lt; b)        return -1;    else        return 0;}int main(){    srand(time(NULL));    priority_queue&lt;int&gt; pq;    for(int i=0; i&lt;10; i++)    {        int val = rand()%100;        cout &lt;&lt; val &lt;&lt; " ";        pq.push(val);    }    cout &lt;&lt; pq.size() &lt;&lt; endl;    while(!pq.empty())    {        cout &lt;&lt; pq.top() &lt;&lt; " ";        pq.pop();    }}</code></pre><p>   总结：<br>    1、vector和deque是支持[]运算，因此基本不需要迭代器，其他容器一律使用迭代器进行遍历。<br>    2、stack、queue、priority_queue容器没有迭代器。<br>    3、set、multiset、priority_queue会对元素进行排序，因它存储元素要支持比较运算符。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的模板</title>
      <link href="/blog/2019/08/31/c-zhong-de-mo-ban/"/>
      <url>/blog/2019/08/31/c-zhong-de-mo-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="一、为什么使用模板"><a href="#一、为什么使用模板" class="headerlink" title="一、为什么使用模板"></a>一、为什么使用模板</h2><pre><code>1、C/C++是一种静态类型语言（预处理-&gt;汇编-&gt;编译-&gt;链接），好处是速度快，缺点是实现通用代码麻烦。例如：实现支持所有类型的快速排序。2、借助函数重载实现通用代码，好处是实现简单，但代码段会增加。3、借助宏函数实现通用代码，类型检查不严格。4、借助回调函数实现通用代码，使用麻烦。5、由于以上原因C++之父在C++实现了模板技术，让C++能够支持泛型编程。</code></pre><a id="more"></a><h2 id="二、函数模板"><a href="#二、函数模板" class="headerlink" title="二、函数模板"></a>二、函数模板</h2><h3 id="1、函数模板的定义"><a href="#1、函数模板的定义" class="headerlink" title="1、函数模板的定义"></a>1、函数模板的定义</h3><pre><code>  template &lt;typename 类型参数1,typename 类型参数2,...&gt;  类型参数1 函数名(参数类型2 参数名)  {      return 返回值;  }  template &lt;typename T&gt;  T find(T* arr,size_t len)  {     return val;  }可以用任何标识符作为类型参数名，但使用‘T’ 是约定俗成的，它表示调用这个函数时所指定的任意类型。</code></pre><h3 id="2、函数模板的使用"><a href="#2、函数模板的使用" class="headerlink" title="2、函数模板的使用"></a>2、函数模板的使用</h3><pre><code>    C++编译的编译器并不是把模板编译成一个可以处理任何类型的单一实体，而是根据模板的使用者的参数，产生不同的函数的实体。    根据具体类型代表模板参数生成函数实体过程叫实例化。模板是在使用时才实例化，可以自动实例化，也可以手动实例化（在函数调用时函数名与小括号之间加&lt;类型参数&gt;)。每个函数模板都会进行二次编译，第一次编译在实例化之前，检查模板代码本身是否正确，第二次是实例化过程中，结合所使用类型参数，再次检查模板代码，是否所有的代码都有效。  注意：第二次编译才会生成二进制指令，第一次编译仅仅是在编译器内部生成一个用于描述模板的数据结构。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;template &lt;typename T,typename T1&gt;T Max(T val1,T1 val2){    return val1 &gt; val2 ? val1 : val2;}class A{    int val;public:    A(int val=0):val(val) {}    bool operator&gt;(A&amp; that)    {        return val &gt; that.val;    }};int main(){    cout &lt;&lt; Max('a',100) &lt;&lt; endl;    cout &lt;&lt; Max(100,99) &lt;&lt; endl;    cout &lt;&lt; Max(3.14,2.18) &lt;&lt; endl;    A a1,a2;    Max(a1,a2);}</code></pre><h3 id="3、函数模板的隐式推断"><a href="#3、函数模板的隐式推断" class="headerlink" title="3、函数模板的隐式推断"></a>3、函数模板的隐式推断</h3><pre><code>    函数模板虽然可以手动实例化，但使用麻烦，因此一般都根据参数类型进行隐式推断模板的参数。    注意：不能隐式推断的三种情况    1、函数参数与模板参数类型没有关系    2、不允许隐式类型转换    3、返回值类型不能隐式推断</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;char arr[10];template &lt;typename T&gt;T Min(T v1,T v2){    cout &lt;&lt; "T" &lt;&lt; endl;    return v1 &lt;v2 ? v1 : v2;}char Min(char ch1,char ch2){    cout &lt;&lt; "char" &lt;&lt; endl;    return ch1 &lt; ch2 ? ch1 : ch2;}template &lt;typename T,typename R&gt;R func(T a){    return 10;}int main(){    //cout &lt;&lt; Min(3.14,12) &lt;&lt; endl;    cout &lt;&lt; Min('a','h') &lt;&lt; endl;    cout &lt;&lt; Min&lt;int&gt;(3.14,12) &lt;&lt; endl;    long temp = func&lt;int,long&gt;(100);}</code></pre><h3 id="4、函数模板与默认形参之间有冲突。"><a href="#4、函数模板与默认形参之间有冲突。" class="headerlink" title="4、函数模板与默认形参之间有冲突。"></a>4、函数模板与默认形参之间有冲突。</h3><h3 id="5、普通函数与同名的模板函数构成重载，编译器会优先调用普通函数，如果实现一个与模板函数功能一致的普通函数，那么这叫做模板函数的特化。"><a href="#5、普通函数与同名的模板函数构成重载，编译器会优先调用普通函数，如果实现一个与模板函数功能一致的普通函数，那么这叫做模板函数的特化。" class="headerlink" title="5、普通函数与同名的模板函数构成重载，编译器会优先调用普通函数，如果实现一个与模板函数功能一致的普通函数，那么这叫做模板函数的特化。"></a>5、普通函数与同名的模板函数构成重载，编译器会优先调用普通函数，如果实现一个与模板函数功能一致的普通函数，那么这叫做模板函数的特化。</h3><pre><code>注意：一般char*类型都需要特化。</code></pre><h2 id="三、类模板"><a href="#三、类模板" class="headerlink" title="三、类模板"></a>三、类模板</h2><h3 id="1、类模板的定义"><a href="#1、类模板的定义" class="headerlink" title="1、类模板的定义"></a>1、类模板的定义</h3><pre><code> template &lt;typename M,typename R,typename A,typename O...&gt; class Test { public:     M val;     Test(A a)     {         O var;     }     R func(void)     {     } };</code></pre><h3 id="2、类模板的使用"><a href="#2、类模板的使用" class="headerlink" title="2、类模板的使用"></a>2、类模板的使用</h3><pre><code>    类模板的参数不支持隐式推断，必须显示指定类型参数。    类名&lt;类型...&gt; 对象;类模板分为两步进行实例化：    编译期：编译器将类模板实例化类，并生成类对象创建指令。    运行期：处理器执行类对象创建指令，将类实例化为对象。    类模板也是一种静态多态。类模板中，只有那些被调用的成员函数才实例化出代码，即产生二进制指令（调用谁实例化谁）。</code></pre><h3 id="3、类模板中的静态成员"><a href="#3、类模板中的静态成员" class="headerlink" title="3、类模板中的静态成员"></a>3、类模板中的静态成员</h3><pre><code>    静态成员需要在类外定义，这一点不改变，但与普通类的定义不同。    template &lt;typename ...&gt; 类型 类名&lt;...&gt;::成员名;</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;template &lt;typename A&gt;class Test{public:    static A a;    static int b;    Test(A arg)    {        cout &lt;&lt; arg &lt;&lt; endl;    }};template&lt;typename A&gt; A Test&lt;A&gt;::a;template&lt;typename A&gt; int Test&lt;A&gt;::b;int main(){    //Test* t = new Test(100);    Test&lt;int&gt; t(100);}</code></pre><h3 id="4、递归实例化"><a href="#4、递归实例化" class="headerlink" title="4、递归实例化"></a>4、递归实例化</h3><pre><code>    类模板的参数可以是任何类型，只有该类型提供类模板所需要的功能。    类模板的实例化已经是一个有效的类型了，因此它也可以当作类模板的参数，这种叫作递归实例化。    Vectors&lt;Vectors&lt;int&gt;&gt; //二维数组    Test&lt;Test&lt;int&gt;&gt;</code></pre><h3 id="5、类的局部特化"><a href="#5、类的局部特化" class="headerlink" title="5、类的局部特化"></a>5、类的局部特化</h3><pre><code>    当类的某个成员函数不能通用，需要对特殊类型(char*)实现一个特殊版本，这叫类的局部特化。    template&lt;&gt; 类型 返回值类型 类名&lt;类型&gt;::函数名(参数)    {    }    注意：在类外实现</code></pre><h3 id="6、全类特化"><a href="#6、全类特化" class="headerlink" title="6、全类特化"></a>6、全类特化</h3><pre><code>    当需要针对某种类型对类全部实现一个特殊版本，这种叫类的全类特化。template &lt;&gt; 类名&lt;类型&gt;{    ...};</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;string.h&gt;using namespace std;template &lt;typename T&gt;class Compare{    T a,b;public:    Compare(T a,T b):a(a),b(b) { }    const T&amp; max(void)    {        return a &gt; b ? a : b;    }    const T&amp; min(void)    {        return a &lt; b ? a : b;    }};/*template&lt;&gt; const char* const&amp; Compare&lt;const char*&gt;::max(void){    cout &lt;&lt; "------" &lt;&lt; endl;    if(1 == strcmp(a,b))        return a;    else        return b;}*/template&lt;&gt; class Compare&lt;const char*&gt;{    const char* str1;    const char* str2;public:    Compare(const char* str1,const char* str2)    {        this-&gt;str1 = str1;        this-&gt;str2 = str2;    }    const char* max(void)    {        if(1 == strcmp(str1,str2))            return str1;        else            return str2;    }    const char* min(void)    {        if(1 == strcmp(str1,str2))            return str2;        else            return str1;    }};int main(){    Compare&lt;const char*&gt; com("ad","adf");;    cout &lt;&lt; com.max() &lt;&lt; endl;}</code></pre><h3 id="7、类模板的缺省值"><a href="#7、类模板的缺省值" class="headerlink" title="7、类模板的缺省值"></a>7、类模板的缺省值</h3><pre><code>    类模板的类型参数可以设置默认值类型，规则与函数的默认形参基本一致（设置缺省值类型靠右）。    后面的类型参数可以使用前面的类型，但前面不能使用后面的。</code></pre><h3 id="8、普通数据也可以作为模板参数"><a href="#8、普通数据也可以作为模板参数" class="headerlink" title="8、普通数据也可以作为模板参数"></a>8、普通数据也可以作为模板参数</h3><pre><code>template &lt;typename T,类型 B&gt;{   int arr[B];}给类模板一个数据，在类中就可以像使用宏明一样使用参数。注意：实例化类中提供的数据必须是常量。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;typeinfo&gt;using namespace std;template &lt;typename A=int,typename B=A&gt;class Test{public:    Test(void)    {        cout &lt;&lt; typeid(A).name() &lt;&lt; " " &lt;&lt; typeid(B).name() &lt;&lt; endl;    }};int main(){    Test&lt;&gt; t;}</code></pre><h2 id="模板的技巧"><a href="#模板的技巧" class="headerlink" title="模板的技巧"></a>模板的技巧</h2><pre><code>1、typename可以用class代替2、不能直接使用模板父类的成员#include &lt;iostream&gt;using namespace std;template &lt;class T&gt;class Base{public:     void func(void)    {        cout &lt;&lt; "bbbb" &lt;&lt; endl;    }};template &lt;typename T&gt;class Test:public Base&lt;T&gt;{public:    Test(void)    {        Base&lt;T&gt;::func();    }};int main(){    Test&lt;int&gt; t;}3、在类模板中可以定义虚函数（多态），但虚函数不能是模板函数。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中类的继承(二)</title>
      <link href="/blog/2019/08/31/c-zhong-lei-de-ji-cheng-er/"/>
      <url>/blog/2019/08/31/c-zhong-lei-de-ji-cheng-er/</url>
      
        <content type="html"><![CDATA[<h2 id="一、子类的构造、析构、拷贝"><a href="#一、子类的构造、析构、拷贝" class="headerlink" title="一、子类的构造、析构、拷贝"></a>一、子类的构造、析构、拷贝</h2><pre><code>1、子类的构造在执行它的构造函数前会根据继承表的顺序执行父类的构造函数。    默认执行父类的无参构造    显示调用有参构造，在子类的构造函数后，初始化列表中显示调用父类的有参构造函数。</code></pre><a id="more"></a><pre><code>2、子类在它的析构执行完后，会根据继承表的顺序，逆顺序执行父类的析构函数。    注意：父类的指针可以指向子类对象，当通过父类指针释放对象时，只会调用父类的析构函数，而这种析构方式有可能造成内存泄漏。3、当使用子类对象来初始化新的子类对象时，会自动调用子类缺省的拷贝构造函数，并且会先调用父类缺省的拷贝构造函数。    如果子类中实现的拷贝构造，需要显式调用父类拷贝构造，否则就会调用无参构造。</code></pre><h2 id="二、私有继承、保护继承"><a href="#二、私有继承、保护继承" class="headerlink" title="二、私有继承、保护继承"></a>二、私有继承、保护继承</h2><pre><code>使用 private 方式继承父类，公开的变成私有，其他的不变（有争议），这种继承方式防止父类的成员扩散。使用 protected 方式继承父类，公开成员在子类中会变成保护的，其他不变，这种继承方式可以有效防止父类的成员扩散。子类以私有或保护方式继承父类，会禁止向上造型（子类的指针或引用不能隐式转换成父类的指针或引用，要想实现多态只能以公开方式继承父类）。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;class Base{    int a;public:    int b;protected:    int c;};class A:private Base{public:    A(void)    {//        cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; c &lt;&lt; endl;    }};class B:public A{public:    B(void)    {        cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; c &lt;&lt; endl;    }};int main(){    Base* p = new A;//    A a;//    Base a;//    cout &lt;&lt; a.a &lt;&lt; " " &lt;&lt; a.b &lt;&lt; " " &lt;&lt; a.c &lt;&lt; endl;}</code></pre><h2 id="三、多重继承、钻石继承、虚继承"><a href="#三、多重继承、钻石继承、虚继承" class="headerlink" title="三、多重继承、钻石继承、虚继承"></a>三、多重继承、钻石继承、虚继承</h2><h3 id="1、多重载继承"><a href="#1、多重载继承" class="headerlink" title="1、多重载继承"></a>1、多重载继承</h3><pre><code>在C++中一个子类可以有多个父类，在继承表中按照顺序继承多个父类中的属性和行为，并按照顺序表，调用父类的构造函数。按照从低到高的地址顺序排序父类，子类中会标记每个父类存储位置。当子类指针转换成父类的隐式指针时候，编译器会自动计算父类中的内容在子类中的位置，地址会自动进行偏移计算。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;stdio.h&gt;using namespace std;class A{public:    int a;};class B{public:    int b;};class C{public:    int c;};class Test:public A,public B,public C{public:    Test(void)    {        a = 1;        b = 2;        c = 3;    }};int main(){    Test* p = new Test;    A* ap = p;    B* bp = p;    C* cp = p;    printf("%p %p %p  p:%p\n",ap,bp,cp,p);    cout &lt;&lt; ap-&gt;a &lt;&lt; " " &lt;&lt; bp-&gt;b &lt;&lt; " " &lt;&lt; cp-&gt;c &lt;&lt; endl;}</code></pre><h3 id="2、名字冲突"><a href="#2、名字冲突" class="headerlink" title="2、名字冲突"></a>2、名字冲突</h3><pre><code>如果父类中有同名的成员，可以正常继承，但如果直接使用，会造成歧义，需要 类名::成员名 进行访问。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;stdio.h&gt;using namespace std;class A{public:    int num;};class B{public:    int num;};class C{public:    int num;};class Test:public A,public B,public C{public:    Test(void)    {        cout &lt;&lt; A::num &lt;&lt; endl;    }};int main(){    Test* p = new Test;}</code></pre><h3 id="3、钻石继承"><a href="#3、钻石继承" class="headerlink" title="3、钻石继承"></a>3、钻石继承</h3><pre><code>假如有一个类A，类B继承类A，类C也继承类A，类D继承B和C。一个子类继承多个父类，这些父类有一个共同的祖先，这种继承叫钻石继承。注意：钻石继承不会导致继承错误，但访问祖先类中的成员时每次需要使用 类名::成员名 ，重点是这种继承会造成冗余。</code></pre><h3 id="4、虚继承-virtual"><a href="#4、虚继承-virtual" class="headerlink" title="4、虚继承 virtual"></a>4、虚继承 virtual</h3><pre><code>当进行钻石继承时，祖先类中的内容会有冗余，而进行虚继承后，在子类中的内容只会保留一份。注意：但使用虚继承时，子类中会多了一些内容（指向从祖先类继承来的成员）。</code></pre><h3 id="5、构造函数"><a href="#5、构造函数" class="headerlink" title="5、构造函数"></a>5、构造函数</h3><pre><code>一旦进行了虚继承祖先类的构造函数只执行一次，由孙子类直接调用，祖先类的有参构造也需要在孙子类中显示调用。</code></pre><h3 id="6、拷贝构造"><a href="#6、拷贝构造" class="headerlink" title="6、拷贝构造"></a>6、拷贝构造</h3><pre><code>在虚拟继承（钻石）中祖先类拷贝构造也由孙子类直接调用，子类中不再调用祖先类的拷贝构造，在手动实现的拷贝构造时（深拷贝），祖先类中的内容也由孙子类负责拷贝，同理赋值构造也一样。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;class A{public:    int a;    A(void)    {        cout &lt;&lt; "A类的构造函数" &lt;&lt; endl;    }    A(int num)    {        cout&lt;&lt;"A有参构造"&lt;&lt;endl;    }};class B:virtual public A{public:    B(void)    {        cout&lt;&lt;"B的构造"&lt;&lt;endl;    }};class C:virtual public A{public:    C(void)    {        cout &lt;&lt; "C的构造" &lt;&lt; endl;    }};class D:virtual public B,virtual public C{public:    D(void)    {        cout &lt;&lt; "D的构造" &lt;&lt; endl;    }};int main(){    //A a;    //B b;    //C c;    D d;//    cout &lt;&lt;sizeof(A) &lt;&lt;" "&lt;&lt; sizeof(B) &lt;&lt;" "&lt;&lt;sizeof(C)&lt;&lt;" " &lt;&lt;sizeof(D)&lt;&lt; endl;//    cout &lt;&lt; d.B::a &lt;&lt; endl;}</code></pre><h2 id="四、虚函数、覆盖、多态"><a href="#四、虚函数、覆盖、多态" class="headerlink" title="四、虚函数、覆盖、多态"></a>四、虚函数、覆盖、多态</h2><h3 id="1、虚函数"><a href="#1、虚函数" class="headerlink" title="1、虚函数"></a>1、虚函数</h3><pre><code>类的成员函数前加 virtual 这种函数就叫做虚函数。</code></pre><h3 id="2、覆盖"><a href="#2、覆盖" class="headerlink" title="2、覆盖"></a>2、覆盖</h3><pre><code>子类会覆盖父类的虚函数。</code></pre><h3 id="3、多态"><a href="#3、多态" class="headerlink" title="3、多态"></a>3、多态</h3><pre><code>当子类覆盖了父类的虚函数时，通过父类指针指向子类对象时，调用虚函数，会根据具体的对象是谁来决定执行谁的函数，这就是多态。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;using namespace std;class Base{public:    virtual void func(void)    {        cout &lt;&lt; "我是Base的func函数"&lt;&lt;endl;    }};class A:public Base{public:    void func(void)    {        cout&lt;&lt;"我是类A的func函数" &lt;&lt; endl;    }};class B:public Base{public:    void func(void)    {        cout&lt;&lt;"我是类B的func函数" &lt;&lt; endl;    }};class C:public Base{public:    void func(void)    {        cout&lt;&lt;"我是类C的func函数" &lt;&lt; endl;    }};int main(){/*覆盖    A* a = new A;    Base* p = a;    Base* b = new Base;    b-&gt;func(); // 并没有消失    a-&gt;func(); // 调用子类函数    p-&gt;func(); // 如果父类的函数是虚函数，调用子类函数*/    srand(time(NULL));    // 这就是多态    Base* arr[] = {new A,new B,new C};    arr[rand()%3]-&gt;func();}</code></pre><h2 id="五、覆盖和多态的条件"><a href="#五、覆盖和多态的条件" class="headerlink" title="五、覆盖和多态的条件"></a>五、覆盖和多态的条件</h2><h3 id="1、覆盖的条件"><a href="#1、覆盖的条件" class="headerlink" title="1、覆盖的条件"></a>1、覆盖的条件</h3><pre><code>    必须是虚函数    必须是父子类之间    函数签名必须相同（参数列表完全一致，const属性也会影响覆盖的结果）    返回值必须是同类型或父子类（子类的返回值要能向父类隐式转换）    访问属性不会影响覆盖    常函数属性也会影响覆盖</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;using namespace std;class Base{public:    virtual Base* func(void)    //virtual void func(void)    {        cout &lt;&lt; "我是Base的func函数"&lt;&lt;endl;    }};class A:public Base{public:    A* func(void)    //在覆盖版本的函数中，所得到的this指针依然是实际对象地址，依然能够调用子类中的函数。    //void func(int num,char* str)    {        cout&lt;&lt;"我是类A的func函数" &lt;&lt; endl;    }};int main(){    A* a = new A;    Base* p = a;    p-&gt;func();}    </code></pre><h3 id="2、重载、隐藏、覆盖（重写）的区别"><a href="#2、重载、隐藏、覆盖（重写）的区别" class="headerlink" title="2、重载、隐藏、覆盖（重写）的区别"></a>2、重载、隐藏、覆盖（重写）的区别</h3><pre><code>    重载：同一作用域下的同名函数，函数签名不同（类型、个数、顺序、常函数等），构成重载关系。    覆盖：符合一系列条件。    隐藏：父子类之间的同名成员如果没有形成覆盖，且能通过编译，必定构成隐藏。</code></pre><h3 id="3、多态的条件"><a href="#3、多态的条件" class="headerlink" title="3、多态的条件"></a>3、多态的条件</h3><pre><code>    1.父子类之间有的函数有覆盖关系。    2.父类的指针或引用指向子类的对象。</code></pre><h3 id="4、在构造、析构函数中调用虚函数"><a href="#4、在构造、析构函数中调用虚函数" class="headerlink" title="4、在构造、析构函数中调用虚函数"></a>4、在构造、析构函数中调用虚函数</h3><pre><code>    在父类的构造函数中调用虚函数，此时子类还没有创建完成（回顾构造函数的调用过程），因此只能调用父类的虚函数，而不是覆盖版本的虚函数。    在父类的析构函数中调用虚函数，此时子类已经释放完成，因此只能调用父类的虚函数，而不是覆盖版本的虚函数。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;using namespace std;class Base{public:    Base(void)    {        func();    }    virtual void func(void)    {        cout &lt;&lt; "我是Base的func函数"&lt;&lt;endl;    }    ~Base(void)    {        func();    }};class A:public Base{public:    A(void)    {        func();    }    void func(void)    {        cout&lt;&lt;"我是类A的func函数" &lt;&lt; endl;    }    ~A(void)    {        func();    }};int main(){    A aa;//    A* a = new A;//    Base* p = a;//    p-&gt;func();}</code></pre><h2 id="六、纯虚函数和抽象类"><a href="#六、纯虚函数和抽象类" class="headerlink" title="六、纯虚函数和抽象类"></a>六、纯虚函数和抽象类</h2><h3 id="1、纯虚函数"><a href="#1、纯虚函数" class="headerlink" title="1、纯虚函数"></a>1、纯虚函数</h3><pre><code>在虚函数的声明的后面添加=0，这种虚函数就叫做纯虚函数，可以不实现，但如果实现必须在类外（只能在父类的构造函数、析构函数中调用）。virtual 返回值 函数名(参数) = 0;</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;stdio.h&gt;using namespace std;class Base{public:    Base(void)    {        func();    }    // 纯虚函数    virtual void func(void) = 0;    ~Base(void)    {        func();    }};class A:public Base{public:    void func(void)    {        cout &lt;&lt; "我是纯虚函数的覆盖"&lt;&lt;endl;    }};void Base::func(void){    cout&lt;&lt; "我是虚函数" &lt;&lt; endl;}int main(){    A a;    a.func();    //Base b;    //b.func();}</code></pre><h3 id="2、抽象类"><a href="#2、抽象类" class="headerlink" title="2、抽象类"></a>2、抽象类</h3><pre><code>成员函数中有纯虚函数，这种类叫抽象类，抽象类不能实例化（不能创建对象）。抽象类必须被继承且纯虚函数被覆盖后，由子类实例化对象。如果继承抽象类，但没有覆盖纯虚函数，那么子类也将成为抽象类，不能实例化。</code></pre><h3 id="3、纯抽象类"><a href="#3、纯抽象类" class="headerlink" title="3、纯抽象类"></a>3、纯抽象类</h3><pre><code>所有成员函数都是纯虚函数，这种只能被继承的类叫纯抽象类。这种类一般用来设计接口，这种类在子类被替换后不需要修改或少量的修改即可继续使用。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;class Base{public:    virtual void show(void) = 0;};class A:public Base{public:    void show(void)    {        cout &lt;&lt; "我是类A的show函数" &lt;&lt; endl;    }};class B:public Base{public:    void show(void)    {        cout &lt;&lt; "我是类B的show函数" &lt;&lt; endl;    }};class C:public Base{public:    void show(void)    {        cout &lt;&lt; "我是类C的show函数" &lt;&lt; endl;    }};enum ClassType{typeA,typeB,typeC};// 工厂类模式Base* creat_object(ClassType type){    switch(type)    {        case typeA: return new A;        case typeB: return new B;        case typeC: return new C;        default: return NULL;    }}int main(){    Base* p = creat_object(typeA);    p-&gt;show();}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中类的继承(一)</title>
      <link href="/blog/2019/08/31/c-zhong-lei-de-ji-cheng-yi/"/>
      <url>/blog/2019/08/31/c-zhong-lei-de-ji-cheng-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、类的继承"><a href="#一、类的继承" class="headerlink" title="一、类的继承"></a>一、类的继承</h2><pre><code>1、共性与个性    表达不同类型事物之间公有的属性和行为。    个性用于刻画每种事物特有的属性和行为。2、共性表示为父类（基类），个性表示为子类（派生类）。    子类继承自父类    基类派生出子类</code></pre><a id="more"></a><h2 id="二、继承的基本语法"><a href="#二、继承的基本语法" class="headerlink" title="二、继承的基本语法"></a>二、继承的基本语法</h2><pre><code>1、继承表一个子类可以同时继承零到多个父类，每个父类的继承方式可以相同也可以不同。class 子类：继承方式1 父类1,继承方式2 父类2,...{}2、继承方式    public 公有继承：父类的特性可通过子类向外扩展。    private 私有继承：父类的特性只能为子类所有。    protected 保护继承：父类的特性只能在继承链内扩展。</code></pre><h2 id="三、继承的基本特点"><a href="#三、继承的基本特点" class="headerlink" title="三、继承的基本特点"></a>三、继承的基本特点</h2><pre><code>1、公共特点（所有继承都有的特点）    子类对象可以当作父类对象使用，子类对象与父类没有本质上的区别。    子类的逻辑空间小于父类，但它的物理空间要大于等于父类。    子类对象 IS A 父类对象2、向上和向下转换（造型）    从子类到父类：子类的指针或引用可以隐式转换成父类的指针或引用，这是一种缩小类型的转换，对于编译器来说是安全的。    从父类到子类：父类的指针或引用不可以转换成子类的指针或引用，这是一种扩大类型的转换，在编译器看来是危险的。（子类的指针指向父类的对象，不安全）    编译器仅仅是检查指针或引用的数据类型，而对实际引用的目标对象不关心（构成多态的基础）。    类型一致：父类的指针或引用实际的目标类型是否需要转换成实际的指针或引用由程序自己决定。3、子类会继承父类的所有成员（公有，私有，保护）4、子类会隐藏父类的同名成员    1.可以通过域限定符 父类::隐藏成员 进行访问父类中的隐藏成员    2.可以使用父类的指针或引用来指向子类对象，然后访问父类中的隐藏成员。5、虽然子类继承所有父类中的成员，但不能访问父类中的私有成员。</code></pre><h2 id="四、继承方式影响访问控制"><a href="#四、继承方式影响访问控制" class="headerlink" title="四、继承方式影响访问控制"></a>四、继承方式影响访问控制</h2><p><img src="https://img-blog.csdnimg.cn/20190819182508729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190819164034499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>#include &lt;iostream&gt;using namespace std;class A{private:    int a;    friend void f_show(A a);public:    int b;    A(void)    {        a = 1;        b = 2;        c = 3;        cout&lt;&lt;"A构造"&lt;&lt;endl;    }    void show(void)    {        cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt;endl;    }protected:    int c;};void f_show(A a){    cout&lt;&lt;  a.a&lt;&lt;a.b&lt;&lt;a.c &lt;&lt;endl;}class B:public A{public:    int b;    B(void)    {        b = 4;        //cout &lt;&lt; a &lt;&lt; endl;        cout&lt;&lt;"B构造 "&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;c&lt;&lt;endl;    }    void show(void)    {        cout&lt;&lt; A::b &lt;&lt; " "&lt;&lt; b&lt;&lt;" "&lt;&lt; c &lt;&lt;endl;    }};/*class B:private A{};class B:protected A{};*/int main(){    B b;    // 子类的指针或引用可以隐式转换成父类的指针或引用    A* a = &amp;b;    A aa;    f_show(aa);    cout&lt;&lt;b.b&lt;&lt;endl;    a-&gt;show();    b.show();    //cout&lt;&lt;b.c&lt;&lt;endl;    b.A::show();    // 父类的指针或引用不能转换成子类的指针或引用    //error  B* p = a;    cout&lt;&lt; sizeof(B)&lt;&lt;endl;}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础知识</title>
      <link href="/blog/2019/08/29/c-yu-yan-ji-chu-zhi-shi/"/>
      <url>/blog/2019/08/29/c-yu-yan-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言关键字："><a href="#C语言关键字：" class="headerlink" title="C语言关键字："></a>C语言关键字：</h2><pre><code>unsigned signed bool void char short int long double float struct enum union typedef sizeofif else for switch case default while do break continue gotoextern register volatile auto const static return</code></pre><a id="more"></a><h2 id="常用的Linux系统命令："><a href="#常用的Linux系统命令：" class="headerlink" title="常用的Linux系统命令："></a>常用的Linux系统命令：</h2><pre><code>touch/cat/more/head/tall/rm/cp/mvmkdir/rmdir/cd/ls/tarifconfig/ping/telnet/ssh/ftp</code></pre><h2 id="vim文本编辑器："><a href="#vim文本编辑器：" class="headerlink" title="vim文本编辑器："></a>vim文本编辑器：</h2><pre><code>在终端下依靠键盘操作使用的文本编辑器。三大主要模式：正常模式、插入模式、命令模式常用快捷键：Ctrl+x Ctrl+z Ctrl+c教程：vimtutor</code></pre><h2 id="C语言介绍："><a href="#C语言介绍：" class="headerlink" title="C语言介绍："></a>C语言介绍：</h2><pre><code>发明C语言的目的是什么长盛不衰优缺点、特点C语言三剑客：《C语言陷阱和缺陷》、《C和指针》、《C专家编程》、《C程序设计语言》、</code></pre><p>《C Primer Plus》、《必然》、《白说》</p><h2 id="编译器介绍："><a href="#编译器介绍：" class="headerlink" title="编译器介绍："></a>编译器介绍：</h2><pre><code>编译器就一个特殊的程序，把负责把C代码（文本文件）编译成可执行的二进制文件。它由：预处理器、编译器、链接器组成常用的参数：-E -c -S -o -std -l -D -Werror -WallE    激活预处理；头文件、宏等展开（.i文件）S    激活预处理、编译；生成汇编代码（.s文件）c    激活预处理、编译、汇编；生成目标文件（.o文件）o    生成目标Wall    打开编译告警（所有）g    嵌入调试信息，方便gdb调试《程序员的自我修养》</code></pre><h2 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h2><pre><code>整型：unsigned、signedchar,short,int,long,long long实型：float,double,long double字符：char布尔：bool取值范围：char,short,int各类型的字节数：各类型的占位符：long double（%LF）</code></pre><h2 id="进制转换："><a href="#进制转换：" class="headerlink" title="进制转换："></a>进制转换：</h2><pre><code>为什么需要二进制：因为现在的计算机由大规模集成电路构成，计算单元只能识别高低电流这种数据，因此只能使用二进制数据。为什么需要八进制：为了方便记录二进制，由于历史原因八进制数据还在使用。为什么需要十六进制：相当于升级版的八进制，由于计算机的高速发展，八进制已经无法满足需要。十进制转换成二进制：    求余：把十进制数据不停的用2求余，逆序记录求余的结果。        189 % 2 = 1        94 % 2 = 0        47 % 2 = 1        23 % 2 = 1        11 % 2 = 1        5 % 2 = 1        2 % 2 = 0        1 % 2 = 1        10111101    求权：128 64 32 16 8 4 2 1二进制转换成十进制：    2的不同次方相加。二进制转换成八进制：三位二进制转换成一位八进制    10 111 101 = 0275    128 56 5 = 189二进制转化成十六进制：四位二进制转换成一位十六进制    10 &lt;=&gt; a    1011 1101 = 0xbd0b10111101 二进制0275 八进制0xbd 十六进制数据在内存是如何存储的：    数据分为原码、反码、补码，内存中存储的是数据的补码。原码：数据直接转换成的二进制（无论正负）反码：将原码按位求反得到反码补码：    正：原码    负：反码+1补码：10111101 char    10111100    01000011 -67</code></pre><h2 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h2><pre><code>常量：程序运行过程中不可改变的数据    字面值    100 int类型    100L long    100U unsigned int    100LU unsigned long    100LL long long    100LLU unsigned long long    3.14 double    3.14F float    3.14LF long double    枚举值    宏常量    具有const属性的被初始化过的全局变量变量：类型 变量名；注意：取名规则，见名知意    容器、数据</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><pre><code>if else,switch,for,while,do while,break,continue,goto注意：大括号不要省略，分号不要多加《C语言编码规范-华为》《C++语言编程规范-谷歌》如何判断XX类型是否是“零值”?float,bool,int,char,int* p;if(0.000001 &gt; f &amp;&amp; f &gt;-0.000001)if(flag)if(0 == num)if('\0' == ch)if(NULL = p)阅读、安全角度思考。</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre><code>C语言中只有一维数组，多维数组都是使用一维数组模拟的。数组的越界：一切正常、段错误、脏数据。char str[11] = "hello,world";变长数组：数据的长度填写变量，编译时不能确定，程序运行期间可以变化，而执行数组定义语句时长度才固定下来。    优点:可根据实际情况定义数组的长度，从而节约内存    缺点：不能初始化。int arr[10];arr &lt;=&gt; int *int arr[3][4]arr &lt;=&gt; int (*)[4];</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>函数是C语言中管理代码的最小单位，命名空间独立，栈空间独立。函数被调用时开辟栈内存，函数结束后释放栈内存。声明：返回值 函数名（类型1，类型2，...）;定义：返回值 函数名（类型1 参数名1，类型2 参数名2，...){    函数体}注意:函数的定义如果出现调用之前，声明可以忽略注意：调用函数时如果没有找到函数声明，也没有定义，编译器也不报错，而是先猜测函数的格式，链接时在尝试寻找函数的定义。    return 语句只是把数据存储到一个特定的位置，当函数运行结束后，调用者就可以从这个位置获取到返回值。        函数有返回值（格式），而没写return语句，调用者会得到一个不确定的返回值。常见编译错误：    隐式声明函数，没有找到函数声明和定义。1    undefined reference to '',有函数声明，但无函数定义函数的本质：函数就是存储在代码段中的一段数据（二进制指令的集合），函数名就是这段数据的开始位置    因此函数名就是地址，可以定义指向这段数据的指针变量，    返回值 （*函数指针） （类型1，类型2，...）；    函数的传参：        1、只能值传递（内存拷贝），使用指针可提高效率（const int *）        2、函数之间共享变量，全局变量（尽量少用），指针（注意安全）        3、数组当作函数的参数时就蜕变成了指针（长度丢失），额外增加一个参数传递数组长度。</code></pre><h2 id="修饰变量的关键字"><a href="#修饰变量的关键字" class="headerlink" title="修饰变量的关键字"></a>修饰变量的关键字</h2><pre><code>auto：用来修饰自动创建、释放的变量（局部变量、块变量），不加就代表加。    注意：静态变量、全局变量不能用它来修饰。static：    限制作用域：全局变量、普通函数    改变存储位置：把局部变量、块变量的存储位置由栈改为bss、data    延长生命周期：把局部变量、块变量的生命周期延长与全局变量一样。    static int fun(void);const：为数据提供一种"保护"机制,变量被它修饰后就不能显示修改。    也可以修饰函数的参数、返回值等。    const int fun(void);volatile:告诉编译器此变量的值不稳定、易变（不优化变量的取值）。    多线程共享变量、硬件编程（裸机、驱动）register:申请把变量的存储位置改为寄存器，但申请不一定成功    注意：被它修饰过的变量不能取地址extern：声明变量，用于不同.c之间共享全局变量（只能解决编译时问题）注意：全局变量、局部变量、块变量的变量名可以同名，由于作用域不同，会互相屏蔽。    块变量 &gt; 局部变量 &gt; 全局变量 （块变量屏蔽同名的局部变量）</code></pre><h2 id="程序在内存的分段："><a href="#程序在内存的分段：" class="headerlink" title="程序在内存的分段："></a>程序在内存的分段：</h2><pre><code>代码段 test：存储的是代码所编译成的二进制指令、字符串字面值、常量    具有只读属性，一旦修改会发生段错误。全局数据段 data：初始化过的全局变量、静态变量bss段（静态数据段）：未初始化的全局变量、静态变量    程序运行前会清理为0；栈 stack：存储局部变量、块变量、大小有限，安全。    由操作系统管理，以函数为单位使用（函数调用结束后自动释放）。堆 heap：一般由程序员手动管理（让系统去映射)，与指针配合使用，足够大，使用麻烦，释放的时间受控制    但不安全，容易产生内存碎片、内存泄漏。</code></pre><h2 id="指针："><a href="#指针：" class="headerlink" title="指针："></a>指针：</h2><pre><code>什么是指针：指针是一种数据类型（无符号整数，代表内存编号），使用它定义指针变量。    0~4G（32个1）4294967295 byte什么情况下使用指针：    1、函数之间共享变量（全局变量有命名冲突，不会被释放，浪费内存)    2、优化传递效率        因为C语言采用的是值传递（内存拷贝），会随着变量字节数的增加而降低运行效率。        而传递变量的地址，永远只拷贝4|8字节。        void func(const int * p);        但使用指针变量的值可能会被修改，可以配合const进行保护。        3、配合堆内存如何使用指针：    定义：类型 *变量名_p;        1、与普通变量一样，默认值不确定，为了安全一般初始化NULL。        2、一个*只能定义一个指针变量            int *p1,*p2;        3、指针变量与普通的用法不同，为了避免混用，一般从名字上加以区别。        4、指针变量的类型决定了解决引用时访问的字节数。    赋值：变量名_p = 地址；        int* p = NULL;        1、注意地址的类型        2、void*可以与任意类型的指针进行自动转换（C++中不可以)        3、要保障地址与物理内存有对应关系（映射过）。    解引用：*p；        根据指针变量中存储的内存编号，而访问内存中的数据。        这个过程可以会有段错误，但这是由于赋值了有问题的地址。使用指针要注意的问题：    1、野指针：指向的目标不确定，解引用时不一定会出错，但未知的危险最可怕。        而且野指针一旦产生就无法分辨，而预防的方法就是不制造野指针。        1、定义指针时一定要初始化。        2、指向的目标被释放后，要及时置空。        3、不要指向随时可能被释放的目标。    2、空指针：指针变量的值等于NULL，对这个地址解引用访问时，一定会产生段错误。        因为它存储的是操作系统重启时所需要的数据。        而预防的方法就是解引用前判断（来历不明） if（NULL == p）指针的运算：    指针+/-整数 = 指针+/-(宽度)*整数    指针-指针 = (指针-指针)/宽度指针与数组名：    1、数组名就一个特殊的地址，它就代表数组的第一个元素的首地址，也能当指针使用。        arr[i] &lt;=&gt; *(地址+i);        因此指针也能使用[]运算符    2、指针与目标内存是指向关系，而数组名是对应关系。    3、数组当函数的参数就蜕变为了指针变量，长度丢失，安全性不保障。        void fun(int* const arr,size_t len);指针与const的配合使用：    const int* p;    int const * p;    int * const p;    const int * p;    int const * const p;指针的高级应用：    指针数组：可以把无序的离散的数据，归纳到一起。    数组指针：专门指向数组指针    二级指针：指向指针的指针    函数指针：指向函数的指针</code></pre><h2 id="字符串："><a href="#字符串：" class="headerlink" title="字符串："></a>字符串：</h2><pre><code>由字符组成的串型数据结构，它的结束标志是'\0'。字符串存在的形式：    字符数组：char arr[5] = {'a','b','c','d'};        一般存储在栈，也可以存储在堆。        要考虑'\0'的位置    字符串字面值：由双引号包括的若干个字符，"hehe"。        以地址形式存在，需要使用const char* str;指针指向。        数据存在只读段，如果强行修改只会出现段错误。        背后隐藏着'\0';    char str[] = "hehe";    一般使用字符串字面值来初始化字符数组。字符串的输出：    printf %s,puts,fprintf字符串的输入：    scanf %s:不能输入空格    gets:不限制长度    fgets：可能会接受到'\n',或者输入缓冲区中残留数据字符串常见的操作：    strlen/strcat/strcpy/strcmp    strncat/strncpy/strncmp    memset/memcpy/strstr/strchr    sprintf/sscanf 用于拼接/解析字符串，非常好用    字符数据 -&gt; 数据 计算 数据 -&gt; 字符数据</code></pre><h2 id="堆内存管理"><a href="#堆内存管理" class="headerlink" title="堆内存管理"></a>堆内存管理</h2><pre><code>C语言中没有内存管理的语句，只能借助标准库中的函数进行管理堆内存。void *malloc(size_t size);void free(void *ptr);void *calloc(size_t nmemb, size_t size);void *realloc(void *ptr, size_t size);当向malloc首次申请内存时，malloc手中也没有内存，malloc会向系统申请，系统会映射33页内存交给malloc管理，之后再向malloc申请内存，malloc会直接从33页内存中分配，直到33页用完，再向操作系统申请。    访问malloc分配的内存时，可以越界，但不要超过33页范围。内存泄漏：    1、指针管理失误，指向其他位置。    2、free语句没有执行到。    3、free语句忘记写。    就内存没释放，有申请新内存，导致可用的内存越来越少，速度越来越慢。    前提：程序没有结束，当程序结束后属于它的所有资源都会被系统回收。内存碎片：    已经释放的内存，但不能被再次使用，这叫内存叫做内存碎片。       内存碎片不是错误，它是由于内存的释放时间和分配时间不协调造成的。       内存碎片无法避免（天然形成的），只能尽量减少：           1、尽量使用栈内存，只有在数据量比较多的时候再使用堆内存。           2、尽量申请大块内存自己管理。           3、不要频繁的申请释放内存。</code></pre><h2 id="预处理指令："><a href="#预处理指令：" class="headerlink" title="预处理指令："></a>预处理指令：</h2><pre><code>把C代码翻译成标准的C代码叫预处理、负责翻译的程序叫预处理器、被翻译的代码叫预处理指令。查看预处理的结果：    gcc -E code.c 直接查看预处理的结果    gcc -E code.c -o code.i 把预处理的结果保存到文件中宏定义：    宏常量：用一个有意义的单词代表一个字面值数据在代码中使用，在预处理时把单词替换成数据        优点：提高可读性、安全、扩展方便    宏函数：宏函数不是真正的函数，是带参数的宏，只是使用的方法类似函数        预处理时参数会代入到表达式中，宏名会替换成后面的表达式。        优点:运行速度快（没有参数传递），类型通用，只有极精简的代码段才适合定义宏函数        缺点：不会进行类型检查，也没有返回值，只有一个计算结果，大量使用会增加代码段的冗余。    预定义的宏：        __FILENAME__        __func__        __DATE__        __TIME__        __LINE__    条件编译：        #if        #elif        #else        #endif        #ifndef        #ifndef        头文件卫士</code></pre><h2 id="复合数据类型："><a href="#复合数据类型：" class="headerlink" title="复合数据类型："></a>复合数据类型：</h2><pre><code>结构 struct设计数据类型typedef struct Student{    char name[20];    char sex;    short age:1;}Student;定义结构变量    Student stu;    Student* stup = malloc(sizeof(Student));访问结构成员    stu.name,stu.sex,stu.age    stup-&gt;name,stup-&gt;sex,stup-&gt;age计算结构的字节数：    注意：成员的顺序不同会影响结构的字节数。    对齐：假定从零地址开始，每成员的起始地址编号，必须是它本身字节数的整数倍。    补齐：结构的总字节数必须是它最大成员的整数倍。    注意：在Linux系统下计算补齐、对齐时，成员超过4字节按4字节计算联合 union    从语法上来说与结构的用法基本类似，每个成员都从零地址开始，所有成员共有一块内存。    1、使用联合判断大小端    2、联合的总字节数计算，不需要对齐，但有补齐枚举 enum    值受限的int类型，把变量合法的值列举出来，除此以外不能等于其他的值    枚举值是常量，可以直接使用在case后，常与switch语句配合使用</code></pre><h2 id="文件操作："><a href="#文件操作：" class="headerlink" title="文件操作："></a>文件操作：</h2><pre><code>文件分类：    文本文件：记录的是字符串的二进制    二进制文件：直接把数据补码记录到文件中文件打开：    FILE *fopen(const char *path, const char *mode);    "r"    以只读方式打开文件，如果文件不存在则打开失败，返回值为空。    "r+" 在"r"的基础上增加写权限。    "w" 以只写方式打开文件，如果文件不存在则创建，如果文件存在则把内容清空。    "w+" 在"w"的基础上增加读取权限。    "a" 以只写方式打开文件，如果文件不存在则创建，如果文件存在则把内容保留，与"w"区别是当有新数据写入，会追加到文件的末尾。    "a+" 在"a"的基础上增加读权限。     "b" 在linux系统下没有用，表示以二进制格式打开文件。        在Windows系统下不加b '\n' 写到文件中 系统会写入'\n\r',加b则写'\n'时只写入'\n'.读写文本内容：    int fprintf(FILE *stream, const char *format, ...);    功能：把数据以文本形式写入到文件中    stream：文件指针，fopen函数的返回值    format：格式化控制符，点位符等    ...：要写入的变量。    返回值：成功写入的变量个数。        int fscanf(FILE *stream, const char *format, ...);    功能：从文件中读取数据到变量，要求文件的内容是字符。    stream：文件指针，fopen函数的返回值    format：格式化控制符，点位符等    ...：变量的地址    返回值：成功匹配和赋值的个数，失败返回-1。        读写二进制内容：    size_t fwrite(const void *ptr, size_t size, size_t nmemb,FILE *stream);    功能：内存中的数据，以二进制形式写入到文件中。    ptr：要写入的内存的首地址    size：要写入的字节数    nmemb：要写入的次数    stream：文件指针，fopen函数的返回值    返回值：成功写入的次数        size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);    功能：从文件中以二进制方式读取数据到内存中。    ptr：用来存放数据的内存首地址    size：要读取的字节数    nmemb：要读取的次数    stream：文件指针，fopen函数的返回值    返回值：成功读取的次数文件位置指针：    每个打开的文件系统都会用一个指针记录着它的读写位置，这个指针指向哪里，    接下来对文件的读取就会从哪里继续，指针的位置会随着文件的读写自动发生变化文件结构体中有一个成员记录文件的读写位置，称它位文件位置指针，有些情况下需要调整它的位置，获取到正确的数据。    int fseek(FILE *stream, long offset, int whence);    功能：根据基础位置＋偏移值调整文件指针的位置。    stream：文件指针，fopen函数的返回值    offset：可以为正负,正往右(偏移值)    whence：(基础位置)        SEEK_SET 文件头        SEEK_CUR 当前位置        SEEK_END 文件尾    long ftell(FILE *stream);    功能：返回文件位置指针所在的位置。    void rewind(FILE *stream);    功能：把文件位置指针调整到开头文件关闭：    int fclose(FILE *fp);    功能：把文件关闭，以释放相关资源，避免数据丢失。</code></pre><h2 id="多文件编程："><a href="#多文件编程：" class="headerlink" title="多文件编程："></a>多文件编程：</h2><pre><code>随着代码量的增加，不得不把代码分成若干个.c文件编写，这样能够给文件。。。但缺点是不方便编译，需要借助编译脚本。如何进行多文件编译：根据功能、责任分成若干个.c文件，然后为每个.c文件配备一个辅助文件.h然后单独编译每个.c文件，    生成目标文件.o，然后再把.o文件合并成可执行文件。头文件中应该写什么：    1、头文件卫士    2、宏常量、宏函数    3、结构、联合、枚举的设计    4、变量、函数的声明    5、static函数的实现</code></pre><h2 id="编译脚本："><a href="#编译脚本：" class="headerlink" title="编译脚本："></a>编译脚本：</h2><pre><code>把用于编译的命令记录到文件中（makefile/Makefile），在终端里执行make程序时，make程序会自动读取当前目录中的。。。make程序会监控每个文件的最后修改时间，如果没有被修改的文件不需要重新编译，这样可以节约大量的时间注意：一定要使用tab缩进</code></pre><h2 id="GDB调试："><a href="#GDB调试：" class="headerlink" title="GDB调试："></a>GDB调试：</h2><pre><code>1、设置ubuntu系统，当段错误时产生core    ulimit -c unlimited2、编译时增加-g参数3、再次执行新编译的程序，重新产生core文件4、gdb a.out core 进行调试    run/where</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础知识(三)</title>
      <link href="/blog/2019/08/29/c-ji-chu-zhi-shi-san/"/>
      <url>/blog/2019/08/29/c-ji-chu-zhi-shi-san/</url>
      
        <content type="html"><![CDATA[<h2 id="一、this指针"><a href="#一、this指针" class="headerlink" title="一、this指针"></a>一、this指针</h2><pre><code>类的成员变量单独存储在每个类对象中，成员函数存储在代码段中，所有的类对象共享一份成员函数。成员函数是如何区别调用它的是哪个类对象的？答：借助了this指针，类的每个成员函数都有一个隐藏的参数this指针，它指向类对象。</code></pre><a id="more"></a><pre><code>类的构造函数中也同样有this指针，指向的就是正在构造的这个对象。在类中（成员、构造、析构函数）对成员变量、成员函数的访问都是借助了this指针。this指针是隐藏的，但也可以显示使用：    1、参数与成员一样时，使用this可以区别出成员与参数名。    2、在成员函数中如果想返回当前对象的指针、引用等，可以使用this指针实现。    3、将this指针作为函数的参数，从一个对象传递给另一个其它类对象，可以实现对象间的交互。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;class User{    char name[20];    char pass[7];public:    User(const char* name,const char* pass)    {        strcpy(this-&gt;name,name);        strcpy(this-&gt;pass,pass);        //show();    }    User&amp; func(void)    {        return *this;    }    void show(void)//隐藏this指针    {        cout&lt;&lt; name &lt;&lt; " "&lt;&lt; pass &lt;&lt;endl;    }    User* this = const this;};int main(){    User u1("aaa","123");    User u2("bbb","321");    User&amp; u3 = u1.func();    u1.show();    u2.show();    u3.show();}</code></pre><h2 id="二、常函数"><a href="#二、常函数" class="headerlink" title="二、常函数"></a>二、常函数</h2><pre><code>在函数的参数列表与函数体之间有const修饰的函数，这个const其实就是在修饰this指针。不能在常函数内修改成员变量的值，普通成员函数可以调用常函数，而常函数只能调用常函数。如果在常函数中真的需要修改某个成员变量的数据，那么需要这个成员被 mutable修饰。</code></pre><pre><code>mutable char name[20];void show(void) const//隐藏this指针{    strcpy(name,"------");    cout&lt;&lt; name &lt;&lt; " "&lt;&lt; pass &lt;&lt;endl;}</code></pre><p>   普通函数不能声明为常函数（因为没有this指针）。</p><h2 id="三、析构函数"><a href="#三、析构函数" class="headerlink" title="三、析构函数"></a>三、析构函数</h2><pre><code>1、特殊的成员函数     ~类名(void)    {    }    没有参数、没有返回值、不能重载2、谁来调用    析构函数会在销毁对象时自动调用，在对象的整个生命周期内最多被调用一次。3、析构函数负责什么    负责释放在构造函数期间获取的所有资源，它的执行过程：    1.先执行析构函数本身代码    2.调用成员类的析构函数    3.调用父类的析构函数</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstdlib&gt;using namespace std;class A{public:    A(void)    {        cout &lt;&lt; "A 's 构造" &lt;&lt;endl;    }    ~A(void)    {        cout&lt;&lt;"A 's 析构"&lt;&lt;endl;    }};class B{public:    B(void)    {        cout &lt;&lt; "B 's 构造" &lt;&lt;endl;    }    ~B(void)    {        cout&lt;&lt;"B 's 析构"&lt;&lt;endl;    }};class User : public A{    char* name;    char* pass;    B b;    //char name[20];    //char pass[10];public:    User(const char* name,const char* pass)    {        this-&gt;name = new char[strlen(name)+1];        strcpy(this-&gt;name,name);        this-&gt;pass = new char[strlen(pass)+1];        strcpy(this-&gt;pass,pass);        cout&lt;&lt; "构造"&lt;&lt;endl;        cout&lt;&lt;"-----"&lt;&lt;endl;    }/*    User(void)    {        cout&lt;&lt;"构造"&lt;&lt;endl;    }*/    ~User(void)    {        delete name;        delete pass;        cout&lt;&lt;"析构"&lt;&lt;endl;    }};int main(){    User* u1 = new User("asd","ads");    //exit(0);    delete u1;    //User u2;}</code></pre><p>   4.缺省的析构函数<br>        如果一个类没有实现析构函数，编译器会自动生成一个具有析构函数功能的二进制指令，它负责释放编译器能够看得到的资源（成员变量、类成员、弗雷成员），这就是缺省析构。<br>        如果类中没有动态资源，也不需要做善后工作，缺省析构就完全共用了，不需要再实现新析构函数。<br>        注意：缺省析构无法释放动态资源（堆内存）【堆内存是动态资源，动态资源不一定是堆内存】</p><p>   类对象的创建过程与释放过程。</p><pre><code>    创建：分配内存（对象）-&gt; 父类构造-&gt; 成员构造-&gt; 自己构造        父类构造：按照继承表从左到右依次构造。        成员构造：按照声明顺序从上至下依次构造。    释放：自己析构-&gt; 成员析构-&gt; 父类析构-&gt; 释放内存（对象）        成员析构：按照声明顺序从下到上依次构造。        父类析构：按照继承表从右到左依次构造。</code></pre><h2 id="四、拷贝构造"><a href="#四、拷贝构造" class="headerlink" title="四、拷贝构造"></a>四、拷贝构造</h2><pre><code>拷贝构造又称为复制构造，是一种特殊的构造函数，它是使用一个现有的旧对象构造一个新的对象时调用的函数，只有一个引用型的参数（对象本身）。类名(类&amp; ){}拷贝构造的参数应该加 const 保护，但编译器并没有强行限制。编译器会自己生成一个拷贝构造函数，它负责把旧对象中的所有数据拷贝给新创建的对象。深拷贝与浅拷贝的区别：    如果类成员有指针，浅拷贝只拷贝指针变量的值，而深拷贝指针变量所指向的目标。什么情况下需要实现拷贝构造：    当类成员中没有指针成员，此时默认的拷贝构造（浅拷贝）就无法完成任务，需要自己动手实现拷贝构造（深拷贝）。什么情况下会调用拷贝构造：    1、使用旧对象给新对象赋值时    User user1 = user;    2、使用对象当作函数的参数，当调用函数时，就会一起调用拷贝构造。</code></pre><pre><code>#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;class User{    char* name;    char pass[7];    int id;public:    User(const char* name,const char* pass)    {        this-&gt;name = new char[strlen(name)+1];        strcpy(this-&gt;name,name);        strcpy(this-&gt;pass,pass);    }    void show(void)    {        cout&lt;&lt;name &lt;&lt;" " &lt;&lt;pass &lt;&lt;endl;    }    ~User(void)    {        cout&lt;&lt;"析构"&lt;&lt;&amp;name &lt;&lt;endl;        delete[] name;    }    User(User&amp; that)    {        name = new char[strlen(that.name)];        strcpy(name,that.name);        strcpy(pass,that.pass);        cout &lt;&lt; "我是拷贝构造" &lt;&lt; endl;    }};void func(User&amp; user){    user.show();}int main(){    User u1("a","aa");    u1.show();    // 调用拷贝构造    User u2 = u1;    u2.show();    func(u1);}</code></pre><h2 id="五、赋值构造（赋值运算符）"><a href="#五、赋值构造（赋值运算符）" class="headerlink" title="五、赋值构造（赋值运算符）"></a>五、赋值构造（赋值运算符）</h2><pre><code>当一类对象给另一个类对象赋值时，就会调用赋值构造void opeator = (类&amp;){}什么时会调用：对象 = 对象；编译器会生成一个缺省的赋值构造，它负责把一个对象的内存拷贝给另一个对象。什么情况需要实现赋值构造：    当需要深拷贝时，需要自己动手实现赋值构造，也就是拷贝构造与赋值构造需要同时实现。编译器会自动生成四个成员函数：构造、析构、赋值构造、拷贝构造。    </code></pre><pre><code>#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;class User{    char* name;    char pass[7];public:    User(const char* name,const char* pass)    {        this-&gt;name = new char[strlen(name)+1];        strcpy(this-&gt;name,name);        strcpy(this-&gt;pass,pass);    }    void show(void)    {        cout&lt;&lt;name &lt;&lt;" " &lt;&lt;pass &lt;&lt;endl;    }    ~User(void)    {        cout&lt;&lt;"析构"&lt;&lt;&amp;name &lt;&lt;endl;        delete[] name;    }    User(User&amp; that)    {        name = new char[strlen(that.name)];        strcpy(name,that.name);        strcpy(pass,that.pass);        cout &lt;&lt; "我是拷贝构造" &lt;&lt; endl;    }    User&amp; operator = (const User&amp; that)    {        cout&lt;&lt; this &lt;&lt;" "&lt;&lt; &amp;that &lt;&lt; endl;        if(this != &amp;that)        {            cout&lt;&lt;"我是赋值构造"&lt;&lt;endl;            // 释放旧空间            delete[] name;            // 申请新空间            name = new char[strlen(that.name)+1];            // 拷贝内容            strcpy(name,that.name);            strcpy(pass,that.pass);            /*            User temp(that);            swap(name,temp.name);            */        }        return *this;    }};int main(){    User u1("a","aa");    User u2("bbbb","bb");    User u3("ccc","cc");    //赋值构造    u1 = u1;    //u2 = u1 = u3;    u1.show();    u2.show();    u3.show();}</code></pre><h2 id="六、关于拷贝构造、赋值构造的建议"><a href="#六、关于拷贝构造、赋值构造的建议" class="headerlink" title="六、关于拷贝构造、赋值构造的建议"></a>六、关于拷贝构造、赋值构造的建议</h2><pre><code>1、缺省的拷贝构造、赋值构造函数不光会拷贝本类的数据，也会调用成员类对象和父类的拷贝构造和赋值构造，而不是单纯的按字节复制，因此尽量少用指针成员。2、在函数参数中，尽量使用类指针或引用来当参数（不要直接使用类对象），减少调用拷贝构造和赋值构造的机会，也可以降低数据传递的开销。3、如果由于特殊原因无法实现完整的拷贝构造、赋值构造，建议将它们私有化，防止误用。4、一旦为一个类实现了拷贝构造，那么也一定要实现赋值构造。（&lt;=&gt;）</code></pre><h2 id="七、静态成员"><a href="#七、静态成员" class="headerlink" title="七、静态成员"></a>七、静态成员</h2><pre><code>类成员一旦被 static 修饰就会变成静态成员，而是单独一份存储在bss或data内存段中，所有的类对象共享（静态成员属于类，而不属于某个对象）。静态成员在类内声明，但必须在类外定义、初始化。与成员函数一样需要加“类名::”限定符表示它属于哪个类，但不需要再额外增加 static. 成员函数也可以被static修饰，这种函数叫静态成员函数，这种成员没有this指针，因此在静态函数中不能直接访问类的成员，但可以直接访问静态成员，但可以直接访问静态成员变量、静态成员函数。静态成员变量、函数依然受访问控制限定符的影响。因为在代码编译完成后，静态成员已经定义完成（有了存储空间），一次可以不用活类对象而直接调用，类名::静态成员名静态成员变量可以被当做全局变量来使用（访问限定符必须是public），静态成员函数可以当作类的接口，实现对类的管理。</code></pre><h2 id="八、单例模式"><a href="#八、单例模式" class="headerlink" title="八、单例模式"></a>八、单例模式</h2><pre><code>什么是单例模式，只能创建出一个类对象（只有一实际的实例）的叫单例模式。单例模式的应用场景：    Windows系统的任务管理器    Linux/Unix系统的日志系统    网站的访问计数器    服务端程序的连接池、线程池、数据池获取单一对象的方法：    1、定义全局（C语言），但不受控制，防君子不能防小人。    2、专门写一个类，把类的构造函数设置私有，借助静态成员函数提供一个接口，以此来获取唯一的实例。C++如何实现单例：    1、禁止类的外部创建类对象：构造函数设置私有    2、类自己维护一个唯一的实例：使用静态指针指向    3、提供一个获取实例的方法：静态成员函数获取静态指针</code></pre><p>   饿汉模式：<br>        将单例类的唯一实例对象定义为成员变量，当程序开始运行时，实例对象就已经创建完成<br>        优点：加载进程时，静态创建单例对象，线程安全。<br>        缺点：无论使用与否，总要创建，浪费内存。</p><pre><code>#include &lt;iostream&gt;using namespace std;class Singleton{private:    Singleton(void)    {    }    static Singleton object;public:    static Singleton get_object(void)    {        return object;    }    void show(void)    {        cout&lt;&lt; "我是对象："&lt;&lt;&amp;object &lt;&lt;endl;    }};Singleton Singleton::object;int main(){    Singleton sig = Singleton::get_object();    Singleton sig1 = Singleton::get_object();    sig.show();    sig1.show();}</code></pre><p>   懒汉模式：<br>        用静态成员指针来指向单例类的唯一实例对象，只有真正调用获取实例的静态接口时，实例对象才被创建。<br>        优点：什么时候用什么时候创建，节约内存。<br>        缺点：在第一次调用获取实例对象的静态接口时，才真正创建，如果在多线程操作情况下有可能被创建出多个实例对象（虽然可能性很低），存在线程不安全问题。</p><pre><code>#include &lt;iostream&gt;#include &lt;pthread.h&gt;using namespace std;//pthread_mutex_lock = PTHREAD_MUTEX_INITIALIZER;class Singleton{private:    Singleton(void)    {    }    static Singleton* object;public:    static Singleton&amp; get_object(void)    {        if(NULL == object)        {            object = new Singleton;        }        return *object;    }    void show(void)    {        cout&lt;&lt; "我是对象："&lt;&lt;object &lt;&lt;endl;    }};Singleton* Singleton::object;int main(){    Singleton sig = Singleton::get_object();    Singleton sig1 = Singleton::get_object();    sig.show();    sig1.show();}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础知识(二)</title>
      <link href="/blog/2019/08/29/c-ji-chu-zhi-shi-er/"/>
      <url>/blog/2019/08/29/c-ji-chu-zhi-shi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="十、函数重载（重载、隐藏、重写）"><a href="#十、函数重载（重载、隐藏、重写）" class="headerlink" title="十、函数重载（重载、隐藏、重写）"></a>十、函数重载（重载、隐藏、重写）</h2><pre><code>1、函数重载    在同一作用域下，函数名相同，参数列表不同的函数，构成重载关系。</code></pre><a id="more"></a><pre><code>#include &lt;iostream&gt;using namespace std;void f(const int* p){    cout&lt;&lt;"f const"&lt;&lt;endl;}void f(int* p){    cout&lt;&lt;"f"&lt;&lt;endl;}int main(){    const int num = 0;    f(&amp;num);}</code></pre><p>   2、重载实现的机制<br>        C++代码在编译时会把函数的参数类型添加到参数名中，借助这个方式来实现函数重载，也就是C++的函数在编译期间经历换名的过程。<br>    因此，C++代码不能调用C函数（C语言编译器编译出的函数）<br>    3、extern “C” {}<br>        告诉C++编译器按照C语言的方式声明函数，这样C++就可以调用C编译器编译出的函数了（C++目标文件可以与C目标文件合并生成可执行程序）。<br>        如果C想调用C++编译出的函数，需要将C++函数的定义用extern “C”包括一下。<br>        注意：如果两个函数名一样，一定会冲突。<br>    4、重载和作用域<br>        函数的重载关系发生在同一作用域下，不同作用域下的同名函数，构成隐藏关系。<br>    5、重载解析<br>        当调用函数时，编译器根据实参的类型和形参的匹配情况，选择一个确定的重载版本，这个过程叫重载解析。<br>        实参的类型和形参的匹配情况有三种：<br>            1、编译器找到与实参最佳的匹配函数，编译器将生成调用代码。<br>            2、编译找不到匹配函数，编译器将给出错误信息。<br>            3、编译器找到多个匹配函数，但没有一个最佳的，这种错误叫二义性。<br>        在大多数情况下编译器都能立即找到一个最佳的调用版本，但如果没有，编译就会进行类型提升，这样备选函数中就可能具有多个可调用<br>的版本，这样就可能产生二义性错误。<br>    6、确定存在函数的三个步骤<br>        1）候选函数<br>        函数调用的第一步就是确定所有可调用的函数的集合（函数名、作用域），该集合中的函数就是候选函数。<br>        2）选择可行函数<br>        从候选函数中选择一个或多个函数，选择的标准是参数个数相同，而且通过类型提升实参可被隐式转换为形参。<br>        3）寻找最佳匹配<br>        优先每个参数都完全匹配的方案，其次参数完全匹配的个数，再其次是浪费内存的字节数。<br>    7、指针类型会对函数重载造成影响<br>        C++函数的形参如果是指针类型，编译时函数名中会追加Px。</p><pre><code>#include &lt;iostream&gt;using namespace std;void sum(short a,short b){    cout&lt;&lt; a+b &lt;&lt; "  3" &lt;&lt; endl;}void sum(int a,short b){    cout&lt;&lt; a+b &lt;&lt; "  1" &lt;&lt; endl;}void sum(short a,long b){    cout &lt;&lt; a+b &lt;&lt;"  2"&lt;&lt; endl;}int main(){    short a=3, b=7;    sum(a,b);}</code></pre><h2 id="十一、默认形参"><a href="#十一、默认形参" class="headerlink" title="十一、默认形参"></a>十一、默认形参</h2><pre><code>1、在C++中函数的形参可以设置默认值，调用函数，如果没有提供实参数，则使用默认形参。2、如果形参只有一部分设置了默认形参，在某个提供了默认值的参数后面，所有的参数都必须提供默认值。3、函数的默认形参是在编译阶段确定的，因此只能使用常量、常量表达式、全局变量数据作为默认值。4、如果函数的声明和定义需要分开，那么默认形参设置在声明、定义，还是声明定义都需要设置。5、默认形参会对函数重载造成影响，设置默认形参时一定要慎重。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;void fun(int b,int a=100);int main(){    fun(10,20);    fun(50);}void fun(int b,int a){    cout &lt;&lt;"b:" &lt;&lt; b &lt;&lt; endl;    cout &lt;&lt;"a:" &lt;&lt; a &lt;&lt; endl;}</code></pre><h2 id="十二、内联函数"><a href="#十二、内联函数" class="headerlink" title="十二、内联函数"></a>十二、内联函数</h2><pre><code>1、普通函数调用时是生成调用指令（跳转），然后当代码执行到调用位置时跳转到函数所在的代码段执行。2、内联函数就把函数编译好的二进制指令直接复制到函数的调用位置。3、内联函数的优点就是提高程序的运行速度（因为没有跳转，也不需要返回），但这样会导致可执行文件增大（冗余），也就是牺牲空间来换取时间。4、内联分为显示内联和隐式内联    显示内联：在函数前 inline（C语言C99标准也支持）    隐式内联：结构、类中内部直接定义的成员函数，则该类型函数会被优化成内联函数。5、宏函数在调用时会把函数体直接替换到调用位置，与内联函数一样也是使用空间来换取时间，所以宏函数与内联函数的区别（优缺点）？    1.宏函数不是真正的函数，只是代码替换，不会有参数压栈、出栈以及返回值，也不会检查参数类型，因此所有类型都能使用，但这样会有安全隐患。    2.内联函数是真正的函数，被调用时会进行传参，会进行压栈、出栈，可以有返回值，并会严格检查参数类型，这样就不能通用，如果被多种类型调用需要重载。6、内联适用的条件    由于内联会造成可执行文件变大，并增加内存开销，因此只有频繁调用的简单函数适合作为内联。    调用比较少的复杂函数，内联后并不显著提高性能，不足以抵消牺牲空间带来的损失，所以不适合内联。    带有递归特性和动态绑定特性的函数，无法实施内联，因此编译器会忽略声明部分的inline关键字。</code></pre><h2 id="十三、引用"><a href="#十三、引用" class="headerlink" title="十三、引用"></a>十三、引用</h2><pre><code>引用就是取艺名（别名）。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;int main(){    int wqq = 18;    int&amp; xiu = wqq;    //int&amp; xiu; 不存在空引用,错误    //int const &amp; xi = 20; 无名对象    cout &lt;&lt; wqq &lt;&lt;" "&lt;&lt;xiu&lt;&lt;endl;}</code></pre><pre><code>1、引用的基本特性    引用就是取别名，声明一个标识符为引用，就表示该标识符是另一个对象的外号。    1）引用必须初始化，不存在空引用，但有悬空引用（变量死了，名还留着）。    2）可以引用无名对象（临时对象），但必须使用常引用。    3）引用不能更换目标    引用一旦完成了定义和初始化就和普通变量名一样，它就代表了目标，一经引用终身不能再引用其他目标。2、引用型参数    引用当作函数的参数能达到指针同样的效果，但不具备指针的危险，还比指针方便。    引用可以非常简单的实现函数间共享变量的目的，而且是否使用引用由被调函数说了算。    引用当作函数的参数还能提高传递参数效率，指针至少还需要4字节内存，而引用只需要增加一条标识符与内存之间的绑定（映射）。3、引用型返回值    不要返回局部变量的引用，会造成悬空引用。    如果返回值是一个临时值（右值），如果非要使用引用接收的话，必须使用常引用。注意：C++中的引用时一种取别名的机制，而C语言中的指针是一种数据类型（代表内存编号的无符号整数）。练习1：实现一个C++版本的swap函数。指针和引用的相同点和不同点：    相同点：跨函数共享变量，优化传参效率，避免传参的时候调用拷贝构造    不同点：指针有自己的存储空间，借助指针可以使用堆内存，引用不行。引用取别名，指针是数据类型。指针可以为空，引用不可以为空。指针可以不初始化，引用必须初始化。指针可以改变指向，引用不能引用其他对象（可以定义指针的指针，不能定义引用的引用。可以定义指针的引用，不能定义引用的指针。可以定义指针的数组，但不能定义引用的数组。可以定义数组的引用）。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;void swap(int&amp; a,int&amp; b) //引用{    int temp = a;    a = b;    b = temp;}int main(){    int a=3,b=4;    swap(a,b);    cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;endl;}</code></pre><h2 id="十四、C-的内存管理"><a href="#十四、C-的内存管理" class="headerlink" title="十四、C++的内存管理"></a>十四、C++的内存管理</h2><pre><code>1、new/delete C++具备申请/释放堆内存功能的运算符    相当于C语言中的malloc和free。    new 类型：会自动计算类型所需要字节数，然后从堆中分配对应字节数的内存，并返回内存的首地址（具备类型）。    delete 指针：会自动释放堆内存。    注意：new/delete与malloc/free不能混用，因为new和delete会自动调用类、结构的构造函数、析构函数。2、数组的分配与释放    new 类型[n]； n表示数组长度，如果类、结构会自动调用n次构造函数。    delete[] 指针；通过new[] 分配的内存，必须通过delete[]释放。    new[] 返回值前4个字节中存放着数组的长度。3、重复释放    delete/delete[]不能重复释放同一块内存。    delete/delete[]释放野指针的后果不确定，但释放空指针是安全的。</code></pre><pre><code>#include &lt;iostream&gt;using namespace std;struct Student{    Student(void)    {        cout&lt;&lt;"我是构造函数，创建对象时，我就会执行" &lt;&lt; endl;    }    ~Student(void)    {        cout&lt;&lt; "我是析构函数，释放对象时，我就会执行" &lt;&lt; endl;    }};int main(){    int* p = new int;    *p = 10;    cout&lt;&lt; *p &lt;&lt;endl;    Student stu;    Student* s = new Student;    delete(s);    cout &lt;&lt; endl;    Student* a = new Student[3];    p = (int*)a;    cout &lt;&lt; *(p-1) &lt;&lt; endl;    delete[] a;    }</code></pre><p>   4、内存分配失败<br>        当分配的内存过大，没有能满足需求的整块内存就会抛出异常，std::bad_alloc。<br>        new/delete和C语言的malloc/free的相同点和不同点（区别）？<br>        不同点：<br>            身份     运算符               标准库函数<br>            参数     类型（自动计算）      字节数（手动计算）<br>            返回值   带类型的地址          void*地址<br>            调用构造 自动调用              不能调用构造/析构函数<br>            出错     抛出异常              返回NULL<br>        相同点：<br>            1、都能管理堆内存<br>            2、不能重复释放<br>            3、可以释放NULL</p><p>   注意：在C++中尽量使用引用、new/delete</p><pre><code>#include &lt;iostream&gt;using namespace std;int main(){    int *p = NULL;    try{        p = new int[~0];    }    catch(std::bad_alloc&amp; ex)    {        cout &lt;&lt; "error" &lt;&lt; endl;    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础知识(一)</title>
      <link href="/blog/2019/08/29/c-ji-chu-zhi-shi-yi/"/>
      <url>/blog/2019/08/29/c-ji-chu-zhi-shi-yi/</url>
      
        <content type="html"><![CDATA[<p>思考题：C与C++的区别？</p><h2 id="一、C-介绍"><a href="#一、C-介绍" class="headerlink" title="一、C++介绍"></a>一、C++介绍</h2><pre><code>本贾尼·斯特劳斯特卢普，与1979年4月份贝尔实验室的本贾尼博士在分析UNIX系统分布内核流量分析时，希望有一种有效的更加模块化的工具。1979年10月完成了预处理器Cpre，为C增加了类机制，也就是面向对象，1983年完成了C++的第一个版本，C with classes也就是C++。C++与C的不同点：1、C++基本兼容C的语法2、支持面向对象的编程思想3、支持运算符重载4、支持泛型编程、模板5、支持异常处理6、类型检查严格</code></pre><a id="more"></a><h2 id="二、第一个C-程序"><a href="#二、第一个C-程序" class="headerlink" title="二、第一个C++程序"></a>二、第一个C++程序</h2><pre><code>1、文件扩展名    .cpp .cc .C .cxx2、编译器    g++ 大多数系统需要额外安装，Ubuntu系统下的安装命令：        sudo apt-get update        sudo apt-get install g++    gcc也可以继续使用，但需要增加参数 -xC++ -lstdc++3、头文件    #include &lt;iostream&gt;    #include &lt;stdio.h&gt; 可以继续使用，但C++建议使用 #include &lt;cstdio&gt;4、输入/输出    cin &gt;&gt; 输入数据    cout &lt;&lt; 输出数据    cin/cout会自动识别类型    scanf/printf可以继续使用    注意：cout和cin是类对象，而scanf/printf是标准库函数。5、增加了名字空间    std::cout    using namespace std;</code></pre><h2 id="三、名字空间"><a href="#三、名字空间" class="headerlink" title="三、名字空间"></a>三、名字空间</h2><pre><code>1、什么是名字空间在C++中经常使用多个独立开发的库来完成项目，由于库的作者或开发人员没见过面，因此命名冲突在所难免。2、为什么需要名字空间在项目中函数名、全局变量、结构、联合、枚举、类，非常有可能名字冲突，而名字空间就对这些命名进行逻辑空间划分（不是物理单元划分），为了解决命名冲突，C++之父为防止命名冲突给C++设计一个名字空间的机制。通过使用namespace XXX把库中的变量、函数、类型、结构等包含在名字空间中，形成自己的作用域，避免名字冲突。namespace xxx{}// 没有分号注意：名字空间也是一种标识符，在同一作用域下不能重名。3、同名的名字空间有自动合并（为了声明和定义可以分开写）同名的名字空间中如果有重名的依然会命名冲突4、名字空间的使用方法::域限定符空间名::标识符 // 使用麻烦，但是非常安全using namespace 空间名; 把空间中定义的标识符导入到当前代码中    不建议这样使用，相当于把垃圾分类后，又倒入同一个垃圾车，依然会冲突</code></pre><pre><code>#include &lt;iostream&gt;namespace test{int cout = 100;int cin = 99;}int main(){    std::cout&lt;&lt;test::cout&lt;&lt;' '&lt;&lt;test::cin&lt;&lt;std::endl;}</code></pre><p>   5、无名名字空间<br>    不属于任何名字空间中的标识符，隶属于无名名字空间。<br>    无名名字空间中的成员使用 ::标识符 进行访问。<br>    如何访问被屏蔽的全局变量。</p><p>   6、名字空间的嵌套<br>    名字空间内部可以再定义名字空间，这种名字空间嵌套<br>    内层的名字空间与外层的名字空间的成员，可以重名，内层会屏蔽外层的同名标识符。<br>    多层的名字空间在使用时逐层分解。</p><pre><code>    n1::n2::num;    namespace n1    {        int num = 1;        namespace n2        {               int num = 2;            namespace n3            {            }        }    }</code></pre><p>   7、可以给名字空间取别名<br>    由于名字空间可以嵌套，这样就会导致在使用内层成员时过于麻烦，可以给名字空间取别名来解决这类问题。<br>    namespace n123 = n1::n2::n3;</p><h2 id="四、C-的结构"><a href="#四、C-的结构" class="headerlink" title="四、C++的结构"></a>四、C++的结构</h2><p>   1、不再需要 typedef ，在定义结构变量时，可以省略struct关键字<br>    2、成员可以是函数（成员函数），在成员函数中可以直接访问成员变量，不需要.或-&gt;，但是C的结构成员可以是函数指针。<br>    3、有一些隐藏的成员函数（构造、析构、拷贝构造、赋值构造）。<br>    4、可以继承，可以设置成员的访问权限（面向对象）。</p><pre><code>#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;struct Man{    char id[18];};struct Student:public Man{    char name[20];    char sex;    short age;    Student(void)    {        cout&lt;&lt; "我被调用了..." &lt;&lt; endl;    }    void show(void)    {        cout &lt;&lt; "我是秀" &lt;&lt; name &lt;&lt; " " &lt;&lt; sex &lt;&lt; " " &lt;&lt; age &lt;&lt; endl;    }};int main(){    Student stu;    strcpy(stu.name,"hehe");    stu.sex = 'm';    stu.age = 12;    strcpy(stu.id,"1235214141231");    cout &lt;&lt; stu.name &lt;&lt; " " &lt;&lt; stu.sex &lt;&lt; " " &lt;&lt; stu.age &lt;&lt; endl;    cout&lt;&lt;stu.id&lt;&lt;endl;    stu.show();}</code></pre><h2 id="五、C-的联合"><a href="#五、C-的联合" class="headerlink" title="五、C++的联合"></a>五、C++的联合</h2><p>   1、不再需要 typedef ，在定义结构变量时，可以省略union关键字<br>    2、成员可以是函数（成员函数），在成员函数中可以直接访问成员变量，不需要.或-&gt;，但是C的结构成员可以是函数指针。<br>    3、有一些隐藏的成员函数（构造、析构、拷贝构造、赋值构造）。</p><pre><code>#include &lt;iostream&gt;using namespace std;union Data{    char ch[5];    int num;    Data(void)    {        cout&lt;&lt;"我被调用了？"&lt;&lt;endl;    }    void show(void)    {        cout &lt;&lt; ch &lt;&lt;" " &lt;&lt; num &lt;&lt; endl;    }    ~Data(void)    {        cout&lt;&lt;"析构"&lt;&lt;endl;    }};int main(){    Data d;    d.show();    cout &lt;&lt; sizeof(d) &lt;&lt; endl;}</code></pre><h2 id="六、C-的枚举"><a href="#六、C-的枚举" class="headerlink" title="六、C++的枚举"></a>六、C++的枚举</h2><p>   1、定义、使用方法与C语言基本一致。<br>    2、类型检查比C语言更严格</p><pre><code>#include &lt;iostream&gt;using namespace std;enum Color{    RED,    YELLOW,    BLUE,    WHITE,    BLACK};int main(){    Color r;    r = BLUE;    //r = 0; error 类型检查更严格    cout &lt;&lt; r &lt;&lt; endl;}</code></pre><h2 id="七、C-的布尔类型"><a href="#七、C-的布尔类型" class="headerlink" title="七、C++的布尔类型"></a>七、C++的布尔类型</h2><p>   1、C++具有真的布尔类型，bool是C++中的关键字，在C语言中使用布尔类型需要导入头文件stdbool.h（在C11中bool应该是数据类型了）。<br>    2、在C++中 true false 是关键字，而在C语言中不是。<br>    3、在C++中 true false 是1字节，而C语言中是4字节。</p><pre><code>#include &lt;iostream&gt;using namespace std;int main(){    bool flag = 0;    cout &lt;&lt; flag &lt;&lt; " " &lt;&lt; sizeof(flag) &lt;&lt; endl;}</code></pre><h2 id="八、C-的void"><a href="#八、C-的void" class="headerlink" title="八、C++的void*"></a>八、C++的void*</h2><p>   1、C语言中void* 可以与任意类型指针 自动转换。</p><pre><code>#include &lt;stdio.h&gt;int main(){    void* p = NULL;    char* p1 = p;    int* p2 = p;    double* p3 = p;    p = p1;    p = p3;}</code></pre><p>   2、C++中void<em>不能给其他类型的指针直接赋值，必须强制类型转换，但其他类型的指针可以自动给void</em>赋值。<br>    3、C++为什么这样修改void*？<br>        为了更安全，所以C++类型检查更严格。</p><h2 id="九、操作符别名"><a href="#九、操作符别名" class="headerlink" title="九、操作符别名"></a>九、操作符别名</h2><p>   某些特殊语言的键没有~,&amp;符合，国际标准化组织为一些操作符规定了别名，以便使用这些语言的键盘也能输入正确的C/C++代码。 C95和C++98以后的语言标准都支持ISO-646 </p><pre><code>and       &amp;&amp;or      ||not     !{       &lt;%    }       %&gt;#       :%</code></pre><pre><code>%:include &lt;iostream&gt;using namespace std;int main()&lt;%    cout &lt;&lt; "hello" &lt;&lt;endl;%&gt;</code></pre><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=28481591&amp;auto=1&amp;height=66"></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用码云或GitHub搭建简单的个人网站（补充hexo搭建博客）</title>
      <link href="/blog/2019/08/14/shi-yong-ma-yun-huo-github-da-jian-jian-dan-de-ge-ren-wang-zhan-bu-chong-hexo-da-jian-bo-ke/"/>
      <url>/blog/2019/08/14/shi-yong-ma-yun-huo-github-da-jian-jian-dan-de-ge-ren-wang-zhan-bu-chong-hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>视频链接：<a href="https://www.bilibili.com/video/av64294697" target="_blank" rel="noopener">https://www.bilibili.com/video/av64294697</a></p><h2 id="码云："><a href="#码云：" class="headerlink" title="码云："></a>码云：</h2><h3 id="1、新建一个仓库"><a href="#1、新建一个仓库" class="headerlink" title="1、新建一个仓库"></a>1、新建一个仓库</h3><p>​<img src="https://img-blog.csdnimg.cn/2019110817364811.png" alt=" "><br>路径名会影响你的个人网站的网址（自行修改），开源（公开），其他默认</p><p><img src="https://img-blog.csdnimg.cn/2019110817371867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>我们点击“创建”<br>   <img src="https://img-blog.csdnimg.cn/20191108173736588.png" alt=" "></p><h3 id="2、进入仓库后，我们新建一个文件"><a href="#2、进入仓库后，我们新建一个文件" class="headerlink" title="2、进入仓库后，我们新建一个文件"></a>2、进入仓库后，我们新建一个文件</h3><p><img src="https://img-blog.csdnimg.cn/20191108173825143.png" alt=" "></p><h3 id="3、文件名为index-html，再写入我们的html代码"><a href="#3、文件名为index-html，再写入我们的html代码" class="headerlink" title="3、文件名为index.html，再写入我们的html代码"></a>3、文件名为index.html，再写入我们的html代码</h3><p><img src="https://img-blog.csdnimg.cn/20191108173844773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>然后“提交”<br><img src="https://img-blog.csdnimg.cn/20191108173858414.png" alt=" "></p><h3 id="4、文件添加完成后，我们点击“服务”-gt-“Gitee-Pages”"><a href="#4、文件添加完成后，我们点击“服务”-gt-“Gitee-Pages”" class="headerlink" title="4、文件添加完成后，我们点击“服务”->“Gitee Pages”"></a>4、文件添加完成后，我们点击“服务”-&gt;“Gitee Pages”</h3><p><img src="https://img-blog.csdnimg.cn/20191108173913633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><h3 id="5、启动服务"><a href="#5、启动服务" class="headerlink" title="5、启动服务"></a>5、启动服务</h3><p><img src="https://img-blog.csdnimg.cn/20191108173924896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><h3 id="6、启动完毕后，这个网址就是我们的个人网站的网址了。"><a href="#6、启动完毕后，这个网址就是我们的个人网站的网址了。" class="headerlink" title="6、启动完毕后，这个网址就是我们的个人网站的网址了。"></a>6、启动完毕后，这个网址就是我们的个人网站的网址了。</h3><p><img src="https://img-blog.csdnimg.cn/20191108173935545.png" alt=" "></p><h3 id="7、我们点击网址进入看看"><a href="#7、我们点击网址进入看看" class="headerlink" title="7、我们点击网址进入看看"></a>7、我们点击网址进入看看</h3><p><img src="https://img-blog.csdnimg.cn/20191108173946721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><h3 id="8、之后我们就可以上传其他文件，如css和js"><a href="#8、之后我们就可以上传其他文件，如css和js" class="headerlink" title="8、之后我们就可以上传其他文件，如css和js"></a>8、之后我们就可以上传其他文件，如css和js</h3><p>网站加载可能不会很快，需要耐心等待，我搭建的网站：<a href="http://ikaros-521.gitee.io/self.gitee.io/">传送门</a></p><hr><h2 id="GitHub："><a href="#GitHub：" class="headerlink" title="GitHub："></a>GitHub：</h2><p>操作类似</p><p>注意：新建仓库时，仓库名是“你的GitHub的用户名.github.io” （用户名如果是大写，仓库名要改成小写）</p><p>进入仓库后，我们在网址后面加上/new/master，进入创建文件页面</p><p><img src="https://img-blog.csdnimg.cn/20191108174023775.png" alt=" "></p><p>之后就类似了，创建index.html文件</p><p><img src="https://img-blog.csdnimg.cn/20191108174037629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lrYXJvc181MjE=,size_16,color_FFFFFF,t_70" alt=" "></p><p>访问的网址是https://你的仓库名    我的就是（<a href="https://ikaros-521.github.io）" target="_blank" rel="noopener">https://ikaros-521.github.io）</a> </p><hr><h2 id="补充部分："><a href="#补充部分：" class="headerlink" title="补充部分："></a>补充部分：</h2><p>我已经在GitHub上搭建“博客”了，网址同上，可以参考。</p><p>主要使用的是<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>提供的一系列服务，以及 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">matery</a> 的主题。</p><p>hexo的搭建参考博客：<a href="https://www.cnblogs.com/shwee/p/11421156.html" target="_blank" rel="noopener">Hexo+Github: 个人博客网站搭建完全教程(看这篇就够了)</a></p><p>matery主题设置：<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/" target="_blank" rel="noopener">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐</a></p><p>yilia主题设置参考博客：<a href="https://blog.csdn.net/lynnbest/article/details/79845944" target="_blank" rel="noopener">Hexo yilia 主题一揽子使用方案</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 码云 </tag>
            
            <tag> 个人网站 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
