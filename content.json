{"meta":{"title":"Ikaros","subtitle":null,"description":null,"author":"ikaros","url":"https://ikaros-521.github.io","root":"/"},"pages":[{"title":"C++01","date":"2019-08-29T02:00:44.000Z","updated":"2019-08-29T02:03:47.263Z","comments":true,"path":"C-01/index.html","permalink":"https://ikaros-521.github.io/C-01/index.html","excerpt":"下一章：传送门 思考题：C与C++的区别？一、C++介绍 本贾尼·斯特劳斯特卢普，与1979年4月份贝尔实验室的本贾尼博士在分析UNIX系统分布内核流量分析时，希望有一种有效的更加模块化的工具。 1979年10月完成了预处理器Cpre，为C增加了类机制，也就是面向对象，1983年完成了C++的第一个版本，C with classes也就是C++。 C++与C的不同点： 1、C++完全兼容C的所有语法（内容） 2、支持面向对象的编程思想 3、支持运算符重载 4、支持泛型编程、模板 5、支持异常处理 6、类型检查严格","text":"下一章：传送门 思考题：C与C++的区别？一、C++介绍 本贾尼·斯特劳斯特卢普，与1979年4月份贝尔实验室的本贾尼博士在分析UNIX系统分布内核流量分析时，希望有一种有效的更加模块化的工具。 1979年10月完成了预处理器Cpre，为C增加了类机制，也就是面向对象，1983年完成了C++的第一个版本，C with classes也就是C++。 C++与C的不同点： 1、C++完全兼容C的所有语法（内容） 2、支持面向对象的编程思想 3、支持运算符重载 4、支持泛型编程、模板 5、支持异常处理 6、类型检查严格 二、第一个C++程序 1、文件扩展名 .cpp .cc .C .cxx 2、编译器 g++ 大多数系统需要额外安装，Ubuntu系统下的安装命令： sudo apt-get update sudo apt-get install g++ gcc也可以继续使用，但需要增加参数 -xC++ -lstdc++ 3、头文件 #include #include &lt;stdio.h&gt; 可以继续使用，但C++建议使用 #include 4、输入/输出 cin &lt;&lt; 输入数据 cout &gt;&gt; 输出数据 cin/cout会自动识别类型 scanf/printf可以继续使用 注意：cout和cin是类对象，而scanf/printf是标准库函数。 5、增加了名字空间 std::cout using namespace std; 三、名字空间 1、什么是名字空间 在C++中经常使用多个独立开发的库来完成项目，由于库的作者或开发人员没见过面，因此命名冲突在所难免。 2、为什么需要名字空间 在项目中函数名、全局变量、结构、联合、枚举、类，非常有可能名字冲突，而名字空间就对这些命名进行逻辑空间划分（不是物理单元划分）， 为了解决命名冲突，C++之父为防止命名冲突给C++设计一个名字空间的机制。 通过使用namespace XXX把库中的变量、函数、类型、结构等包含在名字空间中，形成自己的作用域，避免名字冲突。 namespace xxx { }// 没有分号 注意：名字空间也是一种标识符，在同一作用域下不能重名。 3、同名的名字空间有自动合并（为了声明和定义可以分开写） 同名的名字空间中如果有重名的依然会命名冲突 4、名字空间的使用方法 ::域限定符 空间名::标识符 // 使用麻烦，但是非常安全 using namespace 空间名; 把空间中定义的标识符导入到当前代码中 不建议这样使用，相当于把垃圾分类后，又导入同一个垃圾车，依然会冲突 1234567891011#include &lt;iostream&gt;namespace test&#123;int cout = 100;int cin = 99;&#125;int main()&#123; std::cout&lt;&lt;test::cout&lt;&lt;&apos; &apos;&lt;&lt;test::cin&lt;&lt;std::endl;&#125; 5、无名名字空间 不属于任何名字空间中的标识符，隶属于无名名字空间。 无名名字空间中的成员使用 ::标识符 进行访问。 如何访问被屏蔽的全局变量。 6、名字空间的嵌套 名字空间内部可以再定义名字空间，这种名字空间嵌套 内层的名字空间与外层的名字空间的成员，可以重名，内层会屏蔽外层的同名标识符。 多层的名字空间在使用时逐层分解。 12345678910111213n1::n2::num;namespace n1&#123; int num = 1; namespace n2 &#123; int num = 2; namespace n3 &#123; &#125; &#125;&#125; 7、可以给名字空间取别名 由于名字空间可以嵌套，这样就会导致在使用内层成员时过于麻烦，可以给名字空间取别名来解决这类问题。 namespace n123 = n1::n2::n3; 四、C++的结构 1、不再需要 typedef ，在定义结构变量时，可以省略struct关键字 2、成员可以是函数（成员函数），在成员函数中可以直接访问成员变量，不需要.或-&gt;，但是C的结构成员可以是函数指针。 3、有一些隐藏的成员函数（构造、析构、拷贝构造、赋值构造）。 4、可以继承，可以设置成员的访问权限（面向对象）。 123456789101112131415161718192021222324252627282930313233343536#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;struct Man&#123; char id[18];&#125;;struct Student:public Man&#123; char name[20]; char sex; short age; Student(void) &#123; cout&lt;&lt; &quot;我被调用了...&quot; &lt;&lt; endl; &#125; void show(void) &#123; cout &lt;&lt; &quot;我是秀&quot; &lt;&lt; name &lt;&lt; &quot; &quot; &lt;&lt; sex &lt;&lt; &quot; &quot; &lt;&lt; age &lt;&lt; endl; &#125;&#125;;int main()&#123; Student stu; strcpy(stu.name,&quot;hehe&quot;); stu.sex = &apos;m&apos;; stu.age = 12; strcpy(stu.id,&quot;1235214141231&quot;); cout &lt;&lt; stu.name &lt;&lt; &quot; &quot; &lt;&lt; stu.sex &lt;&lt; &quot; &quot; &lt;&lt; stu.age &lt;&lt; endl; cout&lt;&lt;stu.id&lt;&lt;endl; stu.show();&#125; 五、C++的联合 1、不再需要 typedef ，在定义结构变量时，可以省略union关键字 2、成员可以是函数（成员函数），在成员函数中可以直接访问成员变量，不需要.或-&gt;，但是C的结构成员可以是函数指针。 3、有一些隐藏的成员函数（构造、析构、拷贝构造、赋值构造）。 12345678910111213141516171819202122232425262728#include &lt;iostream&gt;using namespace std;union Data&#123; char ch[5]; int num; Data(void) &#123; cout&lt;&lt;&quot;我被调用了？&quot;&lt;&lt;endl; &#125; void show(void) &#123; cout &lt;&lt; ch &lt;&lt;&quot; &quot; &lt;&lt; num &lt;&lt; endl; &#125; ~Data(void) &#123; cout&lt;&lt;&quot;析构&quot;&lt;&lt;endl; &#125;&#125;;int main()&#123; Data d; d.show(); cout &lt;&lt; sizeof(d) &lt;&lt; endl;&#125; 六、C++的枚举 1、定义、使用方法与C语言基本一致。 2、类型检查比C语言更严格 1234567891011121314151617181920#include &lt;iostream&gt;using namespace std;enum Color&#123; RED, YELLOW, BLUE, WHITE, BLACK&#125;;int main()&#123; Color r; r = BLUE; //r = 0; error 类型检查更严格 cout &lt;&lt; r &lt;&lt; endl;&#125; 七、C++的布尔类型 1、C++具有真的布尔类型，bool是C++中的关键字，在C语言中使用布尔类型需要导入头文件stdbool.h（在C11中bool应该是数据类型了）。 2、在C++中 true false 是关键字，而在C语言中不是。 3、在C++中 true false 是1字节，而C语言中是4字节。 12345678#include &lt;iostream&gt;using namespace std;int main()&#123; bool flag = 0; cout &lt;&lt; flag &lt;&lt; &quot; &quot; &lt;&lt; sizeof(flag) &lt;&lt; endl;&#125; 八、C++的void* 1、C语言中void* 可以与任意类型指针 自动转换。 1234567891011#include &lt;stdio.h&gt;int main()&#123; void* p = NULL; char* p1 = p; int* p2 = p; double* p3 = p; p = p1; p = p3;&#125; 2、C++中void不能给其他类型的指针直接赋值，必须强制类型转换，但其他类型的指针可以自动给void赋值。 3、C++为什么这样修改void*？ 为了更安全，所以C++类型检查更严格。 C++可以自动识别类型，对万能指针的需求不再那么强烈。 九、操作符别名 某些特殊语言的键没有~,&amp;符合，所以C++标准委员会为了让C++更有竞争力，为符号定义了一些别名，让这些小语种也可以愉快编写C++代码 and &amp;&amp; or || not ! { &lt;% } %&gt; # :%1234567%:include &lt;iostream&gt;using namespace std;int main()&lt;% cout &lt;&lt; &quot;hello&quot; &lt;&lt;endl;%&gt;"},{"title":"test_new_blog","date":"2019-08-29T01:55:51.000Z","updated":"2019-08-29T01:55:51.941Z","comments":true,"path":"test-new-blog/index.html","permalink":"https://ikaros-521.github.io/test-new-blog/index.html","excerpt":"","text":""}],"posts":[{"title":"C++基础知识(一)","slug":"C-基础知识-一","date":"2019-08-29T01:59:56.000Z","updated":"2019-08-29T03:52:06.671Z","comments":true,"path":"2019/08/29/C-基础知识-一/","link":"","permalink":"https://ikaros-521.github.io/2019/08/29/C-基础知识-一/","excerpt":"下一章：传送门 思考题：C与C++的区别？一、C++介绍 本贾尼·斯特劳斯特卢普，与1979年4月份贝尔实验室的本贾尼博士在分析UNIX系统分布内核流量分析时，希望有一种有效的更加模块化的工具。 1979年10月完成了预处理器Cpre，为C增加了类机制，也就是面向对象，1983年完成了C++的第一个版本，C with classes也就是C++。 C++与C的不同点： 1、C++完全兼容C的所有语法（内容） 2、支持面向对象的编程思想 3、支持运算符重载 4、支持泛型编程、模板 5、支持异常处理 6、类型检查严格","text":"下一章：传送门 思考题：C与C++的区别？一、C++介绍 本贾尼·斯特劳斯特卢普，与1979年4月份贝尔实验室的本贾尼博士在分析UNIX系统分布内核流量分析时，希望有一种有效的更加模块化的工具。 1979年10月完成了预处理器Cpre，为C增加了类机制，也就是面向对象，1983年完成了C++的第一个版本，C with classes也就是C++。 C++与C的不同点： 1、C++完全兼容C的所有语法（内容） 2、支持面向对象的编程思想 3、支持运算符重载 4、支持泛型编程、模板 5、支持异常处理 6、类型检查严格 二、第一个C++程序 1、文件扩展名 .cpp .cc .C .cxx 2、编译器 g++ 大多数系统需要额外安装，Ubuntu系统下的安装命令： sudo apt-get update sudo apt-get install g++ gcc也可以继续使用，但需要增加参数 -xC++ -lstdc++ 3、头文件 #include #include &lt;stdio.h&gt; 可以继续使用，但C++建议使用 #include 4、输入/输出 cin &lt;&lt; 输入数据 cout &gt;&gt; 输出数据 cin/cout会自动识别类型 scanf/printf可以继续使用 注意：cout和cin是类对象，而scanf/printf是标准库函数。 5、增加了名字空间 std::cout using namespace std; 三、名字空间 1、什么是名字空间 在C++中经常使用多个独立开发的库来完成项目，由于库的作者或开发人员没见过面，因此命名冲突在所难免。 2、为什么需要名字空间 在项目中函数名、全局变量、结构、联合、枚举、类，非常有可能名字冲突，而名字空间就对这些命名进行逻辑空间划分（不是物理单元划分）， 为了解决命名冲突，C++之父为防止命名冲突给C++设计一个名字空间的机制。 通过使用namespace XXX把库中的变量、函数、类型、结构等包含在名字空间中，形成自己的作用域，避免名字冲突。 namespace xxx { }// 没有分号 注意：名字空间也是一种标识符，在同一作用域下不能重名。 3、同名的名字空间有自动合并（为了声明和定义可以分开写） 同名的名字空间中如果有重名的依然会命名冲突 4、名字空间的使用方法 ::域限定符 空间名::标识符 // 使用麻烦，但是非常安全 using namespace 空间名; 把空间中定义的标识符导入到当前代码中 不建议这样使用，相当于把垃圾分类后，又倒入同一个垃圾车，依然会冲突 1234567891011#include &lt;iostream&gt;namespace test&#123;int cout = 100;int cin = 99;&#125;int main()&#123; std::cout&lt;&lt;test::cout&lt;&lt;&apos; &apos;&lt;&lt;test::cin&lt;&lt;std::endl;&#125; 5、无名名字空间 不属于任何名字空间中的标识符，隶属于无名名字空间。 无名名字空间中的成员使用 ::标识符 进行访问。 如何访问被屏蔽的全局变量。 6、名字空间的嵌套 名字空间内部可以再定义名字空间，这种名字空间嵌套 内层的名字空间与外层的名字空间的成员，可以重名，内层会屏蔽外层的同名标识符。 多层的名字空间在使用时逐层分解。 12345678910111213n1::n2::num;namespace n1&#123; int num = 1; namespace n2 &#123; int num = 2; namespace n3 &#123; &#125; &#125;&#125; 7、可以给名字空间取别名 由于名字空间可以嵌套，这样就会导致在使用内层成员时过于麻烦，可以给名字空间取别名来解决这类问题。 namespace n123 = n1::n2::n3; 四、C++的结构 1、不再需要 typedef ，在定义结构变量时，可以省略struct关键字 2、成员可以是函数（成员函数），在成员函数中可以直接访问成员变量，不需要.或-&gt;，但是C的结构成员可以是函数指针。 3、有一些隐藏的成员函数（构造、析构、拷贝构造、赋值构造）。 4、可以继承，可以设置成员的访问权限（面向对象）。 123456789101112131415161718192021222324252627282930313233343536#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;struct Man&#123; char id[18];&#125;;struct Student:public Man&#123; char name[20]; char sex; short age; Student(void) &#123; cout&lt;&lt; &quot;我被调用了...&quot; &lt;&lt; endl; &#125; void show(void) &#123; cout &lt;&lt; &quot;我是秀&quot; &lt;&lt; name &lt;&lt; &quot; &quot; &lt;&lt; sex &lt;&lt; &quot; &quot; &lt;&lt; age &lt;&lt; endl; &#125;&#125;;int main()&#123; Student stu; strcpy(stu.name,&quot;hehe&quot;); stu.sex = &apos;m&apos;; stu.age = 12; strcpy(stu.id,&quot;1235214141231&quot;); cout &lt;&lt; stu.name &lt;&lt; &quot; &quot; &lt;&lt; stu.sex &lt;&lt; &quot; &quot; &lt;&lt; stu.age &lt;&lt; endl; cout&lt;&lt;stu.id&lt;&lt;endl; stu.show();&#125; 五、C++的联合 1、不再需要 typedef ，在定义结构变量时，可以省略union关键字 2、成员可以是函数（成员函数），在成员函数中可以直接访问成员变量，不需要.或-&gt;，但是C的结构成员可以是函数指针。 3、有一些隐藏的成员函数（构造、析构、拷贝构造、赋值构造）。 12345678910111213141516171819202122232425262728#include &lt;iostream&gt;using namespace std;union Data&#123; char ch[5]; int num; Data(void) &#123; cout&lt;&lt;&quot;我被调用了？&quot;&lt;&lt;endl; &#125; void show(void) &#123; cout &lt;&lt; ch &lt;&lt;&quot; &quot; &lt;&lt; num &lt;&lt; endl; &#125; ~Data(void) &#123; cout&lt;&lt;&quot;析构&quot;&lt;&lt;endl; &#125;&#125;;int main()&#123; Data d; d.show(); cout &lt;&lt; sizeof(d) &lt;&lt; endl;&#125; 六、C++的枚举 1、定义、使用方法与C语言基本一致。 2、类型检查比C语言更严格 1234567891011121314151617181920#include &lt;iostream&gt;using namespace std;enum Color&#123; RED, YELLOW, BLUE, WHITE, BLACK&#125;;int main()&#123; Color r; r = BLUE; //r = 0; error 类型检查更严格 cout &lt;&lt; r &lt;&lt; endl;&#125; 七、C++的布尔类型 1、C++具有真的布尔类型，bool是C++中的关键字，在C语言中使用布尔类型需要导入头文件stdbool.h（在C11中bool应该是数据类型了）。 2、在C++中 true false 是关键字，而在C语言中不是。 3、在C++中 true false 是1字节，而C语言中是4字节。 12345678#include &lt;iostream&gt;using namespace std;int main()&#123; bool flag = 0; cout &lt;&lt; flag &lt;&lt; &quot; &quot; &lt;&lt; sizeof(flag) &lt;&lt; endl;&#125; 八、C++的void* 1、C语言中void* 可以与任意类型指针 自动转换。 1234567891011#include &lt;stdio.h&gt;int main()&#123; void* p = NULL; char* p1 = p; int* p2 = p; double* p3 = p; p = p1; p = p3;&#125; 2、C++中void不能给其他类型的指针直接赋值，必须强制类型转换，但其他类型的指针可以自动给void赋值。 3、C++为什么这样修改void*？ 为了更安全，所以C++类型检查更严格。 C++可以自动识别类型，对万能指针的需求不再那么强烈。 九、操作符别名 某些特殊语言的键没有~,&amp;符合，所以C++标准委员会为了让C++更有竞争力，为符号定义了一些别名，让这些小语种也可以愉快编写C++代码 and &amp;&amp; or || not ! { &lt;% } %&gt; # :%1234567%:include &lt;iostream&gt;using namespace std;int main()&lt;% cout &lt;&lt; &quot;hello&quot; &lt;&lt;endl;%&gt;","categories":[],"tags":[{"name":"C++","slug":"C","permalink":"https://ikaros-521.github.io/tags/C/"}]},{"title":"测试新建文章功能","slug":"测试新建文章功能","date":"2019-08-29T01:55:18.000Z","updated":"2019-08-29T01:55:18.676Z","comments":true,"path":"2019/08/29/测试新建文章功能/","link":"","permalink":"https://ikaros-521.github.io/2019/08/29/测试新建文章功能/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"test","slug":"test","date":"2019-08-28T14:42:43.000Z","updated":"2019-08-28T14:42:43.318Z","comments":true,"path":"2019/08/28/test/","link":"","permalink":"https://ikaros-521.github.io/2019/08/28/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-08-28T14:24:12.584Z","updated":"2019-08-28T14:24:12.584Z","comments":true,"path":"2019/08/28/hello-world/","link":"","permalink":"https://ikaros-521.github.io/2019/08/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}